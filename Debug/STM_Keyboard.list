
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08010e04  08010e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801135c  0801135c  000131c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801135c  0801135c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011364  08011364  000131c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011368  08011368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0801136c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c90  200001c8  08011530  000131c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e58  08011530  00013e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a57f  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065f4  00000000  00000000  0003d773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002338  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b3e  00000000  00000000  000460a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002822e  00000000  00000000  00047bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f79a  00000000  00000000  0006fe0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d7f  00000000  00000000  0009f5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ffc  00000000  00000000  00187368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00191364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001c8 	.word	0x200001c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010dec 	.word	0x08010dec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001cc 	.word	0x200001cc
 800021c:	08010dec 	.word	0x08010dec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f00e fc5e 	bl	800eec6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	481e      	ldr	r0, [pc, #120]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000676:	f003 f943 	bl	8003900 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fecf 	bl	8001422 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000690:	f004 f9aa 	bl	80049e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 fec2 	bl	8001422 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_ADC1_Init+0x108>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	@ 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006bc:	f003 fb76 	bl	8003dac <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 feac 	bl	8001422 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_ADC1_Init+0x10c>)
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ce:	230c      	movs	r3, #12
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006d8:	f003 fb68 	bl	8003dac <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006e2:	f000 fe9e 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	@ 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001e4 	.word	0x200001e4
 80006f4:	32601000 	.word	0x32601000
 80006f8:	3ef08000 	.word	0x3ef08000

080006fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00e fbdc 	bl	800eec6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000710:	4a32      	ldr	r2, [pc, #200]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000716:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b2e      	ldr	r3, [pc, #184]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000742:	2201      	movs	r2, #1
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000748:	2202      	movs	r2, #2
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000762:	2201      	movs	r2, #1
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000778:	f003 f8c2 	bl	8003900 <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 fe4e 	bl	8001422 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_ADC2_Init+0xe4>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	@ 0x7f
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007a4:	f003 fb02 	bl	8003dac <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ae:	f000 fe38 	bl	8001422 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_ADC2_Init+0xe8>)
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007b6:	230c      	movs	r3, #12
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007c0:	f003 faf4 	bl	8003dac <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007ca:	f000 fe2a 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000250 	.word	0x20000250
 80007dc:	50000100 	.word	0x50000100
 80007e0:	0c900008 	.word	0x0c900008
 80007e4:	10c00010 	.word	0x10c00010

080007e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09c      	sub	sp, #112	@ 0x70
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	2244      	movs	r2, #68	@ 0x44
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00e fb5c 	bl	800eec6 <memset>
  if(adcHandle->Instance==ADC1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000816:	d169      	bne.n	80008ec <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000818:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800081e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4618      	mov	r0, r3
 800082a:	f007 ff6d 	bl	8008708 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000834:	f000 fdf5 	bl	8001422 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000838:	4b66      	ldr	r3, [pc, #408]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a65      	ldr	r2, [pc, #404]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000842:	4b64      	ldr	r3, [pc, #400]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800084a:	4b63      	ldr	r3, [pc, #396]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a62      	ldr	r2, [pc, #392]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000850:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b60      	ldr	r3, [pc, #384]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b5d      	ldr	r3, [pc, #372]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a5c      	ldr	r2, [pc, #368]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b5a      	ldr	r3, [pc, #360]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Key_2_Pin|Key_1_Pin;
 800087a:	2303      	movs	r3, #3
 800087c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800088a:	4619      	mov	r1, r3
 800088c:	4853      	ldr	r0, [pc, #332]	@ (80009dc <HAL_ADC_MspInit+0x1f4>)
 800088e:	f004 fe2b 	bl	80054e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000892:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 8000894:	4a53      	ldr	r2, [pc, #332]	@ (80009e4 <HAL_ADC_MspInit+0x1fc>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000898:	4b51      	ldr	r3, [pc, #324]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 800089a:	2205      	movs	r2, #5
 800089c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b4e      	ldr	r3, [pc, #312]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b8:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c0:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008ce:	4844      	ldr	r0, [pc, #272]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008d0:	f004 fb30 	bl	8004f34 <HAL_DMA_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80008da:	f000 fda2 	bl	8001422 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a3f      	ldr	r2, [pc, #252]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008ea:	e06e      	b.n	80009ca <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <HAL_ADC_MspInit+0x200>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d169      	bne.n	80009ca <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000900:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fefe 	bl	8008708 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000912:	f000 fd86 	bl	8001422 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a2d      	ldr	r2, [pc, #180]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10b      	bne.n	8000940 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a2a      	ldr	r2, [pc, #168]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Key_3_Pin|Key_4_Pin;
 8000958:	23c0      	movs	r3, #192	@ 0xc0
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f004 fdbb 	bl	80054e8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000974:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <HAL_ADC_MspInit+0x208>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800097a:	2224      	movs	r2, #36	@ 0x24
 800097c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000996:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800099a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009b0:	f004 fac0 	bl	8004f34 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 80009ba:	f000 fd32 	bl	8001422 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	@ 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000037c 	.word	0x2000037c
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	200002bc 	.word	0x200002bc
 80009e4:	40020008 	.word	0x40020008
 80009e8:	50000100 	.word	0x50000100
 80009ec:	2000031c 	.word	0x2000031c
 80009f0:	4002001c 	.word	0x4002001c

080009f4 <ADC_Filter>:

uint16_t filter_adc_data[4]; // 用于存储滤波后的ADC数据
uint16_t last_adc_data[4]; // 用于记录上一次的ADC数据

void ADC_Filter(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
    last_adc_data[0] = filter_adc_data[0];
 80009f8:	4b44      	ldr	r3, [pc, #272]	@ (8000b0c <ADC_Filter+0x118>)
 80009fa:	881a      	ldrh	r2, [r3, #0]
 80009fc:	4b44      	ldr	r3, [pc, #272]	@ (8000b10 <ADC_Filter+0x11c>)
 80009fe:	801a      	strh	r2, [r3, #0]
    last_adc_data[1] = filter_adc_data[1];
 8000a00:	4b42      	ldr	r3, [pc, #264]	@ (8000b0c <ADC_Filter+0x118>)
 8000a02:	885a      	ldrh	r2, [r3, #2]
 8000a04:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a06:	805a      	strh	r2, [r3, #2]
    last_adc_data[2] = filter_adc_data[2];
 8000a08:	4b40      	ldr	r3, [pc, #256]	@ (8000b0c <ADC_Filter+0x118>)
 8000a0a:	889a      	ldrh	r2, [r3, #4]
 8000a0c:	4b40      	ldr	r3, [pc, #256]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a0e:	809a      	strh	r2, [r3, #4]
    last_adc_data[3] = filter_adc_data[3];
 8000a10:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <ADC_Filter+0x118>)
 8000a12:	88da      	ldrh	r2, [r3, #6]
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a16:	80da      	strh	r2, [r3, #6]

	filter_adc_data[0] = ADC_FILTER_ALPHA * buffer_adc_1[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[0];
 8000a18:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <ADC_Filter+0x120>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a24:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000b18 <ADC_Filter+0x124>
 8000a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a2c:	4b37      	ldr	r3, [pc, #220]	@ (8000b0c <ADC_Filter+0x118>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000b1c <ADC_Filter+0x128>
 8000a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a48:	ee17 3a90 	vmov	r3, s15
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <ADC_Filter+0x118>)
 8000a50:	801a      	strh	r2, [r3, #0]
	filter_adc_data[1] = ADC_FILTER_ALPHA * buffer_adc_1[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[1];
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <ADC_Filter+0x120>)
 8000a54:	885b      	ldrh	r3, [r3, #2]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000b18 <ADC_Filter+0x124>
 8000a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <ADC_Filter+0x118>)
 8000a68:	885b      	ldrh	r3, [r3, #2]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a72:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000b1c <ADC_Filter+0x128>
 8000a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a82:	ee17 3a90 	vmov	r3, s15
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <ADC_Filter+0x118>)
 8000a8a:	805a      	strh	r2, [r3, #2]
	filter_adc_data[2] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[2];
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <ADC_Filter+0x12c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a98:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000b18 <ADC_Filter+0x124>
 8000a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <ADC_Filter+0x118>)
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aac:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000b1c <ADC_Filter+0x128>
 8000ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000abc:	ee17 3a90 	vmov	r3, s15
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <ADC_Filter+0x118>)
 8000ac4:	809a      	strh	r2, [r3, #4]
	filter_adc_data[3] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[3];
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <ADC_Filter+0x12c>)
 8000ac8:	885b      	ldrh	r3, [r3, #2]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000b18 <ADC_Filter+0x124>
 8000ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <ADC_Filter+0x118>)
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000b1c <ADC_Filter+0x128>
 8000aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af6:	ee17 3a90 	vmov	r3, s15
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <ADC_Filter+0x118>)
 8000afe:	80da      	strh	r2, [r3, #6]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000388 	.word	0x20000388
 8000b10:	20000390 	.word	0x20000390
 8000b14:	20000380 	.word	0x20000380
 8000b18:	3f19999a 	.word	0x3f19999a
 8000b1c:	3ecccccc 	.word	0x3ecccccc
 8000b20:	20000384 	.word	0x20000384

08000b24 <ADC_Init>:

void ADC_Init(void) // 只需要在初始化调用这个就可以持续收集adc数据
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000b28:	217f      	movs	r1, #127	@ 0x7f
 8000b2a:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <ADC_Init+0x24>)
 8000b2c:	f003 fefa 	bl	8004924 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000b30:	217f      	movs	r1, #127	@ 0x7f
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <ADC_Init+0x28>)
 8000b34:	f003 fef6 	bl	8004924 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f002 fc7b 	bl	8003434 <HAL_Delay>
    ADC_Start_DMA();
 8000b3e:	f000 f807 	bl	8000b50 <ADC_Start_DMA>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001e4 	.word	0x200001e4
 8000b4c:	20000250 	.word	0x20000250

08000b50 <ADC_Start_DMA>:


void ADC_Start_DMA(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer_adc_1, sizeof(buffer_adc_1)/sizeof(uint16_t));
 8000b54:	2202      	movs	r2, #2
 8000b56:	4905      	ldr	r1, [pc, #20]	@ (8000b6c <ADC_Start_DMA+0x1c>)
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <ADC_Start_DMA+0x20>)
 8000b5a:	f003 f855 	bl	8003c08 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer_adc_2, sizeof(buffer_adc_2)/sizeof(uint16_t));
 8000b5e:	2202      	movs	r2, #2
 8000b60:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <ADC_Start_DMA+0x24>)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <ADC_Start_DMA+0x28>)
 8000b64:	f003 f850 	bl	8003c08 <HAL_ADC_Start_DMA>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000380 	.word	0x20000380
 8000b70:	200001e4 	.word	0x200001e4
 8000b74:	20000384 	.word	0x20000384
 8000b78:	20000250 	.word	0x20000250

08000b7c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000b82:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <MX_CRC_Init+0x40>)
 8000b84:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_CRC_Init+0x3c>)
 8000ba6:	f004 f8d3 	bl	8004d50 <HAL_CRC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000bb0:	f000 fc37 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000398 	.word	0x20000398
 8000bbc:	40023000 	.word	0x40023000

08000bc0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_CRC_MspInit+0x38>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10b      	bne.n	8000bea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_CRC_MspInit+0x3c>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bd6:	4a09      	ldr	r2, [pc, #36]	@ (8000bfc <HAL_CRC_MspInit+0x3c>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <HAL_CRC_MspInit+0x3c>)
 8000be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023000 	.word	0x40023000
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_DMA_Init+0x70>)
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <MX_DMA_Init+0x70>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_DMA_Init+0x70>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_DMA_Init+0x70>)
 8000c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <MX_DMA_Init+0x70>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_DMA_Init+0x70>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200b      	movs	r0, #11
 8000c3c:	f004 f853 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c40:	200b      	movs	r0, #11
 8000c42:	f004 f86a 	bl	8004d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	200c      	movs	r0, #12
 8000c4c:	f004 f84b 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c50:	200c      	movs	r0, #12
 8000c52:	f004 f862 	bl	8004d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	200d      	movs	r0, #13
 8000c5c:	f004 f843 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c60:	200d      	movs	r0, #13
 8000c62:	f004 f85a 	bl	8004d1a <HAL_NVIC_EnableIRQ>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a18      	ldr	r2, [pc, #96]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf0:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <MX_GPIO_Init+0xc8>)
 8000cf2:	f004 fd93 	bl	800581c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <MX_GPIO_Init+0xc8>)
 8000d10:	f004 fbea 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESC_Buttom_Pin Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = ESC_Buttom_Pin|Mode_Buttom_Pin;
 8000d14:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_GPIO_Init+0xcc>)
 8000d2a:	f004 fbdd 	bl	80054e8 <HAL_GPIO_Init>

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000400 	.word	0x48000400

08000d44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <MX_I2C1_Init+0x80>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d50:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <MX_I2C1_Init+0x84>)
 8000d52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7e:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d80:	f004 fd64 	bl	800584c <HAL_I2C_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 fb4a 	bl	8001422 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d92:	f005 f929 	bl	8005fe8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f000 fb41 	bl	8001422 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <MX_I2C1_Init+0x7c>)
 8000da4:	f005 f96b 	bl	800607e <HAL_I2CEx_ConfigDigitalFilter>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 fb38 	bl	8001422 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000db2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000db6:	f005 f9af 	bl	8006118 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200003bc 	.word	0x200003bc
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	4052060f 	.word	0x4052060f

08000dcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09c      	sub	sp, #112	@ 0x70
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2244      	movs	r2, #68	@ 0x44
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00e f86a 	bl	800eec6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb0 <HAL_I2C_MspInit+0xe4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d154      	bne.n	8000ea6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dfc:	2340      	movs	r3, #64	@ 0x40
 8000dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f007 fc7d 	bl	8008708 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e14:	f000 fb05 	bl	8001422 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	4a25      	ldr	r2, [pc, #148]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f004 fb3e 	bl	80054e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e72:	2312      	movs	r3, #18
 8000e74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	@ (8000eb8 <HAL_I2C_MspInit+0xec>)
 8000e8a:	f004 fb2d 	bl	80054e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_I2C_MspInit+0xe8>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3770      	adds	r7, #112	@ 0x70
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-7位为普通按键(0x00-0xFF) 这里做的是4key键盘的协议(外加ESC)
uint8_t hid_buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void Keyboard_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    ADC_Init();
 8000ec0:	f7ff fe30 	bl	8000b24 <ADC_Init>
    HAL_Delay(100);
 8000ec4:	2064      	movs	r0, #100	@ 0x64
 8000ec6:	f002 fab5 	bl	8003434 <HAL_Delay>
    RGB_Init();
 8000eca:	f001 fce3 	bl	8002894 <RGB_Init>
    HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	@ 0x64
 8000ed0:	f002 fab0 	bl	8003434 <HAL_Delay>

    OLED_EnableDiffMode(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f001 fc15 	bl	8002704 <OLED_EnableDiffMode>
    OLED_EnableFastUpdate(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f001 fc30 	bl	8002740 <OLED_EnableFastUpdate>
    OLED_Init();
 8000ee0:	f000 fc0c 	bl	80016fc <OLED_Init>
    // USB已经在main中初始化

    keyboard_state.KEY_1 = false;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <Keyboard_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    keyboard_state.KEY_2 = false;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <Keyboard_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	705a      	strb	r2, [r3, #1]
    keyboard_state.KEY_3 = false;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <Keyboard_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	709a      	strb	r2, [r3, #2]
    keyboard_state.KEY_4 = false;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <Keyboard_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	70da      	strb	r2, [r3, #3]

    keyboard_state.TouchButton_1 = false;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <Keyboard_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	711a      	strb	r2, [r3, #4]
    keyboard_state.TouchButton_2 = false;
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <Keyboard_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	715a      	strb	r2, [r3, #5]
    keyboard_settings.keyboard_mode = 1;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <Keyboard_Init+0x5c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	729a      	strb	r2, [r3, #10]
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000424 	.word	0x20000424
 8000f18:	20000410 	.word	0x20000410

08000f1c <Keyboard_Read_Input>:

void Keyboard_Read_Input(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
    ADC_Filter();
 8000f26:	f7ff fd65 	bl	80009f4 <ADC_Filter>

    state->TouchButton_1 = (HAL_GPIO_ReadPin(ESC_Buttom_GPIO_Port, ESC_Buttom_Pin) == GPIO_PIN_RESET);
 8000f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f2e:	4836      	ldr	r0, [pc, #216]	@ (8001008 <Keyboard_Read_Input+0xec>)
 8000f30:	f004 fc5c 	bl	80057ec <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	711a      	strb	r2, [r3, #4]
    state->TouchButton_2 = (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET);
 8000f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f48:	482f      	ldr	r0, [pc, #188]	@ (8001008 <Keyboard_Read_Input+0xec>)
 8000f4a:	f004 fc4f 	bl	80057ec <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bf0c      	ite	eq
 8000f54:	2301      	moveq	r3, #1
 8000f56:	2300      	movne	r3, #0
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	715a      	strb	r2, [r3, #5]

    if (settings->enable_quick_trigger)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a1b      	ldrb	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d14b      	bne.n	8000ffe <Keyboard_Read_Input+0xe2>

    }
    else
    {
        // 普通触发模式
        state->KEY_1 = (filter_adc_data[0] > settings->trigger_threshold);
 8000f66:	4b29      	ldr	r3, [pc, #164]	@ (800100c <Keyboard_Read_Input+0xf0>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	bfcc      	ite	gt
 8000f82:	2301      	movgt	r3, #1
 8000f84:	2300      	movle	r3, #0
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	701a      	strb	r2, [r3, #0]
        state->KEY_2 = (filter_adc_data[1] > settings->trigger_threshold);
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <Keyboard_Read_Input+0xf0>)
 8000f8e:	885b      	ldrh	r3, [r3, #2]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	bfcc      	ite	gt
 8000fa8:	2301      	movgt	r3, #1
 8000faa:	2300      	movle	r3, #0
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	705a      	strb	r2, [r3, #1]
        state->KEY_3 = (filter_adc_data[2] > settings->trigger_threshold);
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <Keyboard_Read_Input+0xf0>)
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	bfcc      	ite	gt
 8000fce:	2301      	movgt	r3, #1
 8000fd0:	2300      	movle	r3, #0
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	709a      	strb	r2, [r3, #2]
        state->KEY_4 = (filter_adc_data[3] > settings->trigger_threshold);
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <Keyboard_Read_Input+0xf0>)
 8000fda:	88db      	ldrh	r3, [r3, #6]
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	bfcc      	ite	gt
 8000ff4:	2301      	movgt	r3, #1
 8000ff6:	2300      	movle	r3, #0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	70da      	strb	r2, [r3, #3]
    }
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	48000400 	.word	0x48000400
 800100c:	20000388 	.word	0x20000388

08001010 <Handle_Mode_Switch>:

void Handle_Mode_Switch(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    static bool last_mode_button_state = false;
    if (state->TouchButton_2 && !last_mode_button_state) // 检测按钮下降沿
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d013      	beq.n	800104a <Handle_Mode_Switch+0x3a>
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <Handle_Mode_Switch+0x50>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00c      	beq.n	800104a <Handle_Mode_Switch+0x3a>
    {
        settings->keyboard_mode++;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a9b      	ldrb	r3, [r3, #10]
 8001034:	3301      	adds	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	729a      	strb	r2, [r3, #10]
        if (settings->keyboard_mode > 3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7a9b      	ldrb	r3, [r3, #10]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d902      	bls.n	800104a <Handle_Mode_Switch+0x3a>
        {
            settings->keyboard_mode = 1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	729a      	strb	r2, [r3, #10]
        }
    }
    last_mode_button_state = state->TouchButton_2;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	795a      	ldrb	r2, [r3, #5]
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <Handle_Mode_Switch+0x50>)
 8001050:	701a      	strb	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000434 	.word	0x20000434

08001064 <Keyboard_Updater>:

void Keyboard_Updater(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    Keyboard_Read_Input(settings, state);
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff53 	bl	8000f1c <Keyboard_Read_Input>
    Handle_Mode_Switch(settings, state);
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ffc9 	bl	8001010 <Handle_Mode_Switch>
    hid_buffer[0] = KEYBOARD_BUTTON_NONE; // 特殊按键位
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <Keyboard_Updater+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    hid_buffer[1] = KEYBOARD_BUTTON_NONE; // 保留位
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <Keyboard_Updater+0xb0>)
 8001086:	2200      	movs	r2, #0
 8001088:	705a      	strb	r2, [r3, #1]
    hid_buffer[7] = KEYBOARD_BUTTON_NONE; // 这是padding
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <Keyboard_Updater+0xb0>)
 800108c:	2200      	movs	r2, #0
 800108e:	71da      	strb	r2, [r3, #7]

    hid_buffer[2] = state->KEY_1 ? KEYBOARD_BUTTON_D : KEYBOARD_BUTTON_NONE;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <Keyboard_Updater+0x38>
 8001098:	2207      	movs	r2, #7
 800109a:	e000      	b.n	800109e <Keyboard_Updater+0x3a>
 800109c:	2200      	movs	r2, #0
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <Keyboard_Updater+0xb0>)
 80010a0:	709a      	strb	r2, [r3, #2]
    hid_buffer[3] = state->KEY_2 ? KEYBOARD_BUTTON_F : KEYBOARD_BUTTON_NONE;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <Keyboard_Updater+0x4a>
 80010aa:	2209      	movs	r2, #9
 80010ac:	e000      	b.n	80010b0 <Keyboard_Updater+0x4c>
 80010ae:	2200      	movs	r2, #0
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <Keyboard_Updater+0xb0>)
 80010b2:	70da      	strb	r2, [r3, #3]
    hid_buffer[4] = state->KEY_3 ? KEYBOARD_BUTTON_J : KEYBOARD_BUTTON_NONE;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <Keyboard_Updater+0x5c>
 80010bc:	220d      	movs	r2, #13
 80010be:	e000      	b.n	80010c2 <Keyboard_Updater+0x5e>
 80010c0:	2200      	movs	r2, #0
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <Keyboard_Updater+0xb0>)
 80010c4:	711a      	strb	r2, [r3, #4]
    hid_buffer[5] = state->KEY_4 ? KEYBOARD_BUTTON_K : KEYBOARD_BUTTON_NONE;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	78db      	ldrb	r3, [r3, #3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <Keyboard_Updater+0x6e>
 80010ce:	220e      	movs	r2, #14
 80010d0:	e000      	b.n	80010d4 <Keyboard_Updater+0x70>
 80010d2:	2200      	movs	r2, #0
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <Keyboard_Updater+0xb0>)
 80010d6:	715a      	strb	r2, [r3, #5]
    hid_buffer[6] = state->TouchButton_1 ? KEYBOARD_BUTTON_ESC : KEYBOARD_BUTTON_NONE;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <Keyboard_Updater+0x80>
 80010e0:	2229      	movs	r2, #41	@ 0x29
 80010e2:	e000      	b.n	80010e6 <Keyboard_Updater+0x82>
 80010e4:	2200      	movs	r2, #0
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <Keyboard_Updater+0xb0>)
 80010e8:	719a      	strb	r2, [r3, #6]
    
    // 这里的TouchButton_2是模式切换按钮,不需要发送到USB HID
    // 发送USB HID报告
    if (settings->keyboard_mode == 1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7a9b      	ldrb	r3, [r3, #10]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d105      	bne.n	80010fe <Keyboard_Updater+0x9a>
    {
        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, sizeof(hid_buffer));
 80010f2:	2208      	movs	r2, #8
 80010f4:	4907      	ldr	r1, [pc, #28]	@ (8001114 <Keyboard_Updater+0xb0>)
 80010f6:	4808      	ldr	r0, [pc, #32]	@ (8001118 <Keyboard_Updater+0xb4>)
 80010f8:	f00c f86e 	bl	800d1d8 <USBD_HID_SendReport>
 80010fc:	e003      	b.n	8001106 <Keyboard_Updater+0xa2>
    }
    else
    {
        OLED_DisplayUI(&keyboard_settings, &keyboard_state);
 80010fe:	4907      	ldr	r1, [pc, #28]	@ (800111c <Keyboard_Updater+0xb8>)
 8001100:	4807      	ldr	r0, [pc, #28]	@ (8001120 <Keyboard_Updater+0xbc>)
 8001102:	f001 fa8f 	bl	8002624 <OLED_DisplayUI>
    }
    
    keyboard_update_flag = 0; // 清除更新标志位
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <Keyboard_Updater+0xc0>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000042c 	.word	0x2000042c
 8001118:	2000254c 	.word	0x2000254c
 800111c:	20000424 	.word	0x20000424
 8001120:	20000410 	.word	0x20000410
 8001124:	2000042a 	.word	0x2000042a

08001128 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6 && !keyboard_update_flag) // TIM6用于扫描&更新键盘状态
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10a      	bne.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x28>
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d106      	bne.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        keyboard_update_flag = 1;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
        Keyboard_Updater(&keyboard_settings, &keyboard_state);
 8001148:	490d      	ldr	r1, [pc, #52]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800114c:	f7ff ff8a 	bl	8001064 <Keyboard_Updater>
    }

    if (htim->Instance == TIM7) // TIM7用于OLED动画计时
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10a      	bne.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x48>
    {
        msg_counter++;
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	1c54      	adds	r4, r2, #1
 8001162:	f143 0500 	adc.w	r5, r3, #0
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001168:	e9c3 4500 	strd	r4, r5, [r3]
        CPS_Counter(); // 计算CPS
 800116c:	f001 fa7e 	bl	800266c <CPS_Counter>
    }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	40001000 	.word	0x40001000
 800117c:	2000042a 	.word	0x2000042a
 8001180:	20000424 	.word	0x20000424
 8001184:	20000410 	.word	0x20000410
 8001188:	40001400 	.word	0x40001400
 800118c:	20001e30 	.word	0x20001e30

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f002 f8dc 	bl	8003352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f8f7 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f7ff fd69 	bl	8000c74 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a2:	f7ff fd2d 	bl	8000c00 <MX_DMA_Init>
  MX_ADC2_Init();
 80011a6:	f7ff faa9 	bl	80006fc <MX_ADC2_Init>
  MX_I2C1_Init();
 80011aa:	f7ff fdcb 	bl	8000d44 <MX_I2C1_Init>
  MX_USB_Device_Init();
 80011ae:	f00d f967 	bl	800e480 <MX_USB_Device_Init>
  MX_ADC1_Init();
 80011b2:	f7ff fa1b 	bl	80005ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80011b6:	f001 fe61 	bl	8002e7c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80011ba:	f001 fffd 	bl	80031b8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80011be:	f001 fed3 	bl	8002f68 <MX_TIM6_Init>
  MX_CRC_Init();
 80011c2:	f7ff fcdb 	bl	8000b7c <MX_CRC_Init>
  MX_TIM7_Init();
 80011c6:	f001 ff05 	bl	8002fd4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 80011ca:	f7ff fe77 	bl	8000ebc <Keyboard_Init>
  HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	@ 0x64
 80011d0:	f002 f930 	bl	8003434 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (keyboard_settings.rgb_style == 0)
 80011d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001384 <main+0x1f4>)
 80011d6:	7a5b      	ldrb	r3, [r3, #9]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <main+0x52>
    {
      RGB_Clear();
 80011dc:	f001 fb96 	bl	800290c <RGB_Clear>
 80011e0:	e7f8      	b.n	80011d4 <main+0x44>
    }
    else if (keyboard_settings.rgb_style == 1)
 80011e2:	4b68      	ldr	r3, [pc, #416]	@ (8001384 <main+0x1f4>)
 80011e4:	7a5b      	ldrb	r3, [r3, #9]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d105      	bne.n	80011f6 <main+0x66>
    {
      RGB_RainbowCycle();
 80011ea:	f001 fc93 	bl	8002b14 <RGB_RainbowCycle>
      HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	@ 0x64
 80011f0:	f002 f920 	bl	8003434 <HAL_Delay>
 80011f4:	e7ee      	b.n	80011d4 <main+0x44>
    }
    else if (keyboard_settings.rgb_style == 2)
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <main+0x1f4>)
 80011f8:	7a5b      	ldrb	r3, [r3, #9]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d1ea      	bne.n	80011d4 <main+0x44>
    {
      if (filter_adc_data[0] > keyboard_settings.trigger_threshold)
 80011fe:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <main+0x1f8>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	4b5e      	ldr	r3, [pc, #376]	@ (8001384 <main+0x1f4>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	dd21      	ble.n	800125e <main+0xce>
      {
        uint8_t red = rand() % 256;
 800121a:	f00d fd11 	bl	800ec40 <rand>
 800121e:	4603      	mov	r3, r0
 8001220:	425a      	negs	r2, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	bf58      	it	pl
 8001228:	4253      	negpl	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
        uint8_t green = rand() % 256;
 800122c:	f00d fd08 	bl	800ec40 <rand>
 8001230:	4603      	mov	r3, r0
 8001232:	425a      	negs	r2, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	bf58      	it	pl
 800123a:	4253      	negpl	r3, r2
 800123c:	717b      	strb	r3, [r7, #5]
        uint8_t blue = rand() % 256;
 800123e:	f00d fcff 	bl	800ec40 <rand>
 8001242:	4603      	mov	r3, r0
 8001244:	425a      	negs	r2, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	bf58      	it	pl
 800124c:	4253      	negpl	r3, r2
 800124e:	713b      	strb	r3, [r7, #4]
        RGB_SetColor(0, red, green, blue);
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	797a      	ldrb	r2, [r7, #5]
 8001254:	79b9      	ldrb	r1, [r7, #6]
 8001256:	2000      	movs	r0, #0
 8001258:	f001 fb24 	bl	80028a4 <RGB_SetColor>
 800125c:	e08e      	b.n	800137c <main+0x1ec>
      }
      else if (filter_adc_data[1] > keyboard_settings.trigger_threshold)
 800125e:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <main+0x1f8>)
 8001260:	885b      	ldrh	r3, [r3, #2]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	4b46      	ldr	r3, [pc, #280]	@ (8001384 <main+0x1f4>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd21      	ble.n	80012be <main+0x12e>
      {
        uint8_t red = rand() % 256;
 800127a:	f00d fce1 	bl	800ec40 <rand>
 800127e:	4603      	mov	r3, r0
 8001280:	425a      	negs	r2, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	bf58      	it	pl
 8001288:	4253      	negpl	r3, r2
 800128a:	727b      	strb	r3, [r7, #9]
        uint8_t green = rand() % 256;
 800128c:	f00d fcd8 	bl	800ec40 <rand>
 8001290:	4603      	mov	r3, r0
 8001292:	425a      	negs	r2, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	bf58      	it	pl
 800129a:	4253      	negpl	r3, r2
 800129c:	723b      	strb	r3, [r7, #8]
        uint8_t blue = rand() % 256;
 800129e:	f00d fccf 	bl	800ec40 <rand>
 80012a2:	4603      	mov	r3, r0
 80012a4:	425a      	negs	r2, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	bf58      	it	pl
 80012ac:	4253      	negpl	r3, r2
 80012ae:	71fb      	strb	r3, [r7, #7]
        RGB_SetColor(1, red, green, blue);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	7a3a      	ldrb	r2, [r7, #8]
 80012b4:	7a79      	ldrb	r1, [r7, #9]
 80012b6:	2001      	movs	r0, #1
 80012b8:	f001 faf4 	bl	80028a4 <RGB_SetColor>
 80012bc:	e05e      	b.n	800137c <main+0x1ec>
      }
      else if (filter_adc_data[2] > keyboard_settings.trigger_threshold)
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <main+0x1f8>)
 80012c0:	889b      	ldrh	r3, [r3, #4]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <main+0x1f4>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	dd21      	ble.n	800131e <main+0x18e>
      {
        uint8_t red = rand() % 256;
 80012da:	f00d fcb1 	bl	800ec40 <rand>
 80012de:	4603      	mov	r3, r0
 80012e0:	425a      	negs	r2, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	bf58      	it	pl
 80012e8:	4253      	negpl	r3, r2
 80012ea:	733b      	strb	r3, [r7, #12]
        uint8_t green = rand() % 256;
 80012ec:	f00d fca8 	bl	800ec40 <rand>
 80012f0:	4603      	mov	r3, r0
 80012f2:	425a      	negs	r2, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	bf58      	it	pl
 80012fa:	4253      	negpl	r3, r2
 80012fc:	72fb      	strb	r3, [r7, #11]
        uint8_t blue = rand() % 256;
 80012fe:	f00d fc9f 	bl	800ec40 <rand>
 8001302:	4603      	mov	r3, r0
 8001304:	425a      	negs	r2, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	bf58      	it	pl
 800130c:	4253      	negpl	r3, r2
 800130e:	72bb      	strb	r3, [r7, #10]
        RGB_SetColor(2, red, green, blue);
 8001310:	7abb      	ldrb	r3, [r7, #10]
 8001312:	7afa      	ldrb	r2, [r7, #11]
 8001314:	7b39      	ldrb	r1, [r7, #12]
 8001316:	2002      	movs	r0, #2
 8001318:	f001 fac4 	bl	80028a4 <RGB_SetColor>
 800131c:	e02e      	b.n	800137c <main+0x1ec>
      }
      else if (filter_adc_data[3] > keyboard_settings.trigger_threshold)
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <main+0x1f8>)
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <main+0x1f4>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	dd20      	ble.n	800137c <main+0x1ec>
      {
        uint8_t red = rand() % 256;
 800133a:	f00d fc81 	bl	800ec40 <rand>
 800133e:	4603      	mov	r3, r0
 8001340:	425a      	negs	r2, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	bf58      	it	pl
 8001348:	4253      	negpl	r3, r2
 800134a:	73fb      	strb	r3, [r7, #15]
        uint8_t green = rand() % 256;
 800134c:	f00d fc78 	bl	800ec40 <rand>
 8001350:	4603      	mov	r3, r0
 8001352:	425a      	negs	r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	bf58      	it	pl
 800135a:	4253      	negpl	r3, r2
 800135c:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = rand() % 256;
 800135e:	f00d fc6f 	bl	800ec40 <rand>
 8001362:	4603      	mov	r3, r0
 8001364:	425a      	negs	r2, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	bf58      	it	pl
 800136c:	4253      	negpl	r3, r2
 800136e:	737b      	strb	r3, [r7, #13]
        RGB_SetColor(3, red, green, blue);
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	7bba      	ldrb	r2, [r7, #14]
 8001374:	7bf9      	ldrb	r1, [r7, #15]
 8001376:	2003      	movs	r0, #3
 8001378:	f001 fa94 	bl	80028a4 <RGB_SetColor>
      }
      RGB_Update();
 800137c:	f001 fade 	bl	800293c <RGB_Update>
    if (keyboard_settings.rgb_style == 0)
 8001380:	e728      	b.n	80011d4 <main+0x44>
 8001382:	bf00      	nop
 8001384:	20000410 	.word	0x20000410
 8001388:	20000388 	.word	0x20000388

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2238      	movs	r2, #56	@ 0x38
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f00d fd93 	bl	800eec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f006 fbc8 	bl	8007b44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013b4:	2321      	movs	r3, #33	@ 0x21
 80013b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013be:	2301      	movs	r3, #1
 80013c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	2303      	movs	r3, #3
 80013c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013ce:	2355      	movs	r3, #85	@ 0x55
 80013d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013da:	2302      	movs	r3, #2
 80013dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 fc62 	bl	8007cac <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ee:	f000 f818 	bl	8001422 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	2303      	movs	r3, #3
 80013f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2104      	movs	r1, #4
 800140a:	4618      	mov	r0, r3
 800140c:	f006 ff60 	bl	80082d0 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001416:	f000 f804 	bl	8001422 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	@ 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001426:	b672      	cpsid	i
}
 8001428:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142a:	bf00      	nop
 800142c:	e7fd      	b.n	800142a <Error_Handler+0x8>
	...

08001430 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143a:	2100      	movs	r1, #0
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <OLED_InitBuffer+0x54>)
 800143e:	f00d fd42 	bl	800eec6 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001442:	f240 4201 	movw	r2, #1025	@ 0x401
 8001446:	2100      	movs	r1, #0
 8001448:	480f      	ldr	r0, [pc, #60]	@ (8001488 <OLED_InitBuffer+0x58>)
 800144a:	f00d fd3c 	bl	800eec6 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <OLED_InitBuffer+0x58>)
 8001450:	2240      	movs	r2, #64	@ 0x40
 8001452:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <OLED_InitBuffer+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <OLED_InitBuffer+0x60>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	e006      	b.n	8001474 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <OLED_InitBuffer+0x64>)
 800146a:	2101      	movs	r1, #1
 800146c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	3301      	adds	r3, #1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d9f5      	bls.n	8001466 <OLED_InitBuffer+0x36>
    }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000448 	.word	0x20000448
 8001488:	20000848 	.word	0x20000848
 800148c:	2000043c 	.word	0x2000043c
 8001490:	2000043d 	.word	0x2000043d
 8001494:	20000440 	.word	0x20000440

08001498 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800149e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a2:	2100      	movs	r1, #0
 80014a4:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <OLED_ClearBuffer+0x38>)
 80014a6:	f00d fd0e 	bl	800eec6 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e006      	b.n	80014be <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <OLED_ClearBuffer+0x3c>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	3301      	adds	r3, #1
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d9f5      	bls.n	80014b0 <OLED_ClearBuffer+0x18>
    }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000448 	.word	0x20000448
 80014d4:	20000440 	.word	0x20000440

080014d8 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <OLED_IsBusy+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 80014e8:	f001 ff98 	bl	800341c <HAL_GetTick>
 80014ec:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <OLED_IsBusy+0x48>)
 80014f0:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <OLED_IsBusy+0x44>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <OLED_IsBusy+0x44>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <OLED_IsBusy+0x34>
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <OLED_IsBusy+0x4c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <OLED_IsBusy+0x38>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <OLED_IsBusy+0x3a>
 8001510:	2300      	movs	r3, #0
 8001512:	b2db      	uxtb	r3, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000043c 	.word	0x2000043c
 8001520:	20000438 	.word	0x20000438
 8001524:	2000043d 	.word	0x2000043d

08001528 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 800152e:	bf00      	nop
 8001530:	f7ff ffd2 	bl	80014d8 <OLED_IsBusy>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1fa      	bne.n	8001530 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <OLED_UpdateDisplayVSync+0x90>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001540:	f001 ff6c 	bl	800341c <HAL_GetTick>
 8001544:	4603      	mov	r3, r0
 8001546:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <OLED_UpdateDisplayVSync+0x94>)
 8001548:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <OLED_UpdateDisplayVSync+0x98>)
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <OLED_UpdateDisplayVSync+0x9c>)
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <OLED_UpdateDisplayVSync+0xa0>)
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800155c:	461a      	mov	r2, r3
 800155e:	f00d fd2e 	bl	800efbe <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e008      	b.n	800157a <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <OLED_UpdateDisplayVSync+0xa4>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f8aa 	bl	80016c8 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	3301      	adds	r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b07      	cmp	r3, #7
 800157e:	d9f3      	bls.n	8001568 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	f240 4301 	movw	r3, #1025	@ 0x401
 800158a:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <OLED_UpdateDisplayVSync+0x98>)
 800158c:	2178      	movs	r1, #120	@ 0x78
 800158e:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <OLED_UpdateDisplayVSync+0xa8>)
 8001590:	f004 f9f8 	bl	8005984 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	71bb      	strb	r3, [r7, #6]
 8001598:	e006      	b.n	80015a8 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <OLED_UpdateDisplayVSync+0xac>)
 800159e:	2100      	movs	r1, #0
 80015a0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	3301      	adds	r3, #1
 80015a6:	71bb      	strb	r3, [r7, #6]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	d9f5      	bls.n	800159a <OLED_UpdateDisplayVSync+0x72>
    }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000043c 	.word	0x2000043c
 80015bc:	20000438 	.word	0x20000438
 80015c0:	20000848 	.word	0x20000848
 80015c4:	20000849 	.word	0x20000849
 80015c8:	20000448 	.word	0x20000448
 80015cc:	08010e4c 	.word	0x08010e4c
 80015d0:	200003bc 	.word	0x200003bc
 80015d4:	20000440 	.word	0x20000440

080015d8 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b07      	cmp	r3, #7
 80015ec:	d85c      	bhi.n	80016a8 <OLED_UpdateDisplayPartial+0xd0>
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d859      	bhi.n	80016a8 <OLED_UpdateDisplayPartial+0xd0>
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d855      	bhi.n	80016a8 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 80015fc:	bf00      	nop
 80015fe:	f7ff ff6b 	bl	80014d8 <OLED_IsBusy>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1fa      	bne.n	80015fe <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <OLED_UpdateDisplayPartial+0xd8>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 800160e:	f001 ff05 	bl	800341c <HAL_GetTick>
 8001612:	4603      	mov	r3, r0
 8001614:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <OLED_UpdateDisplayPartial+0xdc>)
 8001616:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8001618:	2022      	movs	r0, #34	@ 0x22
 800161a:	f000 f855 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f851 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f84d 	bl	80016c8 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 800162e:	2021      	movs	r0, #33	@ 0x21
 8001630:	f000 f84a 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f847 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 800163a:	207f      	movs	r0, #127	@ 0x7f
 800163c:	f000 f844 	bl	80016c8 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001640:	79ba      	ldrb	r2, [r7, #6]
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	3301      	adds	r3, #1
 8001648:	b29b      	uxth	r3, r3
 800164a:	01db      	lsls	r3, r3, #7
 800164c:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <OLED_UpdateDisplayPartial+0xe0>)
 8001650:	2240      	movs	r2, #64	@ 0x40
 8001652:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e016      	b.n	8001688 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	01db      	lsls	r3, r3, #7
 8001662:	3301      	adds	r3, #1
        memcpy(
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <OLED_UpdateDisplayPartial+0xe0>)
 8001666:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	461a      	mov	r2, r3
        memcpy(
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <OLED_UpdateDisplayPartial+0xe4>)
 8001670:	4413      	add	r3, r2
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	4619      	mov	r1, r3
 8001676:	f00d fca2 	bl	800efbe <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <OLED_UpdateDisplayPartial+0xe8>)
 800167e:	2100      	movs	r1, #0
 8001680:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	3301      	adds	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	429a      	cmp	r2, r3
 800168e:	d9e4      	bls.n	800165a <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	b29b      	uxth	r3, r3
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <OLED_UpdateDisplayPartial+0xe0>)
 800169e:	2178      	movs	r1, #120	@ 0x78
 80016a0:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <OLED_UpdateDisplayPartial+0xec>)
 80016a2:	f004 f96f 	bl	8005984 <HAL_I2C_Master_Transmit>
 80016a6:	e000      	b.n	80016aa <OLED_UpdateDisplayPartial+0xd2>
        return;
 80016a8:	bf00      	nop
}
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000043c 	.word	0x2000043c
 80016b4:	20000438 	.word	0x20000438
 80016b8:	20000848 	.word	0x20000848
 80016bc:	20000448 	.word	0x20000448
 80016c0:	20000440 	.word	0x20000440
 80016c4:	200003bc 	.word	0x200003bc

080016c8 <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 80016d2:	2300      	movs	r3, #0
 80016d4:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2302      	movs	r3, #2
 80016e6:	2178      	movs	r1, #120	@ 0x78
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <OLED_SendCommand+0x30>)
 80016ea:	f004 f94b 	bl	8005984 <HAL_I2C_Master_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200003bc 	.word	0x200003bc

080016fc <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001700:	2064      	movs	r0, #100	@ 0x64
 8001702:	f001 fe97 	bl	8003434 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001706:	20ae      	movs	r0, #174	@ 0xae
 8001708:	f7ff ffde 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 800170c:	20d5      	movs	r0, #213	@ 0xd5
 800170e:	f7ff ffdb 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001712:	2080      	movs	r0, #128	@ 0x80
 8001714:	f7ff ffd8 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001718:	20a8      	movs	r0, #168	@ 0xa8
 800171a:	f7ff ffd5 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 800171e:	203f      	movs	r0, #63	@ 0x3f
 8001720:	f7ff ffd2 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001724:	20d3      	movs	r0, #211	@ 0xd3
 8001726:	f7ff ffcf 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ffcc 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001730:	2040      	movs	r0, #64	@ 0x40
 8001732:	f7ff ffc9 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001736:	208d      	movs	r0, #141	@ 0x8d
 8001738:	f7ff ffc6 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 800173c:	2014      	movs	r0, #20
 800173e:	f7ff ffc3 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001742:	2020      	movs	r0, #32
 8001744:	f7ff ffc0 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff ffbd 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 800174e:	20a1      	movs	r0, #161	@ 0xa1
 8001750:	f7ff ffba 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001754:	20c8      	movs	r0, #200	@ 0xc8
 8001756:	f7ff ffb7 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 800175a:	20da      	movs	r0, #218	@ 0xda
 800175c:	f7ff ffb4 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001760:	2012      	movs	r0, #18
 8001762:	f7ff ffb1 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001766:	2081      	movs	r0, #129	@ 0x81
 8001768:	f7ff ffae 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 800176c:	20cf      	movs	r0, #207	@ 0xcf
 800176e:	f7ff ffab 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8001772:	20d9      	movs	r0, #217	@ 0xd9
 8001774:	f7ff ffa8 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8001778:	20f1      	movs	r0, #241	@ 0xf1
 800177a:	f7ff ffa5 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 800177e:	20db      	movs	r0, #219	@ 0xdb
 8001780:	f7ff ffa2 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8001784:	2030      	movs	r0, #48	@ 0x30
 8001786:	f7ff ff9f 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 800178a:	20a4      	movs	r0, #164	@ 0xa4
 800178c:	f7ff ff9c 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8001790:	20a6      	movs	r0, #166	@ 0xa6
 8001792:	f7ff ff99 	bl	80016c8 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8001796:	202e      	movs	r0, #46	@ 0x2e
 8001798:	f7ff ff96 	bl	80016c8 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 800179c:	f7ff fe48 	bl	8001430 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 80017a0:	f7ff fe7a 	bl	8001498 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 80017a4:	20af      	movs	r0, #175	@ 0xaf
 80017a6:	f7ff ff8f 	bl	80016c8 <OLED_SendCommand>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}

080017ae <EaseLinear>:
#include "oled_controller.h"

#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ee07 3a90 	vmov	s15, r3
}
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <EaseInQuad>:

static float EaseInQuad(float t)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * t;
 80017d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017da:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * (2 - t);
 80017f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001802:	edd7 7a01 	vldr	s15, [r7, #4]
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	ed87 0a01 	vstr	s0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8001822:	edd7 7a01 	vldr	s15, [r7, #4]
 8001826:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800182a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d508      	bpl.n	8001846 <EaseInOutQuad+0x2e>
 8001834:	edd7 7a01 	vldr	s15, [r7, #4]
 8001838:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800183c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	e00f      	b.n	8001866 <EaseInOutQuad+0x4e>
 8001846:	edd7 7a01 	vldr	s15, [r7, #4]
 800184a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001856:	edd7 7a01 	vldr	s15, [r7, #4]
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001862:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001866:	eeb0 0a67 	vmov.f32	s0, s15
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	ed87 0a01 	vstr	s0, [r7, #4]
    return t * t * t;
 800187e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001882:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001886:	edd7 7a01 	vldr	s15, [r7, #4]
 800188a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	ed87 0a01 	vstr	s0, [r7, #4]
    float t1 = t - 1;
 80018a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018b2:	edc7 7a03 	vstr	s15, [r7, #12]
    return t1 * t1 * t1 + 1;
 80018b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018be:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ca:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80018e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d50e      	bpl.n	8001916 <EaseInOutCubic+0x3a>
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001900:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001904:	edd7 7a01 	vldr	s15, [r7, #4]
 8001908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	e01d      	b.n	8001952 <EaseInOutCubic+0x76>
 8001916:	edd7 7a01 	vldr	s15, [r7, #4]
 800191a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800191e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001922:	edd7 7a01 	vldr	s15, [r7, #4]
 8001926:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800192a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800192e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001936:	edd7 7a01 	vldr	s15, [r7, #4]
 800193a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800193e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001942:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800194e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 800196a:	edd7 7a01 	vldr	s15, [r7, #4]
 800196e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d012      	beq.n	800199e <EaseInExpo+0x3e>
 8001978:	edd7 7a01 	vldr	s15, [r7, #4]
 800197c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001984:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198c:	eef0 0a67 	vmov.f32	s1, s15
 8001990:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001994:	f00e f93e 	bl	800fc14 <powf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	e001      	b.n	80019a2 <EaseInExpo+0x42>
 800199e:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80019ac <EaseInExpo+0x4c>
}
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	00000000 	.word	0x00000000

080019b0 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a01 	vstr	s0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 80019ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80019be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019c2:	eef4 7a47 	vcmp.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d012      	beq.n	80019f2 <EaseOutExpo+0x42>
 80019cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d0:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 80019d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d8:	eef0 0a67 	vmov.f32	s1, s15
 80019dc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80019e0:	f00e f918 	bl	800fc14 <powf>
 80019e4:	eef0 7a40 	vmov.f32	s15, s0
 80019e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	e001      	b.n	80019f6 <EaseOutExpo+0x46>
 80019f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
}
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	ed87 0a01 	vstr	s0, [r7, #4]
    if (t == 0)
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d102      	bne.n	8001a1e <EaseInOutExpo+0x1e>
        return 0;
 8001a18:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8001ab4 <EaseInOutExpo+0xb4>
 8001a1c:	e045      	b.n	8001aaa <EaseInOutExpo+0xaa>
    if (t == 1)
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a26:	eef4 7a47 	vcmp.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d102      	bne.n	8001a36 <EaseInOutExpo+0x36>
        return 1;
 8001a30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001a34:	e039      	b.n	8001aaa <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001a36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d516      	bpl.n	8001a76 <EaseInOutExpo+0x76>
        return powf(2, 20 * t - 10) / 2;
 8001a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a5c:	eef0 0a67 	vmov.f32	s1, s15
 8001a60:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001a64:	f00e f8d6 	bl	800fc14 <powf>
 8001a68:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	e019      	b.n	8001aaa <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8001a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7a:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a82:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8a:	eef0 0a67 	vmov.f32	s1, s15
 8001a8e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001a92:	f00e f8bf 	bl	800fc14 <powf>
 8001a96:	eef0 7a40 	vmov.f32	s15, s0
 8001a9a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
}
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8001ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad6:	f00e f8f5 	bl	800fcc4 <sqrtf>
 8001ada:	eef0 7a40 	vmov.f32	s15, s0
 8001ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0a01 	vstr	s0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8001afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b06:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	f00e f881 	bl	800fc14 <powf>
 8001b12:	eef0 7a40 	vmov.f32	s15, s0
 8001b16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b22:	f00e f8cf 	bl	800fcc4 <sqrtf>
 8001b26:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (t < 0.5f)
 8001b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b42:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	d51e      	bpl.n	8001b8e <EaseInOutCirc+0x5a>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8001b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b58:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b60:	f00e f858 	bl	800fc14 <powf>
 8001b64:	eef0 7a40 	vmov.f32	s15, s0
 8001b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b70:	eeb0 0a67 	vmov.f32	s0, s15
 8001b74:	f00e f8a6 	bl	800fcc4 <sqrtf>
 8001b78:	eef0 7a40 	vmov.f32	s15, s0
 8001b7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8c:	e023      	b.n	8001bd6 <EaseInOutCirc+0xa2>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8001b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b92:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	f00e f833 	bl	800fc14 <powf>
 8001bae:	eef0 7a40 	vmov.f32	s15, s0
 8001bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	f00e f881 	bl	800fcc4 <sqrtf>
 8001bc2:	eef0 7a40 	vmov.f32	s15, s0
 8001bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
}
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	ed2d 8b02 	vpush	{d8}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	ed87 0a01 	vstr	s0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <EaseInElastic+0xa0>)
 8001bf0:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	d102      	bne.n	8001c06 <EaseInElastic+0x26>
        return 0;
 8001c00:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8001c84 <EaseInElastic+0xa4>
 8001c04:	e035      	b.n	8001c72 <EaseInElastic+0x92>
    if (t == 1)
 8001c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c0e:	eef4 7a47 	vcmp.f32	s15, s14
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	d102      	bne.n	8001c1e <EaseInElastic+0x3e>
        return 1;
 8001c18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001c1c:	e029      	b.n	8001c72 <EaseInElastic+0x92>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c22:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c32:	eef0 0a67 	vmov.f32	s1, s15
 8001c36:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001c3a:	f00d ffeb 	bl	800fc14 <powf>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	eeb1 8a67 	vneg.f32	s16, s15
 8001c46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c52:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001c88 <EaseInElastic+0xa8>
 8001c56:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f00e f88f 	bl	800fd88 <sinf>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	ecbd 8b02 	vpop	{d8}
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40060a8b 	.word	0x40060a8b
 8001c84:	00000000 	.word	0x00000000
 8001c88:	412c0000 	.word	0x412c0000

08001c8c <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	ed2d 8b02 	vpush	{d8}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	ed87 0a01 	vstr	s0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <EaseOutElastic+0x9c>)
 8001c9c:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d102      	bne.n	8001cb2 <EaseOutElastic+0x26>
        return 0;
 8001cac:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8001d2c <EaseOutElastic+0xa0>
 8001cb0:	e033      	b.n	8001d1a <EaseOutElastic+0x8e>
    if (t == 1)
 8001cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cba:	eef4 7a47 	vcmp.f32	s15, s14
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d102      	bne.n	8001cca <EaseOutElastic+0x3e>
        return 1;
 8001cc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001cc8:	e027      	b.n	8001d1a <EaseOutElastic+0x8e>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd6:	eef0 0a67 	vmov.f32	s1, s15
 8001cda:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001cde:	f00d ff99 	bl	800fc14 <powf>
 8001ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8001ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf2:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001cf6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	f00e f83f 	bl	800fd88 <sinf>
 8001d0a:	eef0 7a40 	vmov.f32	s15, s0
 8001d0e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d16:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	ecbd 8b02 	vpop	{d8}
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40060a8b 	.word	0x40060a8b
 8001d2c:	00000000 	.word	0x00000000

08001d30 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	ed2d 8b02 	vpush	{d8}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a01 	vstr	s0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <EaseInOutElastic+0x11c>)
 8001d40:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d102      	bne.n	8001d56 <EaseInOutElastic+0x26>
        return 0;
 8001d50:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8001e50 <EaseInOutElastic+0x120>
 8001d54:	e073      	b.n	8001e3e <EaseInOutElastic+0x10e>
    if (t == 1)
 8001d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d5e:	eef4 7a47 	vcmp.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	d102      	bne.n	8001d6e <EaseInOutElastic+0x3e>
        return 1;
 8001d68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001d6c:	e067      	b.n	8001e3e <EaseInOutElastic+0x10e>
    if (t < 0.5f)
 8001d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d52e      	bpl.n	8001dde <EaseInOutElastic+0xae>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8001d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d84:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d94:	eef0 0a67 	vmov.f32	s1, s15
 8001d98:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001d9c:	f00d ff3a 	bl	800fc14 <powf>
 8001da0:	eeb0 8a40 	vmov.f32	s16, s0
 8001da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001e54 <EaseInOutElastic+0x124>
 8001db4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc4:	f00d ffe0 	bl	800fd88 <sinf>
 8001dc8:	eef0 7a40 	vmov.f32	s15, s0
 8001dcc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dd0:	eeb1 7a67 	vneg.f32	s14, s15
 8001dd4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ddc:	e02f      	b.n	8001e3e <EaseInOutElastic+0x10e>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8001dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de2:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001df2:	eef0 0a67 	vmov.f32	s1, s15
 8001df6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001dfa:	f00d ff0b 	bl	800fc14 <powf>
 8001dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8001e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e06:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001e54 <EaseInOutElastic+0x124>
 8001e12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	f00d ffb1 	bl	800fd88 <sinf>
 8001e26:	eef0 7a40 	vmov.f32	s15, s0
 8001e2a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001e2e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e3a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	ecbd 8b02 	vpop	{d8}
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	3fb2b8b9 	.word	0x3fb2b8b9
 8001e50:	00000000 	.word	0x00000000
 8001e54:	41320000 	.word	0x41320000

08001e58 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	ed87 0a01 	vstr	s0, [r7, #4]
    const float n1 = 7.5625f;
 8001e62:	4b46      	ldr	r3, [pc, #280]	@ (8001f7c <EaseOutBounce+0x124>)
 8001e64:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001e66:	4b46      	ldr	r3, [pc, #280]	@ (8001f80 <EaseOutBounce+0x128>)
 8001e68:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d50a      	bpl.n	8001e9a <EaseOutBounce+0x42>
    {
        return n1 * t * t;
 8001e84:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	e069      	b.n	8001f6e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001e9a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d51a      	bpl.n	8001eea <EaseOutBounce+0x92>
    {
        t -= 1.5f / d1;
 8001eb4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec8:	edc7 7a01 	vstr	s15, [r7, #4]
        return n1 * t * t + 0.75f;
 8001ecc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee0:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ee8:	e041      	b.n	8001f6e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8001eea:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 8001eee:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	d51a      	bpl.n	8001f3a <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8001f04:	eef0 6a02 	vmov.f32	s13, #2	@ 0x40100000  2.250
 8001f08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f10:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f18:	edc7 7a01 	vstr	s15, [r7, #4]
        return n1 * t * t + 0.9375f;
 8001f1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eeb6 7a0e 	vmov.f32	s14, #110	@ 0x3f700000  0.9375000
 8001f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f38:	e019      	b.n	8001f6e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8001f3a:	eef0 6a05 	vmov.f32	s13, #5	@ 0x40280000  2.625
 8001f3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4e:	edc7 7a01 	vstr	s15, [r7, #4]
        return n1 * t * t + 0.984375f;
 8001f52:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f66:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001f84 <EaseOutBounce+0x12c>
 8001f6a:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
}
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40f20000 	.word	0x40f20000
 8001f80:	40300000 	.word	0x40300000
 8001f84:	3f7c0000 	.word	0x3f7c0000

08001f88 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8001f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa2:	f7ff ff59 	bl	8001e58 <EaseOutBounce>
 8001fa6:	eef0 7a40 	vmov.f32	s15, s0
 8001faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fae:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (t < 0.5f)
 8001fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	d50e      	bpl.n	8001ff6 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8001fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe4:	f7ff ffd0 	bl	8001f88 <EaseInBounce>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
 8001fec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff4:	e015      	b.n	8002022 <EaseInOutBounce+0x66>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8001ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ffa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002006:	eeb0 0a67 	vmov.f32	s0, s15
 800200a:	f7ff ff25 	bl	8001e58 <EaseOutBounce>
 800200e:	eef0 7a40 	vmov.f32	s15, s0
 8002012:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800201e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002022:	eeb0 0a67 	vmov.f32	s0, s15
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	ed87 0a01 	vstr	s0, [r7, #4]
    const float c1 = 1.70158f;
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <EaseInBack+0x60>)
 8002038:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 800203a:	edd7 7a03 	vldr	s15, [r7, #12]
 800203e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002046:	edc7 7a02 	vstr	s15, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 800204a:	ed97 7a02 	vldr	s14, [r7, #8]
 800204e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002056:	edd7 7a01 	vldr	s15, [r7, #4]
 800205a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002066:	edd7 6a03 	vldr	s13, [r7, #12]
 800206a:	edd7 7a01 	vldr	s15, [r7, #4]
 800206e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002072:	edd7 7a01 	vldr	s15, [r7, #4]
 8002076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800207e:	eeb0 0a67 	vmov.f32	s0, s15
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	3fd9cd60 	.word	0x3fd9cd60

08002090 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	ed2d 8b02 	vpush	{d8}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a01 	vstr	s0, [r7, #4]
    const float c1 = 1.70158f;
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <EaseOutBack+0x84>)
 80020a0:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80020a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ae:	edc7 7a02 	vstr	s15, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 80020b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020be:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	f00d fda5 	bl	800fc14 <powf>
 80020ca:	eeb0 7a40 	vmov.f32	s14, s0
 80020ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020da:	ee37 8a87 	vadd.f32	s16, s15, s14
 80020de:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020ea:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80020ee:	eeb0 0a67 	vmov.f32	s0, s15
 80020f2:	f00d fd8f 	bl	800fc14 <powf>
 80020f6:	eeb0 7a40 	vmov.f32	s14, s0
 80020fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80020fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002102:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	ecbd 8b02 	vpop	{d8}
 8002112:	bd80      	pop	{r7, pc}
 8002114:	3fd9cd60 	.word	0x3fd9cd60

08002118 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	ed87 0a01 	vstr	s0, [r7, #4]
    const float c1 = 1.70158f;
 8002122:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <EaseInOutBack+0xdc>)
 8002124:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8002126:	edd7 7a03 	vldr	s15, [r7, #12]
 800212a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80021f8 <EaseInOutBack+0xe0>
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	edc7 7a02 	vstr	s15, [r7, #8]

    if (t < 0.5f)
 8002136:	edd7 7a01 	vldr	s15, [r7, #4]
 800213a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800213e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	d522      	bpl.n	800218e <EaseInOutBack+0x76>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8002148:	edd7 7a01 	vldr	s15, [r7, #4]
 800214c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002150:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	f00d fd5c 	bl	800fc14 <powf>
 800215c:	eef0 6a40 	vmov.f32	s13, s0
 8002160:	edd7 7a02 	vldr	s15, [r7, #8]
 8002164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002168:	ee77 7a87 	vadd.f32	s15, s15, s14
 800216c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002170:	edd7 7a01 	vldr	s15, [r7, #4]
 8002174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002178:	edd7 7a02 	vldr	s15, [r7, #8]
 800217c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002180:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8002184:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218c:	e02d      	b.n	80021ea <EaseInOutBack+0xd2>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 800218e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002192:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002196:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800219a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800219e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80021a2:	eeb0 0a67 	vmov.f32	s0, s15
 80021a6:	f00d fd35 	bl	800fc14 <powf>
 80021aa:	eef0 6a40 	vmov.f32	s13, s0
 80021ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80021be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80021c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80021ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021da:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80021e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
}
 80021ea:	eeb0 0a67 	vmov.f32	s0, s15
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	3fd9cd60 	.word	0x3fd9cd60
 80021f8:	3fc33333 	.word	0x3fc33333

080021fc <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8002206:	edd7 7a01 	vldr	s15, [r7, #4]
 800220a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002238 <EaseInSine+0x3c>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002216:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800221a:	eeb0 0a47 	vmov.f32	s0, s14
 800221e:	f00d fd6f 	bl	800fd00 <cosf>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
 8002226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800222a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40490fd0 	.word	0x40490fd0

0800223c <EaseOutSine>:

static float EaseOutSine(float t)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	ed87 0a01 	vstr	s0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8002246:	edd7 7a01 	vldr	s15, [r7, #4]
 800224a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002270 <EaseOutSine+0x34>
 800224e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002252:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002256:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800225a:	eeb0 0a47 	vmov.f32	s0, s14
 800225e:	f00d fd93 	bl	800fd88 <sinf>
 8002262:	eef0 7a40 	vmov.f32	s15, s0
}
 8002266:	eeb0 0a67 	vmov.f32	s0, s15
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40490fd0 	.word	0x40490fd0

08002274 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	ed87 0a01 	vstr	s0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 800227e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002282:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80022b8 <EaseInOutSine+0x44>
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	eeb0 0a67 	vmov.f32	s0, s15
 800228e:	f00d fd37 	bl	800fd00 <cosf>
 8002292:	eef0 7a40 	vmov.f32	s15, s0
 8002296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800229a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800229e:	eef1 7a67 	vneg.f32	s15, s15
 80022a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80022a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40490fd0 	.word	0x40490fd0

080022bc <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80022c6:	4603      	mov	r3, r0
 80022c8:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	2b18      	cmp	r3, #24
 80022ce:	f200 80e4 	bhi.w	800249a <GetEaseValue+0x1de>
 80022d2:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <GetEaseValue+0x1c>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	0800233d 	.word	0x0800233d
 80022dc:	0800234b 	.word	0x0800234b
 80022e0:	08002359 	.word	0x08002359
 80022e4:	08002367 	.word	0x08002367
 80022e8:	08002375 	.word	0x08002375
 80022ec:	08002383 	.word	0x08002383
 80022f0:	08002391 	.word	0x08002391
 80022f4:	0800239f 	.word	0x0800239f
 80022f8:	080023ad 	.word	0x080023ad
 80022fc:	080023bb 	.word	0x080023bb
 8002300:	080023c9 	.word	0x080023c9
 8002304:	080023d7 	.word	0x080023d7
 8002308:	080023e5 	.word	0x080023e5
 800230c:	080023f3 	.word	0x080023f3
 8002310:	08002401 	.word	0x08002401
 8002314:	0800240f 	.word	0x0800240f
 8002318:	0800241d 	.word	0x0800241d
 800231c:	0800242b 	.word	0x0800242b
 8002320:	08002439 	.word	0x08002439
 8002324:	08002447 	.word	0x08002447
 8002328:	08002455 	.word	0x08002455
 800232c:	08002463 	.word	0x08002463
 8002330:	08002471 	.word	0x08002471
 8002334:	0800247f 	.word	0x0800247f
 8002338:	0800248d 	.word	0x0800248d
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 800233c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002340:	f7ff fa35 	bl	80017ae <EaseLinear>
 8002344:	eef0 7a40 	vmov.f32	s15, s0
 8002348:	e0a9      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800234a:	ed97 0a01 	vldr	s0, [r7, #4]
 800234e:	f7ff fa3d 	bl	80017cc <EaseInQuad>
 8002352:	eef0 7a40 	vmov.f32	s15, s0
 8002356:	e0a2      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8002358:	ed97 0a01 	vldr	s0, [r7, #4]
 800235c:	f7ff fa46 	bl	80017ec <EaseOutQuad>
 8002360:	eef0 7a40 	vmov.f32	s15, s0
 8002364:	e09b      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8002366:	ed97 0a01 	vldr	s0, [r7, #4]
 800236a:	f7ff fa55 	bl	8001818 <EaseInOutQuad>
 800236e:	eef0 7a40 	vmov.f32	s15, s0
 8002372:	e094      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8002374:	ed97 0a01 	vldr	s0, [r7, #4]
 8002378:	f7ff fa7c 	bl	8001874 <EaseInCubic>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	e08d      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8002382:	ed97 0a01 	vldr	s0, [r7, #4]
 8002386:	f7ff fa89 	bl	800189c <EaseOutCubic>
 800238a:	eef0 7a40 	vmov.f32	s15, s0
 800238e:	e086      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8002390:	ed97 0a01 	vldr	s0, [r7, #4]
 8002394:	f7ff faa2 	bl	80018dc <EaseInOutCubic>
 8002398:	eef0 7a40 	vmov.f32	s15, s0
 800239c:	e07f      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 800239e:	ed97 0a01 	vldr	s0, [r7, #4]
 80023a2:	f7ff fadd 	bl	8001960 <EaseInExpo>
 80023a6:	eef0 7a40 	vmov.f32	s15, s0
 80023aa:	e078      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 80023ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80023b0:	f7ff fafe 	bl	80019b0 <EaseOutExpo>
 80023b4:	eef0 7a40 	vmov.f32	s15, s0
 80023b8:	e071      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 80023ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80023be:	f7ff fb1f 	bl	8001a00 <EaseInOutExpo>
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
 80023c6:	e06a      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 80023c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80023cc:	f7ff fb74 	bl	8001ab8 <EaseInCirc>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	e063      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 80023d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80023da:	f7ff fb89 	bl	8001af0 <EaseOutCirc>
 80023de:	eef0 7a40 	vmov.f32	s15, s0
 80023e2:	e05c      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80023e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80023e8:	f7ff fba4 	bl	8001b34 <EaseInOutCirc>
 80023ec:	eef0 7a40 	vmov.f32	s15, s0
 80023f0:	e055      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 80023f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80023f6:	f7ff fbf3 	bl	8001be0 <EaseInElastic>
 80023fa:	eef0 7a40 	vmov.f32	s15, s0
 80023fe:	e04e      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8002400:	ed97 0a01 	vldr	s0, [r7, #4]
 8002404:	f7ff fc42 	bl	8001c8c <EaseOutElastic>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	e047      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 800240e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002412:	f7ff fc8d 	bl	8001d30 <EaseInOutElastic>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	e040      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 800241c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002420:	f7ff fdb2 	bl	8001f88 <EaseInBounce>
 8002424:	eef0 7a40 	vmov.f32	s15, s0
 8002428:	e039      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 800242a:	ed97 0a01 	vldr	s0, [r7, #4]
 800242e:	f7ff fd13 	bl	8001e58 <EaseOutBounce>
 8002432:	eef0 7a40 	vmov.f32	s15, s0
 8002436:	e032      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8002438:	ed97 0a01 	vldr	s0, [r7, #4]
 800243c:	f7ff fdbe 	bl	8001fbc <EaseInOutBounce>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	e02b      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8002446:	ed97 0a01 	vldr	s0, [r7, #4]
 800244a:	f7ff fdef 	bl	800202c <EaseInBack>
 800244e:	eef0 7a40 	vmov.f32	s15, s0
 8002452:	e024      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8002454:	ed97 0a01 	vldr	s0, [r7, #4]
 8002458:	f7ff fe1a 	bl	8002090 <EaseOutBack>
 800245c:	eef0 7a40 	vmov.f32	s15, s0
 8002460:	e01d      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8002462:	ed97 0a01 	vldr	s0, [r7, #4]
 8002466:	f7ff fe57 	bl	8002118 <EaseInOutBack>
 800246a:	eef0 7a40 	vmov.f32	s15, s0
 800246e:	e016      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8002470:	ed97 0a01 	vldr	s0, [r7, #4]
 8002474:	f7ff fec2 	bl	80021fc <EaseInSine>
 8002478:	eef0 7a40 	vmov.f32	s15, s0
 800247c:	e00f      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 800247e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002482:	f7ff fedb 	bl	800223c <EaseOutSine>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	e008      	b.n	800249e <GetEaseValue+0x1e2>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 800248c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002490:	f7ff fef0 	bl	8002274 <EaseInOutSine>
 8002494:	eef0 7a40 	vmov.f32	s15, s0
 8002498:	e001      	b.n	800249e <GetEaseValue+0x1e2>
    default:
        return progress;
 800249a:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 800249e:	eeb0 0a67 	vmov.f32	s0, s15
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <OLED_UpdateAnimation>:
    anim->easeType = easeType;
}

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7d1b      	ldrb	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <OLED_UpdateAnimation+0x16>
        return 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e04a      	b.n	8002554 <OLED_UpdateAnimation+0xac>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d20a      	bcs.n	80024e8 <OLED_UpdateAnimation+0x40>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	edd3 7a03 	vldr	s15, [r3, #12]
 80024de:	eeb4 7a67 	vcmp.f32	s14, s15
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	d108      	bne.n	80024fa <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	751a      	strb	r2, [r3, #20]
        return 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e02c      	b.n	8002554 <OLED_UpdateAnimation+0xac>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002514:	edc7 7a04 	vstr	s15, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7d5b      	ldrb	r3, [r3, #21]
 800251c:	4618      	mov	r0, r3
 800251e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002522:	f7ff fecb 	bl	80022bc <GetEaseValue>
 8002526:	ed87 0a03 	vstr	s0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	edd3 6a03 	vldr	s13, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	edd3 7a02 	vldr	s15, [r3, #8]
 800253c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002540:	edd7 7a03 	vldr	s15, [r7, #12]
 8002544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	edc3 7a04 	vstr	s15, [r3, #16]

    return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	ee07 3a90 	vmov	s15, r3
}
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <OLED_UpdateAnimationManager>:
    anim->isActive = 1;
}

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8002582:	f000 ff4b 	bl	800341c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
 800258c:	e03e      	b.n	800260c <OLED_UpdateAnimationManager+0x92>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	224c      	movs	r2, #76	@ 0x4c
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02e      	beq.n	8002604 <OLED_UpdateAnimationManager+0x8a>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3310      	adds	r3, #16
 80025aa:	6939      	ldr	r1, [r7, #16]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff7b 	bl	80024a8 <OLED_UpdateAnimation>
 80025b2:	4603      	mov	r3, r0
 80025b4:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3328      	adds	r3, #40	@ 0x28
 80025ba:	6939      	ldr	r1, [r7, #16]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff73 	bl	80024a8 <OLED_UpdateAnimation>
 80025c2:	4603      	mov	r3, r0
 80025c4:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3310      	adds	r3, #16
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffc6 	bl	800255c <OLED_GetAnimationValue>
 80025d0:	eef0 7a40 	vmov.f32	s15, s0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3328      	adds	r3, #40	@ 0x28
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ffbc 	bl	800255c <OLED_GetAnimationValue>
 80025e4:	eef0 7a40 	vmov.f32	s15, s0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 80025ee:	7afb      	ldrb	r3, [r7, #11]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d108      	bne.n	8002606 <OLED_UpdateAnimationManager+0x8c>
 80025f4:	7abb      	ldrb	r3, [r7, #10]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <OLED_UpdateAnimationManager+0x8c>
            anim->isActive = 0;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002602:	e000      	b.n	8002606 <OLED_UpdateAnimationManager+0x8c>
            continue;
 8002604:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	3301      	adds	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002612:	7dfa      	ldrb	r2, [r7, #23]
 8002614:	429a      	cmp	r2, r3
 8002616:	d3ba      	bcc.n	800258e <OLED_UpdateAnimationManager+0x14>
    }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <OLED_DisplayUI>:
    OLED_InitAnimationManager(&g_Title_AnimationManager);
    OLED_InitAnimationManager(&g_AnimationManager);
}

void OLED_DisplayUI(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
    OLED_ClearBuffer(); // 清除OLED缓冲区
 800262e:	f7fe ff33 	bl	8001498 <OLED_ClearBuffer>

    if (settings->keyboard_mode == 1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7a9b      	ldrb	r3, [r3, #10]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d002      	beq.n	8002640 <OLED_DisplayUI+0x1c>
    {
        // 画个好看的UI和ICON就可
    }
    else if (settings->keyboard_mode == 2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7a9b      	ldrb	r3, [r3, #10]
 800263e:	2b02      	cmp	r3, #2
    {
        // 画个调整阈值的UI
    }
    

    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新动画管理器
 8002640:	4807      	ldr	r0, [pc, #28]	@ (8002660 <OLED_DisplayUI+0x3c>)
 8002642:	f7ff ff9a 	bl	800257a <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8002646:	4807      	ldr	r0, [pc, #28]	@ (8002664 <OLED_DisplayUI+0x40>)
 8002648:	f7ff ff97 	bl	800257a <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新全局动画管理器
 800264c:	4806      	ldr	r0, [pc, #24]	@ (8002668 <OLED_DisplayUI+0x44>)
 800264e:	f7ff ff94 	bl	800257a <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 使用智能更新模式
 8002652:	f000 f885 	bl	8002760 <OLED_SmartUpdate>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000c4c 	.word	0x20000c4c
 8002664:	20001240 	.word	0x20001240
 8002668:	20001834 	.word	0x20001834

0800266c <CPS_Counter>:

void CPS_Counter(void)
{
 800266c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002670:	af00      	add	r7, sp, #0
    static uint64_t last_counter = 0;

    if (msg_counter - last_counter >= 50) // 每50ms计算一次CPS
 8002672:	4c21      	ldr	r4, [pc, #132]	@ (80026f8 <CPS_Counter+0x8c>)
 8002674:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8002678:	4c20      	ldr	r4, [pc, #128]	@ (80026fc <CPS_Counter+0x90>)
 800267a:	e9d4 4500 	ldrd	r4, r5, [r4]
 800267e:	ebba 0204 	subs.w	r2, sl, r4
 8002682:	eb6b 0305 	sbc.w	r3, fp, r5
 8002686:	2a32      	cmp	r2, #50	@ 0x32
 8002688:	f173 0300 	sbcs.w	r3, r3, #0
 800268c:	d32e      	bcc.n	80026ec <CPS_Counter+0x80>
    {
        cps = (msg_counter - last_counter) * 20;
 800268e:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <CPS_Counter+0x8c>)
 8002690:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <CPS_Counter+0x90>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	ebb4 0802 	subs.w	r8, r4, r2
 800269e:	eb65 0903 	sbc.w	r9, r5, r3
 80026a2:	4642      	mov	r2, r8
 80026a4:	464b      	mov	r3, r9
 80026a6:	f04f 0400 	mov.w	r4, #0
 80026aa:	f04f 0500 	mov.w	r5, #0
 80026ae:	009d      	lsls	r5, r3, #2
 80026b0:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80026b4:	0094      	lsls	r4, r2, #2
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	eb12 0008 	adds.w	r0, r2, r8
 80026be:	eb43 0109 	adc.w	r1, r3, r9
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	008b      	lsls	r3, r1, #2
 80026cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026d0:	0082      	lsls	r2, r0, #2
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4909      	ldr	r1, [pc, #36]	@ (8002700 <CPS_Counter+0x94>)
 80026dc:	e9c1 2300 	strd	r2, r3, [r1]
        last_counter = msg_counter;
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <CPS_Counter+0x8c>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	4905      	ldr	r1, [pc, #20]	@ (80026fc <CPS_Counter+0x90>)
 80026e8:	e9c1 2300 	strd	r2, r3, [r1]
    }
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20001e30 	.word	0x20001e30
 80026fc:	20001e38 	.word	0x20001e38
 8002700:	20001e28 	.word	0x20001e28

08002704 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 800270e:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <OLED_EnableDiffMode+0x30>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	7013      	strb	r3, [r2, #0]
    if (enable)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800271a:	4a07      	ldr	r2, [pc, #28]	@ (8002738 <OLED_EnableDiffMode+0x34>)
 800271c:	4b07      	ldr	r3, [pc, #28]	@ (800273c <OLED_EnableDiffMode+0x38>)
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002726:	461a      	mov	r2, r3
 8002728:	f00c fc49 	bl	800efbe <memcpy>
    }
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20002240 	.word	0x20002240
 8002738:	20001e40 	.word	0x20001e40
 800273c:	20000448 	.word	0x20000448

08002740 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800274a:	4a04      	ldr	r2, [pc, #16]	@ (800275c <OLED_EnableFastUpdate+0x1c>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	7013      	strb	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	20000000 	.word	0x20000000

08002760 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 8002766:	f7fe feb7 	bl	80014d8 <OLED_IsBusy>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 8082 	bne.w	8002876 <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 8002776:	23ff      	movs	r3, #255	@ 0xff
 8002778:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 800277e:	4b40      	ldr	r3, [pc, #256]	@ (8002880 <OLED_SmartUpdate+0x120>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d046      	beq.n	8002814 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8002786:	2300      	movs	r3, #0
 8002788:	733b      	strb	r3, [r7, #12]
 800278a:	e03f      	b.n	800280c <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8002790:	7b3b      	ldrb	r3, [r7, #12]
 8002792:	b29b      	uxth	r3, r3
 8002794:	01db      	lsls	r3, r3, #7
 8002796:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	813b      	strh	r3, [r7, #8]
 800279c:	e015      	b.n	80027ca <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 800279e:	88ba      	ldrh	r2, [r7, #4]
 80027a0:	893b      	ldrh	r3, [r7, #8]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a37      	ldr	r2, [pc, #220]	@ (8002884 <OLED_SmartUpdate+0x124>)
 80027a6:	5cd2      	ldrb	r2, [r2, r3]
 80027a8:	88b9      	ldrh	r1, [r7, #4]
 80027aa:	893b      	ldrh	r3, [r7, #8]
 80027ac:	440b      	add	r3, r1
 80027ae:	4936      	ldr	r1, [pc, #216]	@ (8002888 <OLED_SmartUpdate+0x128>)
 80027b0:	5ccb      	ldrb	r3, [r1, r3]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d006      	beq.n	80027c4 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 80027ba:	7b3b      	ldrb	r3, [r7, #12]
 80027bc:	4a33      	ldr	r2, [pc, #204]	@ (800288c <OLED_SmartUpdate+0x12c>)
 80027be:	2101      	movs	r1, #1
 80027c0:	54d1      	strb	r1, [r2, r3]
                    break;
 80027c2:	e005      	b.n	80027d0 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	3301      	adds	r3, #1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	893b      	ldrh	r3, [r7, #8]
 80027cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80027ce:	d9e6      	bls.n	800279e <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 80027da:	7b3a      	ldrb	r2, [r7, #12]
 80027dc:	7bbb      	ldrb	r3, [r7, #14]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d201      	bcs.n	80027e6 <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80027e6:	7b3a      	ldrb	r2, [r7, #12]
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d901      	bls.n	80027f2 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80027f2:	88bb      	ldrh	r3, [r7, #4]
 80027f4:	4a24      	ldr	r2, [pc, #144]	@ (8002888 <OLED_SmartUpdate+0x128>)
 80027f6:	1898      	adds	r0, r3, r2
 80027f8:	88bb      	ldrh	r3, [r7, #4]
 80027fa:	4a22      	ldr	r2, [pc, #136]	@ (8002884 <OLED_SmartUpdate+0x124>)
 80027fc:	4413      	add	r3, r2
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	4619      	mov	r1, r3
 8002802:	f00c fbdc 	bl	800efbe <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8002806:	7b3b      	ldrb	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	733b      	strb	r3, [r7, #12]
 800280c:	7b3b      	ldrb	r3, [r7, #12]
 800280e:	2b07      	cmp	r3, #7
 8002810:	d9bc      	bls.n	800278c <OLED_SmartUpdate+0x2c>
 8002812:	e01c      	b.n	800284e <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	e016      	b.n	8002848 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <OLED_SmartUpdate+0x12c>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 800282a:	79fa      	ldrb	r2, [r7, #7]
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	429a      	cmp	r2, r3
 8002830:	d201      	bcs.n	8002836 <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8002836:	79fa      	ldrb	r2, [r7, #7]
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	429a      	cmp	r2, r3
 800283c:	d901      	bls.n	8002842 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	3301      	adds	r3, #1
 8002846:	71fb      	strb	r3, [r7, #7]
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	2b07      	cmp	r3, #7
 800284c:	d9e5      	bls.n	800281a <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <OLED_SmartUpdate+0x10a>
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <OLED_SmartUpdate+0x130>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 800285c:	7b7a      	ldrb	r2, [r7, #13]
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe feb8 	bl	80015d8 <OLED_UpdateDisplayPartial>
 8002868:	e006      	b.n	8002878 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8002870:	f7fe fe5a 	bl	8001528 <OLED_UpdateDisplayVSync>
 8002874:	e000      	b.n	8002878 <OLED_SmartUpdate+0x118>
        return;
 8002876:	bf00      	nop
    }
}
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20002240 	.word	0x20002240
 8002884:	20000448 	.word	0x20000448
 8002888:	20001e40 	.word	0x20001e40
 800288c:	20000440 	.word	0x20000440
 8002890:	20000000 	.word	0x20000000

08002894 <RGB_Init>:
#define PWM_BUFFER_LEN (NUM_LEDS * 24 + RESET_PULSE_LEN) // GRB order, both need 24 bits
static uint8_t led_colors[NUM_LEDS][3];
static uint16_t pwm_buffer[PWM_BUFFER_LEN];

void RGB_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    RGB_Clear();
 8002898:	f000 f838 	bl	800290c <RGB_Clear>
    RGB_Update();
 800289c:	f000 f84e 	bl	800293c <RGB_Update>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <RGB_SetColor>:

// RGB范围是0-255
// led_index: 0-3
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 80028a4:	b490      	push	{r4, r7}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	71fb      	strb	r3, [r7, #7]
 80028b6:	4603      	mov	r3, r0
 80028b8:	71bb      	strb	r3, [r7, #6]
 80028ba:	460b      	mov	r3, r1
 80028bc:	717b      	strb	r3, [r7, #5]
 80028be:	4613      	mov	r3, r2
 80028c0:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d819      	bhi.n	80028fc <RGB_SetColor+0x58>
    {
        led_colors[led_index][0] = red;
 80028c8:	79fa      	ldrb	r2, [r7, #7]
 80028ca:	490f      	ldr	r1, [pc, #60]	@ (8002908 <RGB_SetColor+0x64>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	79ba      	ldrb	r2, [r7, #6]
 80028d6:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][1] = green;
 80028d8:	79fa      	ldrb	r2, [r7, #7]
 80028da:	490b      	ldr	r1, [pc, #44]	@ (8002908 <RGB_SetColor+0x64>)
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	3301      	adds	r3, #1
 80028e6:	797a      	ldrb	r2, [r7, #5]
 80028e8:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][2] = blue;
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	4906      	ldr	r1, [pc, #24]	@ (8002908 <RGB_SetColor+0x64>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	3302      	adds	r3, #2
 80028f8:	793a      	ldrb	r2, [r7, #4]
 80028fa:	701a      	strb	r2, [r3, #0]
    }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bc90      	pop	{r4, r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20002244 	.word	0x20002244

0800290c <RGB_Clear>:

void RGB_Clear(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e009      	b.n	800292c <RGB_Clear+0x20>
    {
        RGB_SetColor(i, 0, 0, 0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	b2d8      	uxtb	r0, r3
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	f7ff ffbf 	bl	80028a4 <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b03      	cmp	r3, #3
 8002930:	ddf2      	ble.n	8002918 <RGB_Clear+0xc>
    }
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <RGB_Update>:

//! setColor之后请直接调用这个来更新LED颜色
void RGB_Update(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e067      	b.n	8002a1c <RGB_Update+0xe0>
    {
        // Green
        for (int j = 7; j >= 0; j--)
 800294c:	2307      	movs	r3, #7
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e01b      	b.n	800298a <RGB_Update+0x4e>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][1] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8002952:	4941      	ldr	r1, [pc, #260]	@ (8002a58 <RGB_Update+0x11c>)
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	440b      	add	r3, r1
 800295e:	3301      	adds	r3, #1
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	fa42 f303 	asr.w	r3, r2, r3
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <RGB_Update+0x3a>
 8002972:	2188      	movs	r1, #136	@ 0x88
 8002974:	e000      	b.n	8002978 <RGB_Update+0x3c>
 8002976:	2144      	movs	r1, #68	@ 0x44
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	617a      	str	r2, [r7, #20]
 800297e:	4a37      	ldr	r2, [pc, #220]	@ (8002a5c <RGB_Update+0x120>)
 8002980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3b01      	subs	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	dae0      	bge.n	8002952 <RGB_Update+0x16>
        }
        // Red
        for (int j = 7; j >= 0; j--)
 8002990:	2307      	movs	r3, #7
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e01a      	b.n	80029cc <RGB_Update+0x90>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][0] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8002996:	4930      	ldr	r1, [pc, #192]	@ (8002a58 <RGB_Update+0x11c>)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	fa42 f303 	asr.w	r3, r2, r3
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <RGB_Update+0x7c>
 80029b4:	2188      	movs	r1, #136	@ 0x88
 80029b6:	e000      	b.n	80029ba <RGB_Update+0x7e>
 80029b8:	2144      	movs	r1, #68	@ 0x44
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	617a      	str	r2, [r7, #20]
 80029c0:	4a26      	ldr	r2, [pc, #152]	@ (8002a5c <RGB_Update+0x120>)
 80029c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dae1      	bge.n	8002996 <RGB_Update+0x5a>
        }
        // Blue
        for (int j = 7; j >= 0; j--)
 80029d2:	2307      	movs	r3, #7
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	e01b      	b.n	8002a10 <RGB_Update+0xd4>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][2] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 80029d8:	491f      	ldr	r1, [pc, #124]	@ (8002a58 <RGB_Update+0x11c>)
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	3302      	adds	r3, #2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fa42 f303 	asr.w	r3, r2, r3
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <RGB_Update+0xc0>
 80029f8:	2188      	movs	r1, #136	@ 0x88
 80029fa:	e000      	b.n	80029fe <RGB_Update+0xc2>
 80029fc:	2144      	movs	r1, #68	@ 0x44
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	617a      	str	r2, [r7, #20]
 8002a04:	4a15      	ldr	r2, [pc, #84]	@ (8002a5c <RGB_Update+0x120>)
 8002a06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dae0      	bge.n	80029d8 <RGB_Update+0x9c>
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	dd94      	ble.n	800294c <RGB_Update+0x10>
        }
    }

    // Reset pulse
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	e009      	b.n	8002a3c <RGB_Update+0x100>
    {
        pwm_buffer[buffer_index++] = 0;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	617a      	str	r2, [r7, #20]
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a5c <RGB_Update+0x120>)
 8002a30:	2100      	movs	r1, #0
 8002a32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b29      	cmp	r3, #41	@ 0x29
 8002a40:	ddf2      	ble.n	8002a28 <RGB_Update+0xec>
    }

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwm_buffer, PWM_BUFFER_LEN);
 8002a42:	238a      	movs	r3, #138	@ 0x8a
 8002a44:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <RGB_Update+0x120>)
 8002a46:	2100      	movs	r1, #0
 8002a48:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <RGB_Update+0x124>)
 8002a4a:	f006 f905 	bl	8008c58 <HAL_TIM_PWM_Start_DMA>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20002244 	.word	0x20002244
 8002a5c:	20002250 	.word	0x20002250
 8002a60:	2000236c 	.word	0x2000236c

08002a64 <Hue_To_RGB>:

// --- Helper function for rainbow effect ---
// Converts a hue value (0-255) to an RGB color.
static void Hue_To_RGB(uint8_t hue, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]
    if (hue < 85)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b54      	cmp	r3, #84	@ 0x54
 8002a78:	d814      	bhi.n	8002aa4 <Hue_To_RGB+0x40>
    { // Red -> Green
        *r = (85 - hue) * 3;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	0052      	lsls	r2, r2, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	701a      	strb	r2, [r3, #0]
        *g = hue * 3;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	461a      	mov	r2, r3
 8002a92:	0052      	lsls	r2, r2, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
        hue -= 170;
        *r = hue * 3;
        *g = 0;
        *b = (85 - hue) * 3;
    }
}
 8002aa2:	e031      	b.n	8002b08 <Hue_To_RGB+0xa4>
    else if (hue < 170)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2ba9      	cmp	r3, #169	@ 0xa9
 8002aa8:	d817      	bhi.n	8002ada <Hue_To_RGB+0x76>
        hue -= 85;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3b55      	subs	r3, #85	@ 0x55
 8002aae:	73fb      	strb	r3, [r7, #15]
        *r = 0;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
        *g = (85 - hue) * 3;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	0052      	lsls	r2, r2, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	701a      	strb	r2, [r3, #0]
        *b = hue * 3;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	461a      	mov	r2, r3
 8002ace:	0052      	lsls	r2, r2, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]
}
 8002ad8:	e016      	b.n	8002b08 <Hue_To_RGB+0xa4>
        hue -= 170;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3356      	adds	r3, #86	@ 0x56
 8002ade:	73fb      	strb	r3, [r7, #15]
        *r = hue * 3;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	0052      	lsls	r2, r2, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
        *b = (85 - hue) * 3;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	0052      	lsls	r2, r2, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	701a      	strb	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <RGB_RainbowCycle>:

static uint16_t rainbow_hue = 0;

void RGB_RainbowCycle(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
    uint8_t r, g, b;
    for (int i = 0; i < NUM_LEDS; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e018      	b.n	8002b52 <RGB_RainbowCycle+0x3e>
    {
        // Calculate the hue for each LED, offset by its position to create the rainbow.
        uint8_t hue = (rainbow_hue + (i * 256 / NUM_LEDS)) & 0xFF;
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <RGB_RainbowCycle+0x6c>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	70fb      	strb	r3, [r7, #3]
        Hue_To_RGB(hue, &r, &g, &b);
 8002b32:	463b      	mov	r3, r7
 8002b34:	1c7a      	adds	r2, r7, #1
 8002b36:	1cb9      	adds	r1, r7, #2
 8002b38:	78f8      	ldrb	r0, [r7, #3]
 8002b3a:	f7ff ff93 	bl	8002a64 <Hue_To_RGB>
        RGB_SetColor(i, r, g, b);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	b2d8      	uxtb	r0, r3
 8002b42:	78b9      	ldrb	r1, [r7, #2]
 8002b44:	787a      	ldrb	r2, [r7, #1]
 8002b46:	783b      	ldrb	r3, [r7, #0]
 8002b48:	f7ff feac 	bl	80028a4 <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	dde3      	ble.n	8002b20 <RGB_RainbowCycle+0xc>
    }
    RGB_Update();
 8002b58:	f7ff fef0 	bl	800293c <RGB_Update>

    // Increment the hue for the next cycle to make the rainbow move.
    rainbow_hue++;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <RGB_RainbowCycle+0x6c>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <RGB_RainbowCycle+0x6c>)
 8002b66:	801a      	strh	r2, [r3, #0]
    if (rainbow_hue >= 256)
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <RGB_RainbowCycle+0x6c>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2bff      	cmp	r3, #255	@ 0xff
 8002b6e:	d902      	bls.n	8002b76 <RGB_RainbowCycle+0x62>
    {
        rainbow_hue = 0;
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <RGB_RainbowCycle+0x6c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
    }
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20002364 	.word	0x20002364

08002b84 <HAL_TIM_PWM_PulseFinishedCallback>:

// 自动回调函数停止DMA
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d103      	bne.n	8002b9e <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8002b96:	2100      	movs	r1, #0
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f006 fa75 	bl	8009088 <HAL_TIM_PWM_Stop_DMA>
    }
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40000400 	.word	0x40000400

08002bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <HAL_MspInit+0x44>)
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <HAL_MspInit+0x44>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <HAL_MspInit+0x44>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_MspInit+0x44>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	4a08      	ldr	r2, [pc, #32]	@ (8002bf0 <HAL_MspInit+0x44>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_MspInit+0x44>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002be2:	f005 f853 	bl	8007c8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4a:	f000 fbd5 	bl	80033f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <DMA1_Channel1_IRQHandler+0x10>)
 8002c5a:	f002 faf5 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200002bc 	.word	0x200002bc

08002c68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <DMA1_Channel2_IRQHandler+0x10>)
 8002c6e:	f002 faeb 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000031c 	.word	0x2000031c

08002c7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <DMA1_Channel3_IRQHandler+0x10>)
 8002c82:	f002 fae1 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20002450 	.word	0x20002450

08002c90 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <USB_LP_IRQHandler+0x10>)
 8002c96:	f003 fb4f 	bl	8006338 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20002a1c 	.word	0x20002a1c

08002ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ca8:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <TIM6_DAC_IRQHandler+0x10>)
 8002caa:	f006 fae5 	bl	8009278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200023b8 	.word	0x200023b8

08002cb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <TIM7_IRQHandler+0x10>)
 8002cbe:	f006 fadb 	bl	8009278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20002404 	.word	0x20002404

08002ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return 1;
 8002cd0:	2301      	movs	r3, #1
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_kill>:

int _kill(int pid, int sig)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ce6:	f00c f93d 	bl	800ef64 <__errno>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2216      	movs	r2, #22
 8002cee:	601a      	str	r2, [r3, #0]
  return -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_exit>:

void _exit (int status)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ffe7 	bl	8002cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <_exit+0x12>

08002d12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e00a      	b.n	8002d3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d24:	f3af 8000 	nop.w
 8002d28:	4601      	mov	r1, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	60ba      	str	r2, [r7, #8]
 8002d30:	b2ca      	uxtb	r2, r1
 8002d32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dbf0      	blt.n	8002d24 <_read+0x12>
  }

  return len;
 8002d42:	687b      	ldr	r3, [r7, #4]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e009      	b.n	8002d72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	60ba      	str	r2, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbf1      	blt.n	8002d5e <_write+0x12>
  }
  return len;
 8002d7a:	687b      	ldr	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_close>:

int _close(int file)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dac:	605a      	str	r2, [r3, #4]
  return 0;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_isatty>:

int _isatty(int file)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc4:	2301      	movs	r3, #1
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	@ (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f00c f8a2 	bl	800ef64 <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a05      	ldr	r2, [pc, #20]	@ (8002e50 <_sbrk+0x64>)
 8002e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20008000 	.word	0x20008000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	20002368 	.word	0x20002368
 8002e54:	20002e58 	.word	0x20002e58

08002e58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <SystemInit+0x20>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e62:	4a05      	ldr	r2, [pc, #20]	@ (8002e78 <SystemInit+0x20>)
 8002e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	@ 0x38
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	615a      	str	r2, [r3, #20]
 8002eac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eae:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <MX_TIM3_Init+0xe8>)
 8002eb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002ec2:	22d4      	movs	r2, #212	@ 0xd4
 8002ec4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec6:	4b26      	ldr	r3, [pc, #152]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ed2:	4823      	ldr	r0, [pc, #140]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002ed4:	f005 fe08 	bl	8008ae8 <HAL_TIM_Base_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ede:	f7fe faa0 	bl	8001422 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ee8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eec:	4619      	mov	r1, r3
 8002eee:	481c      	ldr	r0, [pc, #112]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002ef0:	f006 fc26 	bl	8009740 <HAL_TIM_ConfigClockSource>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002efa:	f7fe fa92 	bl	8001422 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002efe:	4818      	ldr	r0, [pc, #96]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002f00:	f005 fe49 	bl	8008b96 <HAL_TIM_PWM_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f0a:	f7fe fa8a 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4810      	ldr	r0, [pc, #64]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002f1e:	f007 fa61 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f28:	f7fe fa7b 	bl	8001422 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f2c:	2360      	movs	r3, #96	@ 0x60
 8002f2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4619      	mov	r1, r3
 8002f42:	4807      	ldr	r0, [pc, #28]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002f44:	f006 fae8 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f4e:	f7fe fa68 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f52:	4803      	ldr	r0, [pc, #12]	@ (8002f60 <MX_TIM3_Init+0xe4>)
 8002f54:	f000 f8f8 	bl	8003148 <HAL_TIM_MspPostInit>

}
 8002f58:	bf00      	nop
 8002f5a:	3738      	adds	r7, #56	@ 0x38
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2000236c 	.word	0x2000236c
 8002f64:	40000400 	.word	0x40000400

08002f68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f78:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002f7a:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <MX_TIM6_Init+0x68>)
 8002f7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002f7e:	4b13      	ldr	r3, [pc, #76]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f96:	480d      	ldr	r0, [pc, #52]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002f98:	f005 fda6 	bl	8008ae8 <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fa2:	f7fe fa3e 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4806      	ldr	r0, [pc, #24]	@ (8002fcc <MX_TIM6_Init+0x64>)
 8002fb4:	f007 fa16 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002fbe:	f7fe fa30 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200023b8 	.word	0x200023b8
 8002fd0:	40001000 	.word	0x40001000

08002fd4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <MX_TIM7_Init+0x64>)
 8002fe6:	4a15      	ldr	r2, [pc, #84]	@ (800303c <MX_TIM7_Init+0x68>)
 8002fe8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <MX_TIM7_Init+0x64>)
 8002fec:	22a9      	movs	r2, #169	@ 0xa9
 8002fee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <MX_TIM7_Init+0x64>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <MX_TIM7_Init+0x64>)
 8002ff8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002ffc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <MX_TIM7_Init+0x64>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003004:	480c      	ldr	r0, [pc, #48]	@ (8003038 <MX_TIM7_Init+0x64>)
 8003006:	f005 fd6f 	bl	8008ae8 <HAL_TIM_Base_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003010:	f7fe fa07 	bl	8001422 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4805      	ldr	r0, [pc, #20]	@ (8003038 <MX_TIM7_Init+0x64>)
 8003022:	f007 f9df 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800302c:	f7fe f9f9 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20002404 	.word	0x20002404
 800303c:	40001400 	.word	0x40001400

08003040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a38      	ldr	r2, [pc, #224]	@ (8003130 <HAL_TIM_Base_MspInit+0xf0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d137      	bne.n	80030c2 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003052:	4b38      	ldr	r3, [pc, #224]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	4a37      	ldr	r2, [pc, #220]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	6593      	str	r3, [r2, #88]	@ 0x58
 800305e:	4b35      	ldr	r3, [pc, #212]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 800306a:	4b33      	ldr	r3, [pc, #204]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 800306c:	4a33      	ldr	r2, [pc, #204]	@ (800313c <HAL_TIM_Base_MspInit+0xfc>)
 800306e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003070:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 8003072:	223d      	movs	r2, #61	@ 0x3d
 8003074:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003076:	4b30      	ldr	r3, [pc, #192]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 8003078:	2210      	movs	r2, #16
 800307a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800307c:	4b2e      	ldr	r3, [pc, #184]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003082:	4b2d      	ldr	r3, [pc, #180]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003088:	4b2b      	ldr	r3, [pc, #172]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 800308a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800308e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003090:	4b29      	ldr	r3, [pc, #164]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 8003092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003096:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003098:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800309e:	4b26      	ldr	r3, [pc, #152]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80030a4:	4824      	ldr	r0, [pc, #144]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 80030a6:	f001 ff45 	bl	8004f34 <HAL_DMA_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80030b0:	f7fe f9b7 	bl	8001422 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a20      	ldr	r2, [pc, #128]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80030ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003138 <HAL_TIM_Base_MspInit+0xf8>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80030c0:	e032      	b.n	8003128 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM6)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <HAL_TIM_Base_MspInit+0x100>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d114      	bne.n	80030f6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 80030d2:	f043 0310 	orr.w	r3, r3, #16
 80030d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	2036      	movs	r0, #54	@ 0x36
 80030ea:	f001 fdfc 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030ee:	2036      	movs	r0, #54	@ 0x36
 80030f0:	f001 fe13 	bl	8004d1a <HAL_NVIC_EnableIRQ>
}
 80030f4:	e018      	b.n	8003128 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM7)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_TIM_Base_MspInit+0x104>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d113      	bne.n	8003128 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	4a0b      	ldr	r2, [pc, #44]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	6593      	str	r3, [r2, #88]	@ 0x58
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_TIM_Base_MspInit+0xf4>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2101      	movs	r1, #1
 800311c:	2037      	movs	r0, #55	@ 0x37
 800311e:	f001 fde2 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003122:	2037      	movs	r0, #55	@ 0x37
 8003124:	f001 fdf9 	bl	8004d1a <HAL_NVIC_EnableIRQ>
}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40000400 	.word	0x40000400
 8003134:	40021000 	.word	0x40021000
 8003138:	20002450 	.word	0x20002450
 800313c:	40020030 	.word	0x40020030
 8003140:	40001000 	.word	0x40001000
 8003144:	40001400 	.word	0x40001400

08003148 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_TIM_MspPostInit+0x64>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d11b      	bne.n	80031a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_TIM_MspPostInit+0x68>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <HAL_TIM_MspPostInit+0x68>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_TIM_MspPostInit+0x68>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 8003182:	2310      	movs	r3, #16
 8003184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800318e:	2302      	movs	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003192:	2302      	movs	r3, #2
 8003194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	4619      	mov	r1, r3
 800319c:	4805      	ldr	r0, [pc, #20]	@ (80031b4 <HAL_TIM_MspPostInit+0x6c>)
 800319e:	f002 f9a3 	bl	80054e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031a2:	bf00      	nop
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40021000 	.word	0x40021000
 80031b4:	48000400 	.word	0x48000400

080031b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031be:	4a23      	ldr	r2, [pc, #140]	@ (800324c <MX_USART2_UART_Init+0x94>)
 80031c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031c2:	4b21      	ldr	r3, [pc, #132]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031de:	220c      	movs	r2, #12
 80031e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e2:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031fa:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003200:	4811      	ldr	r0, [pc, #68]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 8003202:	f007 f9b7 	bl	800a574 <HAL_UART_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800320c:	f7fe f909 	bl	8001422 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003210:	2100      	movs	r1, #0
 8003212:	480d      	ldr	r0, [pc, #52]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 8003214:	f007 ff22 	bl	800b05c <HAL_UARTEx_SetTxFifoThreshold>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800321e:	f7fe f900 	bl	8001422 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003222:	2100      	movs	r1, #0
 8003224:	4808      	ldr	r0, [pc, #32]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 8003226:	f007 ff57 	bl	800b0d8 <HAL_UARTEx_SetRxFifoThreshold>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003230:	f7fe f8f7 	bl	8001422 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_USART2_UART_Init+0x90>)
 8003236:	f007 fed8 	bl	800afea <HAL_UARTEx_DisableFifoMode>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003240:	f7fe f8ef 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200024b0 	.word	0x200024b0
 800324c:	40004400 	.word	0x40004400

08003250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b09a      	sub	sp, #104	@ 0x68
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	2244      	movs	r2, #68	@ 0x44
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f00b fe28 	bl	800eec6 <memset>
  if(uartHandle->Instance==USART2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <HAL_UART_MspInit+0xa8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d136      	bne.n	80032ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003280:	2302      	movs	r3, #2
 8003282:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	f107 0310 	add.w	r3, r7, #16
 800328c:	4618      	mov	r0, r3
 800328e:	f005 fa3b 	bl	8008708 <HAL_RCCEx_PeriphCLKConfig>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003298:	f7fe f8c3 	bl	8001422 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800329c:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <HAL_UART_MspInit+0xac>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	4a16      	ldr	r2, [pc, #88]	@ (80032fc <HAL_UART_MspInit+0xac>)
 80032a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032a8:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <HAL_UART_MspInit+0xac>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <HAL_UART_MspInit+0xac>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b8:	4a10      	ldr	r2, [pc, #64]	@ (80032fc <HAL_UART_MspInit+0xac>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c0:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <HAL_UART_MspInit+0xac>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032cc:	230c      	movs	r3, #12
 80032ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032dc:	2307      	movs	r3, #7
 80032de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ea:	f002 f8fd 	bl	80054e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032ee:	bf00      	nop
 80032f0:	3768      	adds	r7, #104	@ 0x68
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40004400 	.word	0x40004400
 80032fc:	40021000 	.word	0x40021000

08003300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003300:	480d      	ldr	r0, [pc, #52]	@ (8003338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003302:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003304:	f7ff fda8 	bl	8002e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003308:	480c      	ldr	r0, [pc, #48]	@ (800333c <LoopForever+0x6>)
  ldr r1, =_edata
 800330a:	490d      	ldr	r1, [pc, #52]	@ (8003340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800330c:	4a0d      	ldr	r2, [pc, #52]	@ (8003344 <LoopForever+0xe>)
  movs r3, #0
 800330e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003310:	e002      	b.n	8003318 <LoopCopyDataInit>

08003312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003316:	3304      	adds	r3, #4

08003318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800331a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800331c:	d3f9      	bcc.n	8003312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003320:	4c0a      	ldr	r4, [pc, #40]	@ (800334c <LoopForever+0x16>)
  movs r3, #0
 8003322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003324:	e001      	b.n	800332a <LoopFillZerobss>

08003326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003328:	3204      	adds	r2, #4

0800332a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800332a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800332c:	d3fb      	bcc.n	8003326 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800332e:	f00b fe1f 	bl	800ef70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003332:	f7fd ff2d 	bl	8001190 <main>

08003336 <LoopForever>:

LoopForever:
    b LoopForever
 8003336:	e7fe      	b.n	8003336 <LoopForever>
  ldr   r0, =_estack
 8003338:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800333c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003340:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8003344:	0801136c 	.word	0x0801136c
  ldr r2, =_sbss
 8003348:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800334c:	20002e58 	.word	0x20002e58

08003350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003350:	e7fe      	b.n	8003350 <ADC1_2_IRQHandler>

08003352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800335c:	2003      	movs	r0, #3
 800335e:	f001 fcb7 	bl	8004cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003362:	200f      	movs	r0, #15
 8003364:	f000 f80e 	bl	8003384 <HAL_InitTick>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	71fb      	strb	r3, [r7, #7]
 8003372:	e001      	b.n	8003378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003374:	f7ff fc1a 	bl	8002bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003378:	79fb      	ldrb	r3, [r7, #7]

}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003390:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <HAL_InitTick+0x68>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d022      	beq.n	80033de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003398:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <HAL_InitTick+0x6c>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <HAL_InitTick+0x68>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80033a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 fcc2 	bl	8004d36 <HAL_SYSTICK_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10f      	bne.n	80033d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d809      	bhi.n	80033d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033be:	2200      	movs	r2, #0
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
 80033c6:	f001 fc8e 	bl	8004ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033ca:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <HAL_InitTick+0x70>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e007      	b.n	80033e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	e004      	b.n	80033e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e001      	b.n	80033e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000000c 	.word	0x2000000c
 80033f0:	20000004 	.word	0x20000004
 80033f4:	20000008 	.word	0x20000008

080033f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_IncTick+0x1c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HAL_IncTick+0x20>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4413      	add	r3, r2
 8003406:	4a03      	ldr	r2, [pc, #12]	@ (8003414 <HAL_IncTick+0x1c>)
 8003408:	6013      	str	r3, [r2, #0]
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	20002544 	.word	0x20002544
 8003418:	2000000c 	.word	0x2000000c

0800341c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return uwTick;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <HAL_GetTick+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20002544 	.word	0x20002544

08003434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff ffee 	bl	800341c <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d004      	beq.n	8003458 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800344e:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_Delay+0x40>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003458:	bf00      	nop
 800345a:	f7ff ffdf 	bl	800341c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	429a      	cmp	r2, r3
 8003468:	d8f7      	bhi.n	800345a <HAL_Delay+0x26>
  {
  }
}
 800346a:	bf00      	nop
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000000c 	.word	0x2000000c

08003478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3360      	adds	r3, #96	@ 0x60
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <LL_ADC_SetOffset+0x44>)
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003518:	bf00      	nop
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	03fff000 	.word	0x03fff000

08003528 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3360      	adds	r3, #96	@ 0x60
 8003536:	461a      	mov	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3360      	adds	r3, #96	@ 0x60
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	431a      	orrs	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3360      	adds	r3, #96	@ 0x60
 800359a:	461a      	mov	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3360      	adds	r3, #96	@ 0x60
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	615a      	str	r2, [r3, #20]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3330      	adds	r3, #48	@ 0x30
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	4413      	add	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	211f      	movs	r1, #31
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	401a      	ands	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	f003 011f 	and.w	r1, r3, #31
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	431a      	orrs	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3314      	adds	r3, #20
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	0e5b      	lsrs	r3, r3, #25
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0d1b      	lsrs	r3, r3, #20
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2107      	movs	r1, #7
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0d1b      	lsrs	r3, r3, #20
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	431a      	orrs	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	43db      	mvns	r3, r3
 800370a:	401a      	ands	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0318 	and.w	r3, r3, #24
 8003712:	4908      	ldr	r1, [pc, #32]	@ (8003734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003714:	40d9      	lsrs	r1, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	400b      	ands	r3, r1
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	0007ffff 	.word	0x0007ffff

08003738 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 031f 	and.w	r3, r3, #31
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003764:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6093      	str	r3, [r2, #8]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378c:	d101      	bne.n	8003792 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80037b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037dc:	d101      	bne.n	80037e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003804:	f043 0201 	orr.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800382c:	f043 0202 	orr.w	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <LL_ADC_IsEnabled+0x18>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_ADC_IsEnabled+0x1a>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d101      	bne.n	800387e <LL_ADC_IsDisableOngoing+0x18>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <LL_ADC_IsDisableOngoing+0x1a>
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800389c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d101      	bne.n	80038cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d101      	bne.n	80038f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b089      	sub	sp, #36	@ 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e167      	b.n	8003bea <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fc ff5d 	bl	80007e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff19 	bl	8003778 <LL_ADC_IsDeepPowerDownEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff feff 	bl	8003754 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff34 	bl	80037c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff18 	bl	80037a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003970:	4ba0      	ldr	r3, [pc, #640]	@ (8003bf4 <HAL_ADC_Init+0x2f4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	4aa0      	ldr	r2, [pc, #640]	@ (8003bf8 <HAL_ADC_Init+0x2f8>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	3301      	adds	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003984:	e002      	b.n	800398c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3b01      	subs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff16 	bl	80037c8 <LL_ADC_IsInternalRegulatorEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff76 	bl	80038b4 <LL_ADC_REG_IsConversionOngoing>
 80039c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 8100 	bne.w	8003bd8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 80fc 	bne.w	8003bd8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039e8:	f043 0202 	orr.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff23 	bl	8003840 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a04:	f7ff ff1c 	bl	8003840 <LL_ADC_IsEnabled>
 8003a08:	4604      	mov	r4, r0
 8003a0a:	487c      	ldr	r0, [pc, #496]	@ (8003bfc <HAL_ADC_Init+0x2fc>)
 8003a0c:	f7ff ff18 	bl	8003840 <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4323      	orrs	r3, r4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4878      	ldr	r0, [pc, #480]	@ (8003c00 <HAL_ADC_Init+0x300>)
 8003a20:	f7ff fd2a 	bl	8003478 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7f5b      	ldrb	r3, [r3, #29]
 8003a28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	045b      	lsls	r3, r3, #17
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	4b60      	ldr	r3, [pc, #384]	@ (8003c04 <HAL_ADC_Init+0x304>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ff15 	bl	80038da <LL_ADC_INJ_IsConversionOngoing>
 8003ab0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d16d      	bne.n	8003b94 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d16a      	bne.n	8003b94 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ac2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003aca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ada:	f023 0302 	bic.w	r3, r3, #2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003afe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6911      	ldr	r1, [r2, #16]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003b1e:	e013      	b.n	8003b48 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b44:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d118      	bne.n	8003b84 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b6e:	4311      	orrs	r1, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b74:	430a      	orrs	r2, r1
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	e007      	b.n	8003b94 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f023 010f 	bic.w	r1, r3, #15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bb4:	e007      	b.n	8003bc6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 020f 	bic.w	r2, r2, #15
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bd6:	e007      	b.n	8003be8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	f043 0210 	orr.w	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	@ 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	053e2d63 	.word	0x053e2d63
 8003bfc:	50000100 	.word	0x50000100
 8003c00:	50000300 	.word	0x50000300
 8003c04:	fff04007 	.word	0xfff04007

08003c08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c14:	4851      	ldr	r0, [pc, #324]	@ (8003d5c <HAL_ADC_Start_DMA+0x154>)
 8003c16:	f7ff fd8f 	bl	8003738 <LL_ADC_GetMultimode>
 8003c1a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fe47 	bl	80038b4 <LL_ADC_REG_IsConversionOngoing>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 808f 	bne.w	8003d4c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_Start_DMA+0x34>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e08a      	b.n	8003d52 <HAL_ADC_Start_DMA+0x14a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d002      	beq.n	8003c56 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d173      	bne.n	8003d3e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fc98 	bl	800458c <ADC_Enable>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d166      	bne.n	8003d34 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a38      	ldr	r2, [pc, #224]	@ (8003d60 <HAL_ADC_Start_DMA+0x158>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d002      	beq.n	8003c8a <HAL_ADC_Start_DMA+0x82>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	e001      	b.n	8003c8e <HAL_ADC_Start_DMA+0x86>
 8003c8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d002      	beq.n	8003c9c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d006      	beq.n	8003cc2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb8:	f023 0206 	bic.w	r2, r3, #6
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60
 8003cc0:	e002      	b.n	8003cc8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	4a25      	ldr	r2, [pc, #148]	@ (8003d64 <HAL_ADC_Start_DMA+0x15c>)
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	4a24      	ldr	r2, [pc, #144]	@ (8003d68 <HAL_ADC_Start_DMA+0x160>)
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	4a23      	ldr	r2, [pc, #140]	@ (8003d6c <HAL_ADC_Start_DMA+0x164>)
 8003cde:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	221c      	movs	r2, #28
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0210 	orr.w	r2, r2, #16
 8003cfe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3340      	adds	r3, #64	@ 0x40
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f001 f9b0 	bl	8005084 <HAL_DMA_Start_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fdad 	bl	800388c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d32:	e00d      	b.n	8003d50 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003d3c:	e008      	b.n	8003d50 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003d4a:	e001      	b.n	8003d50 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	50000300 	.word	0x50000300
 8003d60:	50000100 	.word	0x50000100
 8003d64:	08004757 	.word	0x08004757
 8003d68:	0800482f 	.word	0x0800482f
 8003d6c:	0800484b 	.word	0x0800484b

08003d70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b0b6      	sub	sp, #216	@ 0xd8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x22>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e3c8      	b.n	8004560 <HAL_ADC_ConfigChannel+0x7b4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fd6a 	bl	80038b4 <LL_ADC_REG_IsConversionOngoing>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 83ad 	bne.w	8004542 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f7ff fc24 	bl	8003642 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fd58 	bl	80038b4 <LL_ADC_REG_IsConversionOngoing>
 8003e04:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fd64 	bl	80038da <LL_ADC_INJ_IsConversionOngoing>
 8003e12:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 81d9 	bne.w	80041d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 81d4 	bne.w	80041d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e32:	d10f      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f7ff fc2b 	bl	800369a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fbd2 	bl	80035f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e52:	e00e      	b.n	8003e72 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6819      	ldr	r1, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	461a      	mov	r2, r3
 8003e62:	f7ff fc1a 	bl	800369a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fbc2 	bl	80035f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	08db      	lsrs	r3, r3, #3
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d022      	beq.n	8003eda <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6919      	ldr	r1, [r3, #16]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ea4:	f7ff fb1c 	bl	80034e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6919      	ldr	r1, [r3, #16]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f7ff fb68 	bl	800358a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x124>
 8003eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ece:	e000      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x126>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7ff fb74 	bl	80035c0 <LL_ADC_SetOffsetSaturation>
 8003ed8:	e17b      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fb21 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x15a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fb16 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	e01e      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x198>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fb0b 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003f34:	2320      	movs	r3, #32
 8003f36:	e004      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003f38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x1b0>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	e018      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x1e2>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003f80:	2320      	movs	r3, #32
 8003f82:	e004      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d106      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fada 	bl	8003554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fabe 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x220>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fab3 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	f003 021f 	and.w	r2, r3, #31
 8003fca:	e01e      	b.n	800400a <HAL_ADC_ConfigChannel+0x25e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff faa8 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003ffa:	2320      	movs	r3, #32
 8003ffc:	e004      	b.n	8004008 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x276>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	0e9b      	lsrs	r3, r3, #26
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	e018      	b.n	8004054 <HAL_ADC_ConfigChannel+0x2a8>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800403a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800403e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004046:	2320      	movs	r3, #32
 8004048:	e004      	b.n	8004054 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800404a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004054:	429a      	cmp	r2, r3
 8004056:	d106      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fa77 	bl	8003554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fa5b 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x2e6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2102      	movs	r1, #2
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fa50 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8004088:	4603      	mov	r3, r0
 800408a:	0e9b      	lsrs	r3, r3, #26
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	e01e      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x324>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fa45 	bl	8003528 <LL_ADC_GetOffsetChannel>
 800409e:	4603      	mov	r3, r0
 80040a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80040b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80040b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e004      	b.n	80040ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80040c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x33c>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0e9b      	lsrs	r3, r3, #26
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	e016      	b.n	8004116 <HAL_ADC_ConfigChannel+0x36a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80040fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004108:	2320      	movs	r3, #32
 800410a:	e004      	b.n	8004116 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800410c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004116:	429a      	cmp	r2, r3
 8004118:	d106      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	2102      	movs	r1, #2
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fa16 	bl	8003554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2103      	movs	r1, #3
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff f9fa 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x3a8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2103      	movs	r1, #3
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f9ef 	bl	8003528 <LL_ADC_GetOffsetChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	e017      	b.n	8004184 <HAL_ADC_ConfigChannel+0x3d8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2103      	movs	r1, #3
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff f9e4 	bl	8003528 <LL_ADC_GetOffsetChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800416c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800416e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e003      	b.n	8004182 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800417a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <HAL_ADC_ConfigChannel+0x3f0>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	e011      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x414>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80041aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80041ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80041b4:	2320      	movs	r3, #32
 80041b6:	e003      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80041b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d106      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2103      	movs	r1, #3
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff f9c1 	bl	8003554 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fb32 	bl	8003840 <LL_ADC_IsEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 8140 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f7ff fa7d 	bl	80036f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a8f      	ldr	r2, [pc, #572]	@ (8004438 <HAL_ADC_ConfigChannel+0x68c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f040 8131 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <HAL_ADC_ConfigChannel+0x47e>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0e9b      	lsrs	r3, r3, #26
 8004218:	3301      	adds	r3, #1
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2b09      	cmp	r3, #9
 8004220:	bf94      	ite	ls
 8004222:	2301      	movls	r3, #1
 8004224:	2300      	movhi	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e019      	b.n	800425e <HAL_ADC_ConfigChannel+0x4b2>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800423a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800423c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004242:	2320      	movs	r3, #32
 8004244:	e003      	b.n	800424e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	3301      	adds	r3, #1
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	2b09      	cmp	r3, #9
 8004256:	bf94      	ite	ls
 8004258:	2301      	movls	r3, #1
 800425a:	2300      	movhi	r3, #0
 800425c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800425e:	2b00      	cmp	r3, #0
 8004260:	d079      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_ADC_ConfigChannel+0x4d2>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	3301      	adds	r3, #1
 8004276:	069b      	lsls	r3, r3, #26
 8004278:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800427c:	e015      	b.n	80042aa <HAL_ADC_ConfigChannel+0x4fe>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004286:	fa93 f3a3 	rbit	r3, r3
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800428c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800428e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004296:	2320      	movs	r3, #32
 8004298:	e003      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800429a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	069b      	lsls	r3, r3, #26
 80042a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x51e>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	0e9b      	lsrs	r3, r3, #26
 80042bc:	3301      	adds	r3, #1
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	e017      	b.n	80042fa <HAL_ADC_ConfigChannel+0x54e>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80042d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80042dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e003      	b.n	80042ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80042e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	ea42 0103 	orr.w	r1, r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x574>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	0e9b      	lsrs	r3, r3, #26
 8004310:	3301      	adds	r3, #1
 8004312:	f003 021f 	and.w	r2, r3, #31
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	051b      	lsls	r3, r3, #20
 800431e:	e018      	b.n	8004352 <HAL_ADC_ConfigChannel+0x5a6>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800433c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f003 021f 	and.w	r2, r3, #31
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004352:	430b      	orrs	r3, r1
 8004354:	e081      	b.n	800445a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x5c6>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	3301      	adds	r3, #1
 800436a:	069b      	lsls	r3, r3, #26
 800436c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004370:	e015      	b.n	800439e <HAL_ADC_ConfigChannel+0x5f2>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e003      	b.n	8004396 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	3301      	adds	r3, #1
 8004398:	069b      	lsls	r3, r3, #26
 800439a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_ADC_ConfigChannel+0x612>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	3301      	adds	r3, #1
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	e017      	b.n	80043ee <HAL_ADC_ConfigChannel+0x642>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
  return result;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80043d6:	2320      	movs	r3, #32
 80043d8:	e003      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	fab3 f383 	clz	r3, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	ea42 0103 	orr.w	r1, r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10d      	bne.n	800441a <HAL_ADC_ConfigChannel+0x66e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	0e9b      	lsrs	r3, r3, #26
 8004404:	3301      	adds	r3, #1
 8004406:	f003 021f 	and.w	r2, r3, #31
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	3b1e      	subs	r3, #30
 8004412:	051b      	lsls	r3, r3, #20
 8004414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004418:	e01e      	b.n	8004458 <HAL_ADC_ConfigChannel+0x6ac>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	613b      	str	r3, [r7, #16]
  return result;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e006      	b.n	8004444 <HAL_ADC_ConfigChannel+0x698>
 8004436:	bf00      	nop
 8004438:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f003 021f 	and.w	r2, r3, #31
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	3b1e      	subs	r3, #30
 8004452:	051b      	lsls	r3, r3, #20
 8004454:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004458:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800445e:	4619      	mov	r1, r3
 8004460:	f7ff f91b 	bl	800369a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b3f      	ldr	r3, [pc, #252]	@ (8004568 <HAL_ADC_ConfigChannel+0x7bc>)
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d071      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004470:	483e      	ldr	r0, [pc, #248]	@ (800456c <HAL_ADC_ConfigChannel+0x7c0>)
 8004472:	f7ff f827 	bl	80034c4 <LL_ADC_GetCommonPathInternalCh>
 8004476:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a3c      	ldr	r2, [pc, #240]	@ (8004570 <HAL_ADC_ConfigChannel+0x7c4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_ADC_ConfigChannel+0x6e2>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3a      	ldr	r2, [pc, #232]	@ (8004574 <HAL_ADC_ConfigChannel+0x7c8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d127      	bne.n	80044de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800448e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d121      	bne.n	80044de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a2:	d157      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044ac:	4619      	mov	r1, r3
 80044ae:	482f      	ldr	r0, [pc, #188]	@ (800456c <HAL_ADC_ConfigChannel+0x7c0>)
 80044b0:	f7fe fff5 	bl	800349e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044b4:	4b30      	ldr	r3, [pc, #192]	@ (8004578 <HAL_ADC_ConfigChannel+0x7cc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	4a30      	ldr	r2, [pc, #192]	@ (800457c <HAL_ADC_ConfigChannel+0x7d0>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	099b      	lsrs	r3, r3, #6
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044ce:	e002      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f9      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044dc:	e03a      	b.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <HAL_ADC_ConfigChannel+0x7d4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d113      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <HAL_ADC_ConfigChannel+0x7d8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d02a      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004502:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004506:	4619      	mov	r1, r3
 8004508:	4818      	ldr	r0, [pc, #96]	@ (800456c <HAL_ADC_ConfigChannel+0x7c0>)
 800450a:	f7fe ffc8 	bl	800349e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800450e:	e021      	b.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <HAL_ADC_ConfigChannel+0x7dc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d11c      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800451a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800451e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d116      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a16      	ldr	r2, [pc, #88]	@ (8004584 <HAL_ADC_ConfigChannel+0x7d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d011      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004538:	4619      	mov	r1, r3
 800453a:	480c      	ldr	r0, [pc, #48]	@ (800456c <HAL_ADC_ConfigChannel+0x7c0>)
 800453c:	f7fe ffaf 	bl	800349e <LL_ADC_SetCommonPathInternalCh>
 8004540:	e008      	b.n	8004554 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800455c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004560:	4618      	mov	r0, r3
 8004562:	37d8      	adds	r7, #216	@ 0xd8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	80080000 	.word	0x80080000
 800456c:	50000300 	.word	0x50000300
 8004570:	c3210000 	.word	0xc3210000
 8004574:	90c00010 	.word	0x90c00010
 8004578:	20000004 	.word	0x20000004
 800457c:	053e2d63 	.word	0x053e2d63
 8004580:	c7520000 	.word	0xc7520000
 8004584:	50000100 	.word	0x50000100
 8004588:	cb840000 	.word	0xcb840000

0800458c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff f94f 	bl	8003840 <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d169      	bne.n	800467c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <ADC_Enable+0xfc>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ba:	f043 0210 	orr.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e055      	b.n	800467e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff f90a 	bl	80037f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045dc:	482b      	ldr	r0, [pc, #172]	@ (800468c <ADC_Enable+0x100>)
 80045de:	f7fe ff71 	bl	80034c4 <LL_ADC_GetCommonPathInternalCh>
 80045e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ec:	4b28      	ldr	r3, [pc, #160]	@ (8004690 <ADC_Enable+0x104>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	4a28      	ldr	r2, [pc, #160]	@ (8004694 <ADC_Enable+0x108>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004606:	e002      	b.n	800460e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3b01      	subs	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f9      	bne.n	8004608 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004614:	f7fe ff02 	bl	800341c <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800461a:	e028      	b.n	800466e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff f90d 	bl	8003840 <LL_ADC_IsEnabled>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f8dd 	bl	80037f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004636:	f7fe fef1 	bl	800341c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d914      	bls.n	800466e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d00d      	beq.n	800466e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e007      	b.n	800467e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d1cf      	bne.n	800461c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	8000003f 	.word	0x8000003f
 800468c:	50000300 	.word	0x50000300
 8004690:	20000004 	.word	0x20000004
 8004694:	053e2d63 	.word	0x053e2d63

08004698 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff f8de 	bl	8003866 <LL_ADC_IsDisableOngoing>
 80046aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff f8c5 	bl	8003840 <LL_ADC_IsEnabled>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d047      	beq.n	800474c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d144      	bne.n	800474c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030d 	and.w	r3, r3, #13
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d10c      	bne.n	80046ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff f89f 	bl	8003818 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2203      	movs	r2, #3
 80046e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046e2:	f7fe fe9b 	bl	800341c <HAL_GetTick>
 80046e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046e8:	e029      	b.n	800473e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ee:	f043 0210 	orr.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e023      	b.n	800474e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004706:	f7fe fe89 	bl	800341c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d914      	bls.n	800473e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004726:	f043 0210 	orr.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004732:	f043 0201 	orr.w	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e007      	b.n	800474e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1dc      	bne.n	8004706 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800476c:	2b00      	cmp	r3, #0
 800476e:	d14b      	bne.n	8004808 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d021      	beq.n	80047ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe ff44 	bl	800361c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d032      	beq.n	8004800 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d12b      	bne.n	8004800 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11f      	bne.n	8004800 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	f043 0201 	orr.w	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047cc:	e018      	b.n	8004800 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d111      	bne.n	8004800 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	f043 0201 	orr.w	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff fab5 	bl	8003d70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004806:	e00e      	b.n	8004826 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff fabf 	bl	8003d98 <HAL_ADC_ErrorCallback>
}
 800481a:	e004      	b.n	8004826 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff faa1 	bl	8003d84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff fa91 	bl	8003d98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <LL_ADC_IsEnabled>:
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <LL_ADC_IsEnabled+0x18>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <LL_ADC_IsEnabled+0x1a>
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_ADC_StartCalibration>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80048b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	609a      	str	r2, [r3, #8]
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <LL_ADC_IsCalibrationOnGoing>:
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048ea:	d101      	bne.n	80048f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_ADC_REG_IsConversionOngoing>:
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d101      	bne.n	8004916 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_ADCEx_Calibration_Start+0x1c>
 800493c:	2302      	movs	r3, #2
 800493e:	e04d      	b.n	80049dc <HAL_ADCEx_Calibration_Start+0xb8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fea5 	bl	8004698 <ADC_Disable>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d136      	bne.n	80049c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004960:	f023 0302 	bic.w	r3, r3, #2
 8004964:	f043 0202 	orr.w	r2, r3, #2
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff ff96 	bl	80048a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004978:	e014      	b.n	80049a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3301      	adds	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d90d      	bls.n	80049a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498c:	f023 0312 	bic.w	r3, r3, #18
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e01b      	b.n	80049dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff ff94 	bl	80048d6 <LL_ADC_IsCalibrationOnGoing>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e2      	bne.n	800497a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b8:	f023 0303 	bic.w	r3, r3, #3
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049c4:	e005      	b.n	80049d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f043 0210 	orr.w	r2, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	0004de01 	.word	0x0004de01

080049e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b0a1      	sub	sp, #132	@ 0x84
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e08b      	b.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004a12:	2300      	movs	r3, #0
 8004a14:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a1e:	d102      	bne.n	8004a26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a20:	4b41      	ldr	r3, [pc, #260]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	e001      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e06a      	b.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff57 	bl	80048fe <LL_ADC_REG_IsConversionOngoing>
 8004a50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ff51 	bl	80048fe <LL_ADC_REG_IsConversionOngoing>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d14c      	bne.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d149      	bne.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a68:	4b30      	ldr	r3, [pc, #192]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004a6a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d028      	beq.n	8004ac6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a86:	035b      	lsls	r3, r3, #13
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a94:	f7ff fef3 	bl	800487e <LL_ADC_IsEnabled>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	4823      	ldr	r0, [pc, #140]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004a9c:	f7ff feef 	bl	800487e <LL_ADC_IsEnabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4323      	orrs	r3, r4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d133      	bne.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ab0:	f023 030f 	bic.w	r3, r3, #15
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	6811      	ldr	r1, [r2, #0]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	6892      	ldr	r2, [r2, #8]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ac2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ac4:	e024      	b.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ad2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ad6:	f7ff fed2 	bl	800487e <LL_ADC_IsEnabled>
 8004ada:	4604      	mov	r4, r0
 8004adc:	4812      	ldr	r0, [pc, #72]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ade:	f7ff fece 	bl	800487e <LL_ADC_IsEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d112      	bne.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004af2:	f023 030f 	bic.w	r3, r3, #15
 8004af6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004af8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004afa:	e009      	b.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b0e:	e000      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3784      	adds	r7, #132	@ 0x84
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	bf00      	nop
 8004b28:	50000100 	.word	0x50000100
 8004b2c:	50000300 	.word	0x50000300

08004b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b62:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	60d3      	str	r3, [r2, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b7c:	4b04      	ldr	r3, [pc, #16]	@ (8004b90 <__NVIC_GetPriorityGrouping+0x18>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	f003 0307 	and.w	r3, r3, #7
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db0b      	blt.n	8004bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f003 021f 	and.w	r2, r3, #31
 8004bac:	4907      	ldr	r1, [pc, #28]	@ (8004bcc <__NVIC_EnableIRQ+0x38>)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000e100 	.word	0xe000e100

08004bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	db0a      	blt.n	8004bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	490c      	ldr	r1, [pc, #48]	@ (8004c1c <__NVIC_SetPriority+0x4c>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	0112      	lsls	r2, r2, #4
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf8:	e00a      	b.n	8004c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4908      	ldr	r1, [pc, #32]	@ (8004c20 <__NVIC_SetPriority+0x50>)
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	3b04      	subs	r3, #4
 8004c08:	0112      	lsls	r2, r2, #4
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	761a      	strb	r2, [r3, #24]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e100 	.word	0xe000e100
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f1c3 0307 	rsb	r3, r3, #7
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf28      	it	cs
 8004c42:	2304      	movcs	r3, #4
 8004c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	d902      	bls.n	8004c54 <NVIC_EncodePriority+0x30>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3b03      	subs	r3, #3
 8004c52:	e000      	b.n	8004c56 <NVIC_EncodePriority+0x32>
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	401a      	ands	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	43d9      	mvns	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	4313      	orrs	r3, r2
         );
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9c:	d301      	bcc.n	8004ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00f      	b.n	8004cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <SysTick_Config+0x40>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004caa:	210f      	movs	r1, #15
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	f7ff ff8e 	bl	8004bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <SysTick_Config+0x40>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <SysTick_Config+0x40>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000e010 	.word	0xe000e010

08004cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff29 	bl	8004b30 <__NVIC_SetPriorityGrouping>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf4:	f7ff ff40 	bl	8004b78 <__NVIC_GetPriorityGrouping>
 8004cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	6978      	ldr	r0, [r7, #20]
 8004d00:	f7ff ff90 	bl	8004c24 <NVIC_EncodePriority>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff5f 	bl	8004bd0 <__NVIC_SetPriority>
}
 8004d12:	bf00      	nop
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	4603      	mov	r3, r0
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff33 	bl	8004b94 <__NVIC_EnableIRQ>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff ffa4 	bl	8004c8c <SysTick_Config>
 8004d44:	4603      	mov	r3, r0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e054      	b.n	8004e0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7f5b      	ldrb	r3, [r3, #29]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fb ff24 	bl	8000bc0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	791b      	ldrb	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a22      	ldr	r2, [pc, #136]	@ (8004e14 <HAL_CRC_Init+0xc4>)
 8004d8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0218 	bic.w	r2, r2, #24
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	e00c      	b.n	8004dba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6899      	ldr	r1, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f834 	bl	8004e18 <HAL_CRCEx_Polynomial_Set>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e028      	b.n	8004e0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	795b      	ldrb	r3, [r3, #5]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	611a      	str	r2, [r3, #16]
 8004dcc:	e004      	b.n	8004dd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6912      	ldr	r2, [r2, #16]
 8004dd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	04c11db7 	.word	0x04c11db7

08004e18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e28:	231f      	movs	r3, #31
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
 8004e3a:	e063      	b.n	8004f04 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e3c:	bf00      	nop
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1e5a      	subs	r2, r3, #1
 8004e42:	613a      	str	r2, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_CRCEx_Polynomial_Set+0x44>
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b18      	cmp	r3, #24
 8004e60:	d846      	bhi.n	8004ef0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004e62:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004ef7 	.word	0x08004ef7
 8004e6c:	08004ef1 	.word	0x08004ef1
 8004e70:	08004ef1 	.word	0x08004ef1
 8004e74:	08004ef1 	.word	0x08004ef1
 8004e78:	08004ef1 	.word	0x08004ef1
 8004e7c:	08004ef1 	.word	0x08004ef1
 8004e80:	08004ef1 	.word	0x08004ef1
 8004e84:	08004ef1 	.word	0x08004ef1
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004ef1 	.word	0x08004ef1
 8004e90:	08004ef1 	.word	0x08004ef1
 8004e94:	08004ef1 	.word	0x08004ef1
 8004e98:	08004ef1 	.word	0x08004ef1
 8004e9c:	08004ef1 	.word	0x08004ef1
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004ef1 	.word	0x08004ef1
 8004ea8:	08004ed9 	.word	0x08004ed9
 8004eac:	08004ef1 	.word	0x08004ef1
 8004eb0:	08004ef1 	.word	0x08004ef1
 8004eb4:	08004ef1 	.word	0x08004ef1
 8004eb8:	08004ef1 	.word	0x08004ef1
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004ef1 	.word	0x08004ef1
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	08004ecd 	.word	0x08004ecd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d913      	bls.n	8004efa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ed6:	e010      	b.n	8004efa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b07      	cmp	r3, #7
 8004edc:	d90f      	bls.n	8004efe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ee2:	e00c      	b.n	8004efe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d90b      	bls.n	8004f02 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004eee:	e008      	b.n	8004f02 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
        break;
 8004ef4:	e006      	b.n	8004f04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004f02:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 0118 	bic.w	r1, r3, #24
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e08d      	b.n	8005062 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b47      	ldr	r3, [pc, #284]	@ (800506c <HAL_DMA_Init+0x138>)
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d80f      	bhi.n	8004f72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <HAL_DMA_Init+0x13c>)
 8004f5a:	4413      	add	r3, r2
 8004f5c:	4a45      	ldr	r2, [pc, #276]	@ (8005074 <HAL_DMA_Init+0x140>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a42      	ldr	r2, [pc, #264]	@ (8005078 <HAL_DMA_Init+0x144>)
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f70:	e00e      	b.n	8004f90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b40      	ldr	r3, [pc, #256]	@ (800507c <HAL_DMA_Init+0x148>)
 8004f7a:	4413      	add	r3, r2
 8004f7c:	4a3d      	ldr	r2, [pc, #244]	@ (8005074 <HAL_DMA_Init+0x140>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	009a      	lsls	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005080 <HAL_DMA_Init+0x14c>)
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa1e 	bl	8005424 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ff0:	d102      	bne.n	8004ff8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800500c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_DMA_Init+0x104>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d80c      	bhi.n	8005038 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa3e 	bl	80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e008      	b.n	800504a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40020407 	.word	0x40020407
 8005070:	bffdfff8 	.word	0xbffdfff8
 8005074:	cccccccd 	.word	0xcccccccd
 8005078:	40020000 	.word	0x40020000
 800507c:	bffdfbf8 	.word	0xbffdfbf8
 8005080:	40020400 	.word	0x40020400

08005084 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_DMA_Start_IT+0x20>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e066      	b.n	8005172 <HAL_DMA_Start_IT+0xee>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d155      	bne.n	8005164 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f962 	bl	80053a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 020e 	orr.w	r2, r2, #14
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e00f      	b.n	800511c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 020a 	orr.w	r2, r2, #10
 800511a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005138:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e005      	b.n	8005170 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800516c:	2302      	movs	r3, #2
 800516e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d00d      	beq.n	80051ae <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	e047      	b.n	800523e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 020e 	bic.w	r2, r2, #14
 80051bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	f003 021f 	and.w	r2, r3, #31
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	2101      	movs	r1, #1
 80051ec:	fa01 f202 	lsl.w	r2, r1, r2
 80051f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005212:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800521c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
    }
  }
  return status;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2204      	movs	r2, #4
 800526a:	409a      	lsls	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d026      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x7a>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d021      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d107      	bne.n	800529c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0204 	bic.w	r2, r2, #4
 800529a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	2104      	movs	r1, #4
 80052aa:	fa01 f202 	lsl.w	r2, r1, r2
 80052ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d071      	beq.n	800539c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80052c0:	e06c      	b.n	800539c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	2202      	movs	r2, #2
 80052cc:	409a      	lsls	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02e      	beq.n	8005334 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d029      	beq.n	8005334 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 020a 	bic.w	r2, r2, #10
 80052fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f003 021f 	and.w	r2, r3, #31
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	2102      	movs	r1, #2
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d038      	beq.n	800539c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005332:	e033      	b.n	800539c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2208      	movs	r2, #8
 800533e:	409a      	lsls	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4013      	ands	r3, r2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02a      	beq.n	800539e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d025      	beq.n	800539e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 020e 	bic.w	r2, r2, #14
 8005360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	f003 021f 	and.w	r2, r3, #31
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	2101      	movs	r1, #1
 8005370:	fa01 f202 	lsl.w	r2, r1, r2
 8005374:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800539c:	bf00      	nop
 800539e:	bf00      	nop
}
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053bc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d4:	f003 021f 	and.w	r2, r3, #31
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f202 	lsl.w	r2, r1, r2
 80053e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d108      	bne.n	8005406 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005404:	e007      	b.n	8005416 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	4b16      	ldr	r3, [pc, #88]	@ (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005434:	429a      	cmp	r2, r3
 8005436:	d802      	bhi.n	800543e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005438:	4b15      	ldr	r3, [pc, #84]	@ (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e001      	b.n	8005442 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800543e:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005440:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	3b08      	subs	r3, #8
 800544e:	4a12      	ldr	r2, [pc, #72]	@ (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	089b      	lsrs	r3, r3, #2
 800545e:	009a      	lsls	r2, r3, #2
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a0b      	ldr	r2, [pc, #44]	@ (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800546e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2201      	movs	r2, #1
 8005478:	409a      	lsls	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40020407 	.word	0x40020407
 8005490:	40020800 	.word	0x40020800
 8005494:	40020820 	.word	0x40020820
 8005498:	cccccccd 	.word	0xcccccccd
 800549c:	40020880 	.word	0x40020880

080054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	461a      	mov	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a08      	ldr	r2, [pc, #32]	@ (80054e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2201      	movs	r2, #1
 80054ce:	409a      	lsls	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	1000823f 	.word	0x1000823f
 80054e4:	40020940 	.word	0x40020940

080054e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054f6:	e15a      	b.n	80057ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	2101      	movs	r1, #1
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 814c 	beq.w	80057a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d005      	beq.n	8005528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005524:	2b02      	cmp	r3, #2
 8005526:	d130      	bne.n	800558a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	2203      	movs	r2, #3
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	43db      	mvns	r3, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4013      	ands	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800555e:	2201      	movs	r2, #1
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 0201 	and.w	r2, r3, #1
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b03      	cmp	r3, #3
 8005594:	d017      	beq.n	80055c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	2203      	movs	r2, #3
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d123      	bne.n	800561a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	08da      	lsrs	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3208      	adds	r2, #8
 80055da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	220f      	movs	r2, #15
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	08da      	lsrs	r2, r3, #3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3208      	adds	r2, #8
 8005614:	6939      	ldr	r1, [r7, #16]
 8005616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	2203      	movs	r2, #3
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0203 	and.w	r2, r3, #3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80a6 	beq.w	80057a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565c:	4b5b      	ldr	r3, [pc, #364]	@ (80057cc <HAL_GPIO_Init+0x2e4>)
 800565e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005660:	4a5a      	ldr	r2, [pc, #360]	@ (80057cc <HAL_GPIO_Init+0x2e4>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6613      	str	r3, [r2, #96]	@ 0x60
 8005668:	4b58      	ldr	r3, [pc, #352]	@ (80057cc <HAL_GPIO_Init+0x2e4>)
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005674:	4a56      	ldr	r2, [pc, #344]	@ (80057d0 <HAL_GPIO_Init+0x2e8>)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	3302      	adds	r3, #2
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800569e:	d01f      	beq.n	80056e0 <HAL_GPIO_Init+0x1f8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a4c      	ldr	r2, [pc, #304]	@ (80057d4 <HAL_GPIO_Init+0x2ec>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d019      	beq.n	80056dc <HAL_GPIO_Init+0x1f4>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a4b      	ldr	r2, [pc, #300]	@ (80057d8 <HAL_GPIO_Init+0x2f0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_GPIO_Init+0x1f0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a4a      	ldr	r2, [pc, #296]	@ (80057dc <HAL_GPIO_Init+0x2f4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00d      	beq.n	80056d4 <HAL_GPIO_Init+0x1ec>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a49      	ldr	r2, [pc, #292]	@ (80057e0 <HAL_GPIO_Init+0x2f8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <HAL_GPIO_Init+0x1e8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a48      	ldr	r2, [pc, #288]	@ (80057e4 <HAL_GPIO_Init+0x2fc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_GPIO_Init+0x1e4>
 80056c8:	2305      	movs	r3, #5
 80056ca:	e00a      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056cc:	2306      	movs	r3, #6
 80056ce:	e008      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056d0:	2304      	movs	r3, #4
 80056d2:	e006      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056d4:	2303      	movs	r3, #3
 80056d6:	e004      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056d8:	2302      	movs	r3, #2
 80056da:	e002      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056e0:	2300      	movs	r3, #0
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	f002 0203 	and.w	r2, r2, #3
 80056e8:	0092      	lsls	r2, r2, #2
 80056ea:	4093      	lsls	r3, r2
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056f2:	4937      	ldr	r1, [pc, #220]	@ (80057d0 <HAL_GPIO_Init+0x2e8>)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	089b      	lsrs	r3, r3, #2
 80056f8:	3302      	adds	r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005700:	4b39      	ldr	r3, [pc, #228]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	43db      	mvns	r3, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4013      	ands	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005724:	4a30      	ldr	r2, [pc, #192]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800572a:	4b2f      	ldr	r3, [pc, #188]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	43db      	mvns	r3, r3
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4013      	ands	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800574e:	4a26      	ldr	r2, [pc, #152]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005754:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005778:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800577e:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057a2:	4a11      	ldr	r2, [pc, #68]	@ (80057e8 <HAL_GPIO_Init+0x300>)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3301      	adds	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f ae9d 	bne.w	80054f8 <HAL_GPIO_Init+0x10>
  }
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40010000 	.word	0x40010000
 80057d4:	48000400 	.word	0x48000400
 80057d8:	48000800 	.word	0x48000800
 80057dc:	48000c00 	.word	0x48000c00
 80057e0:	48001000 	.word	0x48001000
 80057e4:	48001400 	.word	0x48001400
 80057e8:	40010400 	.word	0x40010400

080057ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	887b      	ldrh	r3, [r7, #2]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	e001      	b.n	800580e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]
 8005828:	4613      	mov	r3, r2
 800582a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800582c:	787b      	ldrb	r3, [r7, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005832:	887a      	ldrh	r2, [r7, #2]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005838:	e002      	b.n	8005840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800583a:	887a      	ldrh	r2, [r7, #2]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e08d      	b.n	800597a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fb faaa 	bl	8000dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2224      	movs	r2, #36	@ 0x24
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800589c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d107      	bne.n	80058c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	e006      	b.n	80058d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d108      	bne.n	80058ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	e007      	b.n	80058fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800590c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	461a      	mov	r2, r3
 8005990:	460b      	mov	r3, r1
 8005992:	817b      	strh	r3, [r7, #10]
 8005994:	4613      	mov	r3, r2
 8005996:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	f040 80fd 	bne.w	8005ba0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_I2C_Master_Transmit+0x30>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e0f6      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0x21e>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059bc:	f7fd fd2e 	bl	800341c <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2319      	movs	r3, #25
 80059c8:	2201      	movs	r2, #1
 80059ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f914 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e0e1      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2221      	movs	r2, #33	@ 0x21
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2210      	movs	r2, #16
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	893a      	ldrh	r2, [r7, #8]
 80059fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2bff      	cmp	r3, #255	@ 0xff
 8005a0e:	d906      	bls.n	8005a1e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	22ff      	movs	r2, #255	@ 0xff
 8005a14:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e007      	b.n	8005a2e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a2c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d024      	beq.n	8005a80 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	8979      	ldrh	r1, [r7, #10]
 8005a72:	4b4e      	ldr	r3, [pc, #312]	@ (8005bac <HAL_I2C_Master_Transmit+0x228>)
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fa83 	bl	8005f84 <I2C_TransferConfig>
 8005a7e:	e066      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	8979      	ldrh	r1, [r7, #10]
 8005a88:	4b48      	ldr	r3, [pc, #288]	@ (8005bac <HAL_I2C_Master_Transmit+0x228>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa78 	bl	8005f84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a94:	e05b      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	6a39      	ldr	r1, [r7, #32]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f907 	bl	8005cae <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e07b      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d034      	beq.n	8005b4e <HAL_I2C_Master_Transmit+0x1ca>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d130      	bne.n	8005b4e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	2200      	movs	r2, #0
 8005af4:	2180      	movs	r1, #128	@ 0x80
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f880 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e04d      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2bff      	cmp	r3, #255	@ 0xff
 8005b0e:	d90e      	bls.n	8005b2e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	8979      	ldrh	r1, [r7, #10]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fa2c 	bl	8005f84 <I2C_TransferConfig>
 8005b2c:	e00f      	b.n	8005b4e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	8979      	ldrh	r1, [r7, #10]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fa1b 	bl	8005f84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d19e      	bne.n	8005a96 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	6a39      	ldr	r1, [r7, #32]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f8ed 	bl	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e01a      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2220      	movs	r2, #32
 8005b72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <HAL_I2C_Master_Transmit+0x22c>)
 8005b80:	400b      	ands	r3, r1
 8005b82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	80002000 	.word	0x80002000
 8005bb0:	fe00e800 	.word	0xfe00e800

08005bb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d103      	bne.n	8005bd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d007      	beq.n	8005bf0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	619a      	str	r2, [r3, #24]
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0c:	e03b      	b.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8d6 	bl	8005dc4 <I2C_IsErrorOccurred>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e041      	b.n	8005ca6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d02d      	beq.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fd fbf7 	bl	800341c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d122      	bne.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d113      	bne.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e00f      	b.n	8005ca6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	bf0c      	ite	eq
 8005c96:	2301      	moveq	r3, #1
 8005c98:	2300      	movne	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d0b4      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cba:	e033      	b.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f87f 	bl	8005dc4 <I2C_IsErrorOccurred>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e031      	b.n	8005d34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d025      	beq.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd8:	f7fd fba0 	bl	800341c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11a      	bne.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d013      	beq.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d00:	f043 0220 	orr.w	r2, r3, #32
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e007      	b.n	8005d34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d1c4      	bne.n	8005cbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d48:	e02f      	b.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f838 	bl	8005dc4 <I2C_IsErrorOccurred>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e02d      	b.n	8005dba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fd fb5d 	bl	800341c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d11a      	bne.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d013      	beq.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e007      	b.n	8005dba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d1c8      	bne.n	8005d4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d068      	beq.n	8005ec2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2210      	movs	r2, #16
 8005df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005df8:	e049      	b.n	8005e8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d045      	beq.n	8005e8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fd fb0b 	bl	800341c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <I2C_IsErrorOccurred+0x54>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13a      	bne.n	8005e8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3a:	d121      	bne.n	8005e80 <I2C_IsErrorOccurred+0xbc>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e42:	d01d      	beq.n	8005e80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d01a      	beq.n	8005e80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e5a:	f7fd fadf 	bl	800341c <HAL_GetTick>
 8005e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e60:	e00e      	b.n	8005e80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e62:	f7fd fadb 	bl	800341c <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b19      	cmp	r3, #25
 8005e6e:	d907      	bls.n	8005e80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f043 0320 	orr.w	r3, r3, #32
 8005e76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e7e:	e006      	b.n	8005e8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d1e9      	bne.n	8005e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d003      	beq.n	8005ea4 <I2C_IsErrorOccurred+0xe0>
 8005e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0aa      	beq.n	8005dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d103      	bne.n	8005eb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	f043 0304 	orr.w	r3, r3, #4
 8005eba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f043 0302 	orr.w	r3, r3, #2
 8005f1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01c      	beq.n	8005f72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff fe3b 	bl	8005bb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <I2C_IsErrorOccurred+0x1bc>)
 8005f4a:	400b      	ands	r3, r1
 8005f4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3728      	adds	r7, #40	@ 0x28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	fe00e800 	.word	0xfe00e800

08005f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	817b      	strh	r3, [r7, #10]
 8005f92:	4613      	mov	r3, r2
 8005f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f9c:	7a7b      	ldrb	r3, [r7, #9]
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	0d5b      	lsrs	r3, r3, #21
 8005fbe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005fc2:	4b08      	ldr	r3, [pc, #32]	@ (8005fe4 <I2C_TransferConfig+0x60>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	ea02 0103 	and.w	r1, r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	03ff63ff 	.word	0x03ff63ff

08005fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d138      	bne.n	8006070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006008:	2302      	movs	r3, #2
 800600a:	e032      	b.n	8006072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	@ 0x24
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800603a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b085      	sub	sp, #20
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b20      	cmp	r3, #32
 8006092:	d139      	bne.n	8006108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800609e:	2302      	movs	r3, #2
 80060a0:	e033      	b.n	800610a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2224      	movs	r2, #36	@ 0x24
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006124:	4a0a      	ldr	r2, [pc, #40]	@ (8006150 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	6613      	str	r3, [r2, #96]	@ 0x60
 800612c:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800612e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006138:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	4905      	ldr	r1, [pc, #20]	@ (8006154 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4313      	orrs	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40021000 	.word	0x40021000
 8006154:	40010000 	.word	0x40010000

08006158 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0c0      	b.n	80062ec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f008 fab4 	bl	800e6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2203      	movs	r2, #3
 8006188:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f005 f844 	bl	800b21e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]
 800619a:	e03e      	b.n	800621a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800619c:	7bfa      	ldrb	r2, [r7, #15]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	3311      	adds	r3, #17
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	3310      	adds	r3, #16
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	440b      	add	r3, r1
 80061d2:	3313      	adds	r3, #19
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	440b      	add	r3, r1
 80061e6:	3320      	adds	r3, #32
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061ec:	7bfa      	ldrb	r2, [r7, #15]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	440b      	add	r3, r1
 80061fa:	3324      	adds	r3, #36	@ 0x24
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	440b      	add	r3, r1
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	3301      	adds	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	791b      	ldrb	r3, [r3, #4]
 800621e:	7bfa      	ldrb	r2, [r7, #15]
 8006220:	429a      	cmp	r2, r3
 8006222:	d3bb      	bcc.n	800619c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	e044      	b.n	80062b4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800622a:	7bfa      	ldrb	r2, [r7, #15]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	440b      	add	r3, r1
 8006238:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006240:	7bfa      	ldrb	r2, [r7, #15]
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	440b      	add	r3, r1
 800624e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006256:	7bfa      	ldrb	r2, [r7, #15]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	440b      	add	r3, r1
 8006264:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	440b      	add	r3, r1
 800627a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006282:	7bfa      	ldrb	r2, [r7, #15]
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	440b      	add	r3, r1
 8006290:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006298:	7bfa      	ldrb	r2, [r7, #15]
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	440b      	add	r3, r1
 80062a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	3301      	adds	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	791b      	ldrb	r3, [r3, #4]
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3b5      	bcc.n	800622a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3304      	adds	r3, #4
 80062c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80062ca:	f004 ffc3 	bl	800b254 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	7a9b      	ldrb	r3, [r3, #10]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d102      	bne.n	80062ea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 fbf6 	bl	8007ad6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_PCD_Start+0x16>
 8006306:	2302      	movs	r3, #2
 8006308:	e012      	b.n	8006330 <HAL_PCD_Start+0x3c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f004 ff6a 	bl	800b1f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f006 fd47 	bl	800cdb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f006 fd4c 	bl	800cde2 <USB_ReadInterrupts>
 800634a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 faee 	bl	8006938 <PCD_EP_ISR_Handler>

    return;
 800635c:	e110      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006364:	2b00      	cmp	r3, #0
 8006366:	d013      	beq.n	8006390 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800637a:	b292      	uxth	r2, r2
 800637c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f008 fa44 	bl	800e80e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006386:	2100      	movs	r1, #0
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f8fc 	bl	8006586 <HAL_PCD_SetAddress>

    return;
 800638e:	e0f7      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063ac:	b292      	uxth	r2, r2
 80063ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80063b2:	e0e5      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00c      	beq.n	80063d8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063d0:	b292      	uxth	r2, r2
 80063d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80063d6:	e0d3      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d034      	beq.n	800644c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0204 	bic.w	r2, r2, #4
 80063f4:	b292      	uxth	r2, r2
 80063f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0208 	bic.w	r2, r2, #8
 800640c:	b292      	uxth	r2, r2
 800640e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006418:	2b01      	cmp	r3, #1
 800641a:	d107      	bne.n	800642c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006424:	2100      	movs	r1, #0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fb7f 	bl	8007b2a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f008 fa27 	bl	800e880 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006444:	b292      	uxth	r2, r2
 8006446:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800644a:	e099      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006452:	2b00      	cmp	r3, #0
 8006454:	d027      	beq.n	80064a6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0208 	orr.w	r2, r2, #8
 8006468:	b292      	uxth	r2, r2
 800646a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006480:	b292      	uxth	r2, r2
 8006482:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800648e:	b29a      	uxth	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0204 	orr.w	r2, r2, #4
 8006498:	b292      	uxth	r2, r2
 800649a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f008 f9d4 	bl	800e84c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80064a4:	e06c      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d040      	beq.n	8006532 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064c2:	b292      	uxth	r2, r2
 80064c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d12b      	bne.n	800652a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0204 	orr.w	r2, r2, #4
 80064e4:	b292      	uxth	r2, r2
 80064e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0208 	orr.w	r2, r2, #8
 80064fc:	b292      	uxth	r2, r2
 80064fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006512:	b29b      	uxth	r3, r3
 8006514:	089b      	lsrs	r3, r3, #2
 8006516:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006520:	2101      	movs	r1, #1
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fb01 	bl	8007b2a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006528:	e02a      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f008 f98e 	bl	800e84c <HAL_PCD_SuspendCallback>
    return;
 8006530:	e026      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00f      	beq.n	800655c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006544:	b29a      	uxth	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800654e:	b292      	uxth	r2, r2
 8006550:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f008 f94c 	bl	800e7f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800655a:	e011      	b.n	8006580 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00c      	beq.n	8006580 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800656e:	b29a      	uxth	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006578:	b292      	uxth	r2, r2
 800657a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800657e:	bf00      	nop
  }
}
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_PCD_SetAddress+0x1a>
 800659c:	2302      	movs	r3, #2
 800659e:	e012      	b.n	80065c6 <HAL_PCD_SetAddress+0x40>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f006 fbe8 	bl	800cd8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	4608      	mov	r0, r1
 80065d8:	4611      	mov	r1, r2
 80065da:	461a      	mov	r2, r3
 80065dc:	4603      	mov	r3, r0
 80065de:	70fb      	strb	r3, [r7, #3]
 80065e0:	460b      	mov	r3, r1
 80065e2:	803b      	strh	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da0e      	bge.n	8006612 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 0207 	and.w	r2, r3, #7
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	3310      	adds	r3, #16
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4413      	add	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	705a      	strb	r2, [r3, #1]
 8006610:	e00e      	b.n	8006630 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	f003 0207 	and.w	r2, r3, #7
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800663c:	883b      	ldrh	r3, [r7, #0]
 800663e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	78ba      	ldrb	r2, [r7, #2]
 800664a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800664c:	78bb      	ldrb	r3, [r7, #2]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d102      	bne.n	8006658 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_PCD_EP_Open+0x98>
 8006662:	2302      	movs	r3, #2
 8006664:	e00e      	b.n	8006684 <HAL_PCD_EP_Open+0xb6>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	4618      	mov	r0, r3
 8006676:	f004 fe0b 	bl	800b290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006682:	7afb      	ldrb	r3, [r7, #11]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800669c:	2b00      	cmp	r3, #0
 800669e:	da0e      	bge.n	80066be <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	f003 0207 	and.w	r2, r3, #7
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	3310      	adds	r3, #16
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	705a      	strb	r2, [r3, #1]
 80066bc:	e00e      	b.n	80066dc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	f003 0207 	and.w	r2, r3, #7
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	4413      	add	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_PCD_EP_Close+0x6a>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e00e      	b.n	8006714 <HAL_PCD_EP_Close+0x88>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	4618      	mov	r0, r3
 8006706:	f005 faab 	bl	800bc60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	460b      	mov	r3, r1
 800672a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	f003 0207 	and.w	r2, r3, #7
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	b2da      	uxtb	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6979      	ldr	r1, [r7, #20]
 800676e:	4618      	mov	r0, r3
 8006770:	f005 fc63 	bl	800c03a <USB_EPStartXfer>

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	460b      	mov	r3, r1
 800678c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	f003 0207 	and.w	r2, r3, #7
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	3310      	adds	r3, #16
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2200      	movs	r2, #0
 80067c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2201      	movs	r2, #1
 80067c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	4618      	mov	r0, r3
 80067de:	f005 fc2c 	bl	800c03a <USB_EPStartXfer>

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	7912      	ldrb	r2, [r2, #4]
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e03e      	b.n	8006888 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800680a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800680e:	2b00      	cmp	r3, #0
 8006810:	da0e      	bge.n	8006830 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	f003 0207 	and.w	r2, r3, #7
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	3310      	adds	r3, #16
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	705a      	strb	r2, [r3, #1]
 800682e:	e00c      	b.n	800684a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_PCD_EP_SetStall+0x7e>
 8006866:	2302      	movs	r3, #2
 8006868:	e00e      	b.n	8006888 <HAL_PCD_EP_SetStall+0x9c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	f006 f98d 	bl	800cb98 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	7912      	ldrb	r2, [r2, #4]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d901      	bls.n	80068ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e040      	b.n	8006930 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da0e      	bge.n	80068d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	f003 0207 	and.w	r2, r3, #7
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	3310      	adds	r3, #16
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	705a      	strb	r2, [r3, #1]
 80068d2:	e00e      	b.n	80068f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f003 0207 	and.w	r2, r3, #7
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4413      	add	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_PCD_EP_ClrStall+0x82>
 800690e:	2302      	movs	r3, #2
 8006910:	e00e      	b.n	8006930 <HAL_PCD_EP_ClrStall+0xa0>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	4618      	mov	r0, r3
 8006922:	f006 f98a 	bl	800cc3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b092      	sub	sp, #72	@ 0x48
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006940:	e333      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800694a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800694c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006958:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 8108 	bne.w	8006b72 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006962:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d14c      	bne.n	8006a06 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697c:	813b      	strh	r3, [r7, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	893b      	ldrh	r3, [r7, #8]
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3310      	adds	r3, #16
 8006994:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80069be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	441a      	add	r2, r3
 80069c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80069cc:	2100      	movs	r1, #0
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f007 fef5 	bl	800e7be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7b1b      	ldrb	r3, [r3, #12]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 82e5 	beq.w	8006faa <PCD_EP_ISR_Handler+0x672>
 80069e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 82e0 	bne.w	8006faa <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7b1b      	ldrb	r3, [r3, #12]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	731a      	strb	r2, [r3, #12]
 8006a04:	e2d1      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a0c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006a16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d032      	beq.n	8006a86 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4413      	add	r3, r2
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f006 fa14 	bl	800ce88 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	817b      	strh	r3, [r7, #10]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	897a      	ldrh	r2, [r7, #10]
 8006a76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f007 fe70 	bl	800e764 <HAL_PCD_SetupStageCallback>
 8006a84:	e291      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a86:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f280 828d 	bge.w	8006faa <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	81fb      	strh	r3, [r7, #14]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	89fa      	ldrh	r2, [r7, #14]
 8006aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006aaa:	b292      	uxth	r2, r2
 8006aac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d019      	beq.n	8006b12 <PCD_EP_ISR_Handler+0x1da>
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d015      	beq.n	8006b12 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aec:	6959      	ldr	r1, [r3, #20]
 8006aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f006 f9c6 	bl	800ce88 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	441a      	add	r2, r3
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f007 fe3b 	bl	800e788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006b1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 8242 	bne.w	8006faa <PCD_EP_ISR_Handler+0x672>
 8006b26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b30:	f000 823b 	beq.w	8006faa <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b44:	81bb      	strh	r3, [r7, #12]
 8006b46:	89bb      	ldrh	r3, [r7, #12]
 8006b48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b4c:	81bb      	strh	r3, [r7, #12]
 8006b4e:	89bb      	ldrh	r3, [r7, #12]
 8006b50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b54:	81bb      	strh	r3, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	89bb      	ldrh	r3, [r7, #12]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]
 8006b70:	e21b      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006b84:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f280 80f1 	bge.w	8006d70 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006bb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bbc:	b292      	uxth	r2, r2
 8006bbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006bc0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd8:	7b1b      	ldrb	r3, [r3, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d123      	bne.n	8006c26 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006c06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 808b 	beq.w	8006d26 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c16:	6959      	ldr	r1, [r3, #20]
 8006c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c1a:	88da      	ldrh	r2, [r3, #6]
 8006c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c20:	f006 f932 	bl	800ce88 <USB_ReadPMA>
 8006c24:	e07f      	b.n	8006d26 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d109      	bne.n	8006c42 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c30:	461a      	mov	r2, r3
 8006c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9c6 	bl	8006fc6 <HAL_PCD_EP_DB_Receive>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c40:	e071      	b.n	8006d26 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d022      	beq.n	8006ce2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4413      	add	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006cc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d02c      	beq.n	8006d26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd2:	6959      	ldr	r1, [r3, #20]
 8006cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd6:	891a      	ldrh	r2, [r3, #8]
 8006cd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006cdc:	f006 f8d4 	bl	800ce88 <USB_ReadPMA>
 8006ce0:	e021      	b.n	8006d26 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006d0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d18:	6959      	ldr	r1, [r3, #20]
 8006d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1c:	895a      	ldrh	r2, [r3, #10]
 8006d1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d22:	f006 f8b1 	bl	800ce88 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d2e:	441a      	add	r2, r3
 8006d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d36:	695a      	ldr	r2, [r3, #20]
 8006d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d3c:	441a      	add	r2, r3
 8006d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <PCD_EP_ISR_Handler+0x41e>
 8006d4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d206      	bcs.n	8006d64 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f007 fd13 	bl	800e788 <HAL_PCD_DataOutStageCallback>
 8006d62:	e005      	b.n	8006d70 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f005 f965 	bl	800c03a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006d70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8117 	beq.w	8006faa <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006d7c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	3310      	adds	r3, #16
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dca:	78db      	ldrb	r3, [r3, #3]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	f040 80a1 	bne.w	8006f14 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dda:	7b1b      	ldrb	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8092 	beq.w	8006f06 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006de2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d046      	beq.n	8006e7a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d126      	bne.n	8006e42 <PCD_EP_ISR_Handler+0x50a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	00da      	lsls	r2, r3, #3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	e061      	b.n	8006f06 <PCD_EP_ISR_Handler+0x5ce>
 8006e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d15d      	bne.n	8006f06 <PCD_EP_ISR_Handler+0x5ce>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	00da      	lsls	r2, r3, #3
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2200      	movs	r2, #0
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e045      	b.n	8006f06 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d126      	bne.n	8006ed6 <PCD_EP_ISR_Handler+0x59e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	4413      	add	r3, r2
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	00da      	lsls	r2, r3, #3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e017      	b.n	8006f06 <PCD_EP_ISR_Handler+0x5ce>
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d113      	bne.n	8006f06 <PCD_EP_ISR_Handler+0x5ce>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	4413      	add	r3, r2
 8006eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	00da      	lsls	r2, r3, #3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	2200      	movs	r2, #0
 8006f04:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f007 fc56 	bl	800e7be <HAL_PCD_DataInStageCallback>
 8006f12:	e04a      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d13f      	bne.n	8006f9e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4413      	add	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	4413      	add	r3, r2
 8006f38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f42:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d906      	bls.n	8006f5c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006f54:	1ad2      	subs	r2, r2, r3
 8006f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f58:	619a      	str	r2, [r3, #24]
 8006f5a:	e002      	b.n	8006f62 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5e:	2200      	movs	r2, #0
 8006f60:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f007 fc24 	bl	800e7be <HAL_PCD_DataInStageCallback>
 8006f76:	e018      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006f7e:	441a      	add	r2, r3
 8006f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f82:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f86:	69da      	ldr	r2, [r3, #28]
 8006f88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006f8a:	441a      	add	r2, r3
 8006f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f96:	4618      	mov	r0, r3
 8006f98:	f005 f84f 	bl	800c03a <USB_EPStartXfer>
 8006f9c:	e005      	b.n	8006faa <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006f9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f917 	bl	80071d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	b21b      	sxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f6ff acc3 	blt.w	8006942 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3748      	adds	r7, #72	@ 0x48
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b088      	sub	sp, #32
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d07c      	beq.n	80070d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007002:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	8b7b      	ldrh	r3, [r7, #26]
 800700a:	429a      	cmp	r2, r3
 800700c:	d306      	bcc.n	800701c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	8b7b      	ldrh	r3, [r7, #26]
 8007014:	1ad2      	subs	r2, r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	619a      	str	r2, [r3, #24]
 800701a:	e002      	b.n	8007022 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2200      	movs	r2, #0
 8007020:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d123      	bne.n	8007072 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007044:	833b      	strh	r3, [r7, #24]
 8007046:	8b3b      	ldrh	r3, [r7, #24]
 8007048:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800704c:	833b      	strh	r3, [r7, #24]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	441a      	add	r2, r3
 800705c:	8b3b      	ldrh	r3, [r7, #24]
 800705e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800706a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706e:	b29b      	uxth	r3, r3
 8007070:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01f      	beq.n	80070bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007096:	82fb      	strh	r3, [r7, #22]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	8afb      	ldrh	r3, [r7, #22]
 80070a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070bc:	8b7b      	ldrh	r3, [r7, #26]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8085 	beq.w	80071ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	6959      	ldr	r1, [r3, #20]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	891a      	ldrh	r2, [r3, #8]
 80070d0:	8b7b      	ldrh	r3, [r7, #26]
 80070d2:	f005 fed9 	bl	800ce88 <USB_ReadPMA>
 80070d6:	e07a      	b.n	80071ce <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4413      	add	r3, r2
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	8b7b      	ldrh	r3, [r7, #26]
 8007104:	429a      	cmp	r2, r3
 8007106:	d306      	bcc.n	8007116 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	8b7b      	ldrh	r3, [r7, #26]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	619a      	str	r2, [r3, #24]
 8007114:	e002      	b.n	800711c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2200      	movs	r2, #0
 800711a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d123      	bne.n	800716c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	83fb      	strh	r3, [r7, #30]
 8007140:	8bfb      	ldrh	r3, [r7, #30]
 8007142:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007146:	83fb      	strh	r3, [r7, #30]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	8bfb      	ldrh	r3, [r7, #30]
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11f      	bne.n	80071b6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800718c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007190:	83bb      	strh	r3, [r7, #28]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	441a      	add	r2, r3
 80071a0:	8bbb      	ldrh	r3, [r7, #28]
 80071a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80071b6:	8b7b      	ldrh	r3, [r7, #26]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6959      	ldr	r1, [r3, #20]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	895a      	ldrh	r2, [r3, #10]
 80071c8:	8b7b      	ldrh	r3, [r7, #26]
 80071ca:	f005 fe5d 	bl	800ce88 <USB_ReadPMA>
    }
  }

  return count;
 80071ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b0a6      	sub	sp, #152	@ 0x98
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 81f7 	beq.w	80075e0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	4413      	add	r3, r2
 800720c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007216:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007222:	429a      	cmp	r2, r3
 8007224:	d907      	bls.n	8007236 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	619a      	str	r2, [r3, #24]
 8007234:	e002      	b.n	800723c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 80e1 	bne.w	8007408 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d126      	bne.n	800729c <HAL_PCD_EP_DB_Transmit+0xc4>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	633b      	str	r3, [r7, #48]	@ 0x30
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800725c:	b29b      	uxth	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	4413      	add	r3, r2
 8007264:	633b      	str	r3, [r7, #48]	@ 0x30
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	00da      	lsls	r2, r3, #3
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	4413      	add	r3, r2
 8007270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007280:	b29a      	uxth	r2, r3
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007294:	b29a      	uxth	r2, r3
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e01a      	b.n	80072d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d116      	bne.n	80072d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b8:	4413      	add	r3, r2
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	00da      	lsls	r2, r3, #3
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	4413      	add	r3, r2
 80072c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	2200      	movs	r2, #0
 80072d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d126      	bne.n	800732e <HAL_PCD_EP_DB_Transmit+0x156>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	4413      	add	r3, r2
 80072f6:	623b      	str	r3, [r7, #32]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	00da      	lsls	r2, r3, #3
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	4413      	add	r3, r2
 8007302:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007312:	b29a      	uxth	r2, r3
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007326:	b29a      	uxth	r2, r3
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	e017      	b.n	800735e <HAL_PCD_EP_DB_Transmit+0x186>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d113      	bne.n	800735e <HAL_PCD_EP_DB_Transmit+0x186>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007344:	4413      	add	r3, r2
 8007346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	00da      	lsls	r2, r3, #3
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	4413      	add	r3, r2
 8007352:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	2200      	movs	r2, #0
 800735c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d123      	bne.n	80073ae <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800737c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007380:	837b      	strh	r3, [r7, #26]
 8007382:	8b7b      	ldrh	r3, [r7, #26]
 8007384:	f083 0320 	eor.w	r3, r3, #32
 8007388:	837b      	strh	r3, [r7, #26]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	441a      	add	r2, r3
 8007398:	8b7b      	ldrh	r3, [r7, #26]
 800739a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800739e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	4619      	mov	r1, r3
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f007 fa02 	bl	800e7be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01f      	beq.n	8007404 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073de:	833b      	strh	r3, [r7, #24]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	8b3b      	ldrh	r3, [r7, #24]
 80073f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e31f      	b.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d021      	beq.n	8007456 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800744a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800744e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007452:	b29b      	uxth	r3, r3
 8007454:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 82ca 	bne.w	80079f6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	695a      	ldr	r2, [r3, #20]
 8007466:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800746a:	441a      	add	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007478:	441a      	add	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6a1a      	ldr	r2, [r3, #32]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	429a      	cmp	r2, r3
 8007488:	d309      	bcc.n	800749e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	621a      	str	r2, [r3, #32]
 800749c:	e015      	b.n	80074ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d107      	bne.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80074a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80074b4:	e009      	b.n	80074ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d15f      	bne.n	8007592 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e6:	4413      	add	r3, r2
 80074e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00da      	lsls	r2, r3, #3
 80074f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f2:	4413      	add	r3, r2
 80074f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007504:	b29a      	uxth	r2, r3
 8007506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <HAL_PCD_EP_DB_Transmit+0x34e>
 8007510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751e:	b29a      	uxth	r2, r3
 8007520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	e051      	b.n	80075ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007528:	2b3e      	cmp	r3, #62	@ 0x3e
 800752a:	d816      	bhi.n	800755a <HAL_PCD_EP_DB_Transmit+0x382>
 800752c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	653b      	str	r3, [r7, #80]	@ 0x50
 8007532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_PCD_EP_DB_Transmit+0x36a>
 800753c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800753e:	3301      	adds	r3, #1
 8007540:	653b      	str	r3, [r7, #80]	@ 0x50
 8007542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29a      	uxth	r2, r3
 8007548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800754a:	b29b      	uxth	r3, r3
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	b29b      	uxth	r3, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	b29a      	uxth	r2, r3
 8007554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e037      	b.n	80075ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800755a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <HAL_PCD_EP_DB_Transmit+0x398>
 800756a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800756c:	3b01      	subs	r3, #1
 800756e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007578:	b29b      	uxth	r3, r3
 800757a:	029b      	lsls	r3, r3, #10
 800757c:	b29b      	uxth	r3, r3
 800757e:	4313      	orrs	r3, r2
 8007580:	b29b      	uxth	r3, r3
 8007582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758a:	b29a      	uxth	r2, r3
 800758c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	e01b      	b.n	80075ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d117      	bne.n	80075ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ae:	4413      	add	r3, r2
 80075b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	00da      	lsls	r2, r3, #3
 80075b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ba:	4413      	add	r3, r2
 80075bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6959      	ldr	r1, [r3, #20]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	891a      	ldrh	r2, [r3, #8]
 80075d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f005 fc12 	bl	800ce02 <USB_WritePMA>
 80075de:	e20a      	b.n	80079f6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	4413      	add	r3, r2
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007604:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007610:	429a      	cmp	r2, r3
 8007612:	d307      	bcc.n	8007624 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	619a      	str	r2, [r3, #24]
 8007622:	e002      	b.n	800762a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 80f6 	bne.w	8007820 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d126      	bne.n	800768a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	677b      	str	r3, [r7, #116]	@ 0x74
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007650:	4413      	add	r3, r2
 8007652:	677b      	str	r3, [r7, #116]	@ 0x74
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	00da      	lsls	r2, r3, #3
 800765a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800765c:	4413      	add	r3, r2
 800765e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007662:	673b      	str	r3, [r7, #112]	@ 0x70
 8007664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800766e:	b29a      	uxth	r2, r3
 8007670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007682:	b29a      	uxth	r2, r3
 8007684:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e01a      	b.n	80076c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d116      	bne.n	80076c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076a6:	4413      	add	r3, r2
 80076a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	00da      	lsls	r2, r3, #3
 80076b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076bc:	2200      	movs	r2, #0
 80076be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d12f      	bne.n	8007730 <HAL_PCD_EP_DB_Transmit+0x558>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076e8:	4413      	add	r3, r2
 80076ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	00da      	lsls	r2, r3, #3
 80076f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007702:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800770e:	b29a      	uxth	r2, r3
 8007710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007714:	801a      	strh	r2, [r3, #0]
 8007716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007726:	b29a      	uxth	r2, r3
 8007728:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e01c      	b.n	800776a <HAL_PCD_EP_DB_Transmit+0x592>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d118      	bne.n	800776a <HAL_PCD_EP_DB_Transmit+0x592>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007740:	b29b      	uxth	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007748:	4413      	add	r3, r2
 800774a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	00da      	lsls	r2, r3, #3
 8007754:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007758:	4413      	add	r3, r2
 800775a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800775e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007766:	2200      	movs	r2, #0
 8007768:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	78db      	ldrb	r3, [r3, #3]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d127      	bne.n	80077c2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800778c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007790:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007794:	f083 0320 	eor.w	r3, r3, #32
 8007798:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	441a      	add	r2, r3
 80077aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80077ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077be:	b29b      	uxth	r3, r3
 80077c0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f006 fff8 	bl	800e7be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d121      	bne.n	800781c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	441a      	add	r2, r3
 8007804:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800780c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007818:	b29b      	uxth	r3, r3
 800781a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e113      	b.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d121      	bne.n	800786e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007844:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	441a      	add	r2, r3
 8007856:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800785a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800785e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007862:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786a:	b29b      	uxth	r3, r3
 800786c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007874:	2b01      	cmp	r3, #1
 8007876:	f040 80be 	bne.w	80079f6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007882:	441a      	add	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007890:	441a      	add	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d309      	bcc.n	80078b6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	6a1a      	ldr	r2, [r3, #32]
 80078ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	621a      	str	r2, [r3, #32]
 80078b4:	e015      	b.n	80078e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80078be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80078cc:	e009      	b.n	80078e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d15f      	bne.n	80079b0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007904:	4413      	add	r3, r2
 8007906:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	00da      	lsls	r2, r3, #3
 800790e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007910:	4413      	add	r3, r2
 8007912:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007916:	667b      	str	r3, [r7, #100]	@ 0x64
 8007918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007922:	b29a      	uxth	r2, r3
 8007924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <HAL_PCD_EP_DB_Transmit+0x76c>
 800792e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793c:	b29a      	uxth	r2, r3
 800793e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007940:	801a      	strh	r2, [r3, #0]
 8007942:	e04e      	b.n	80079e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007946:	2b3e      	cmp	r3, #62	@ 0x3e
 8007948:	d816      	bhi.n	8007978 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800794a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_PCD_EP_DB_Transmit+0x788>
 800795a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800795c:	3301      	adds	r3, #1
 800795e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29a      	uxth	r2, r3
 8007966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007968:	b29b      	uxth	r3, r3
 800796a:	029b      	lsls	r3, r3, #10
 800796c:	b29b      	uxth	r3, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	b29a      	uxth	r2, r3
 8007972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	e034      	b.n	80079e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	663b      	str	r3, [r7, #96]	@ 0x60
 800797e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007980:	f003 031f 	and.w	r3, r3, #31
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800798a:	3b01      	subs	r3, #1
 800798c:	663b      	str	r3, [r7, #96]	@ 0x60
 800798e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29a      	uxth	r2, r3
 8007994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007996:	b29b      	uxth	r3, r3
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	b29b      	uxth	r3, r3
 800799c:	4313      	orrs	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ac:	801a      	strh	r2, [r3, #0]
 80079ae:	e018      	b.n	80079e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d114      	bne.n	80079e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079c6:	4413      	add	r3, r2
 80079c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	00da      	lsls	r2, r3, #3
 80079d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d2:	4413      	add	r3, r2
 80079d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6959      	ldr	r1, [r3, #20]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	895a      	ldrh	r2, [r3, #10]
 80079ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f005 fa06 	bl	800ce02 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a10:	82fb      	strh	r3, [r7, #22]
 8007a12:	8afb      	ldrh	r3, [r7, #22]
 8007a14:	f083 0310 	eor.w	r3, r3, #16
 8007a18:	82fb      	strh	r3, [r7, #22]
 8007a1a:	8afb      	ldrh	r3, [r7, #22]
 8007a1c:	f083 0320 	eor.w	r3, r3, #32
 8007a20:	82fb      	strh	r3, [r7, #22]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	441a      	add	r2, r3
 8007a30:	8afb      	ldrh	r3, [r7, #22]
 8007a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3798      	adds	r7, #152	@ 0x98
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	817b      	strh	r3, [r7, #10]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007a62:	897b      	ldrh	r3, [r7, #10]
 8007a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a6e:	897b      	ldrh	r3, [r7, #10]
 8007a70:	f003 0207 	and.w	r2, r3, #7
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e009      	b.n	8007a9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a86:	897a      	ldrh	r2, [r7, #10]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007a9a:	893b      	ldrh	r3, [r7, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d107      	bne.n	8007ab0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	80da      	strh	r2, [r3, #6]
 8007aae:	e00b      	b.n	8007ac8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f043 0302 	orr.w	r3, r3, #2
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d141      	bne.n	8007bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b52:	4b4b      	ldr	r3, [pc, #300]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b5e:	d131      	bne.n	8007bc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b60:	4b47      	ldr	r3, [pc, #284]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b66:	4a46      	ldr	r2, [pc, #280]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b70:	4b43      	ldr	r3, [pc, #268]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b78:	4a41      	ldr	r2, [pc, #260]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b80:	4b40      	ldr	r3, [pc, #256]	@ (8007c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2232      	movs	r2, #50	@ 0x32
 8007b86:	fb02 f303 	mul.w	r3, r2, r3
 8007b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	0c9b      	lsrs	r3, r3, #18
 8007b92:	3301      	adds	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b96:	e002      	b.n	8007b9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b9e:	4b38      	ldr	r3, [pc, #224]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007baa:	d102      	bne.n	8007bb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f2      	bne.n	8007b98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007bb2:	4b33      	ldr	r3, [pc, #204]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bbe:	d158      	bne.n	8007c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e057      	b.n	8007c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bca:	4a2d      	ldr	r2, [pc, #180]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007bd4:	e04d      	b.n	8007c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bdc:	d141      	bne.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bde:	4b28      	ldr	r3, [pc, #160]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bea:	d131      	bne.n	8007c50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf2:	4a23      	ldr	r2, [pc, #140]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bfc:	4b20      	ldr	r3, [pc, #128]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c04:	4a1e      	ldr	r2, [pc, #120]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2232      	movs	r2, #50	@ 0x32
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c18:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1c:	0c9b      	lsrs	r3, r3, #18
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c22:	e002      	b.n	8007c2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c2a:	4b15      	ldr	r3, [pc, #84]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c36:	d102      	bne.n	8007c3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1f2      	bne.n	8007c24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c3e:	4b10      	ldr	r3, [pc, #64]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c4a:	d112      	bne.n	8007c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e011      	b.n	8007c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c50:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c56:	4a0a      	ldr	r2, [pc, #40]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c60:	e007      	b.n	8007c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c62:	4b07      	ldr	r3, [pc, #28]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c6a:	4a05      	ldr	r2, [pc, #20]	@ (8007c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	40007000 	.word	0x40007000
 8007c84:	20000004 	.word	0x20000004
 8007c88:	431bde83 	.word	0x431bde83

08007c8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c90:	4b05      	ldr	r3, [pc, #20]	@ (8007ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4a04      	ldr	r2, [pc, #16]	@ (8007ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c9a:	6093      	str	r3, [r2, #8]
}
 8007c9c:	bf00      	nop
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40007000 	.word	0x40007000

08007cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e2fe      	b.n	80082bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d075      	beq.n	8007db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cca:	4b97      	ldr	r3, [pc, #604]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 030c 	and.w	r3, r3, #12
 8007cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cd4:	4b94      	ldr	r3, [pc, #592]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b0c      	cmp	r3, #12
 8007ce2:	d102      	bne.n	8007cea <HAL_RCC_OscConfig+0x3e>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d002      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x44>
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d10b      	bne.n	8007d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d05b      	beq.n	8007db4 <HAL_RCC_OscConfig+0x108>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d157      	bne.n	8007db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e2d9      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d10:	d106      	bne.n	8007d20 <HAL_RCC_OscConfig+0x74>
 8007d12:	4b85      	ldr	r3, [pc, #532]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a84      	ldr	r2, [pc, #528]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e01d      	b.n	8007d5c <HAL_RCC_OscConfig+0xb0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d28:	d10c      	bne.n	8007d44 <HAL_RCC_OscConfig+0x98>
 8007d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	4b7c      	ldr	r3, [pc, #496]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	e00b      	b.n	8007d5c <HAL_RCC_OscConfig+0xb0>
 8007d44:	4b78      	ldr	r3, [pc, #480]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a77      	ldr	r2, [pc, #476]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	4b75      	ldr	r3, [pc, #468]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a74      	ldr	r2, [pc, #464]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d013      	beq.n	8007d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fb fb5a 	bl	800341c <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d6c:	f7fb fb56 	bl	800341c <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b64      	cmp	r3, #100	@ 0x64
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e29e      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0xc0>
 8007d8a:	e014      	b.n	8007db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fb fb46 	bl	800341c <HAL_GetTick>
 8007d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d94:	f7fb fb42 	bl	800341c <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b64      	cmp	r3, #100	@ 0x64
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e28a      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007da6:	4b60      	ldr	r3, [pc, #384]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <HAL_RCC_OscConfig+0xe8>
 8007db2:	e000      	b.n	8007db6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d075      	beq.n	8007eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dc2:	4b59      	ldr	r3, [pc, #356]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 030c 	and.w	r3, r3, #12
 8007dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dcc:	4b56      	ldr	r3, [pc, #344]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b0c      	cmp	r3, #12
 8007dda:	d102      	bne.n	8007de2 <HAL_RCC_OscConfig+0x136>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d002      	beq.n	8007de8 <HAL_RCC_OscConfig+0x13c>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d11f      	bne.n	8007e28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007de8:	4b4f      	ldr	r3, [pc, #316]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_OscConfig+0x154>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e25d      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e00:	4b49      	ldr	r3, [pc, #292]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	061b      	lsls	r3, r3, #24
 8007e0e:	4946      	ldr	r1, [pc, #280]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e14:	4b45      	ldr	r3, [pc, #276]	@ (8007f2c <HAL_RCC_OscConfig+0x280>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fb fab3 	bl	8003384 <HAL_InitTick>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d043      	beq.n	8007eac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e249      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d023      	beq.n	8007e78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e30:	4b3d      	ldr	r3, [pc, #244]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a3c      	ldr	r2, [pc, #240]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3c:	f7fb faee 	bl	800341c <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e44:	f7fb faea 	bl	800341c <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e232      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e56:	4b34      	ldr	r3, [pc, #208]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e62:	4b31      	ldr	r3, [pc, #196]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	061b      	lsls	r3, r3, #24
 8007e70:	492d      	ldr	r1, [pc, #180]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	604b      	str	r3, [r1, #4]
 8007e76:	e01a      	b.n	8007eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e78:	4b2b      	ldr	r3, [pc, #172]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fb faca 	bl	800341c <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e8c:	f7fb fac6 	bl	800341c <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e20e      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e9e:	4b22      	ldr	r3, [pc, #136]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x1e0>
 8007eaa:	e000      	b.n	8007eae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d041      	beq.n	8007f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01c      	beq.n	8007efc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ec2:	4b19      	ldr	r3, [pc, #100]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ec8:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed2:	f7fb faa3 	bl	800341c <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eda:	f7fb fa9f 	bl	800341c <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1e7      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007eec:	4b0e      	ldr	r3, [pc, #56]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0ef      	beq.n	8007eda <HAL_RCC_OscConfig+0x22e>
 8007efa:	e020      	b.n	8007f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f02:	4a09      	ldr	r2, [pc, #36]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f0c:	f7fb fa86 	bl	800341c <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f12:	e00d      	b.n	8007f30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f14:	f7fb fa82 	bl	800341c <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d906      	bls.n	8007f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e1ca      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
 8007f26:	bf00      	nop
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f30:	4b8c      	ldr	r3, [pc, #560]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1ea      	bne.n	8007f14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80a6 	beq.w	8008098 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f50:	4b84      	ldr	r3, [pc, #528]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_RCC_OscConfig+0x2b4>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <HAL_RCC_OscConfig+0x2b6>
 8007f60:	2300      	movs	r3, #0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f66:	4b7f      	ldr	r3, [pc, #508]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f72:	4b7c      	ldr	r3, [pc, #496]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f82:	4b79      	ldr	r3, [pc, #484]	@ (8008168 <HAL_RCC_OscConfig+0x4bc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d118      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f8e:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <HAL_RCC_OscConfig+0x4bc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a75      	ldr	r2, [pc, #468]	@ (8008168 <HAL_RCC_OscConfig+0x4bc>)
 8007f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f9a:	f7fb fa3f 	bl	800341c <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fa2:	f7fb fa3b 	bl	800341c <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e183      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8008168 <HAL_RCC_OscConfig+0x4bc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d108      	bne.n	8007fda <HAL_RCC_OscConfig+0x32e>
 8007fc8:	4b66      	ldr	r3, [pc, #408]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fce:	4a65      	ldr	r2, [pc, #404]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fd8:	e024      	b.n	8008024 <HAL_RCC_OscConfig+0x378>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d110      	bne.n	8008004 <HAL_RCC_OscConfig+0x358>
 8007fe2:	4b60      	ldr	r3, [pc, #384]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007fea:	f043 0304 	orr.w	r3, r3, #4
 8007fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008002:	e00f      	b.n	8008024 <HAL_RCC_OscConfig+0x378>
 8008004:	4b57      	ldr	r3, [pc, #348]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800a:	4a56      	ldr	r2, [pc, #344]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008014:	4b53      	ldr	r3, [pc, #332]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801a:	4a52      	ldr	r2, [pc, #328]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 800801c:	f023 0304 	bic.w	r3, r3, #4
 8008020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d016      	beq.n	800805a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800802c:	f7fb f9f6 	bl	800341c <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008032:	e00a      	b.n	800804a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008034:	f7fb f9f2 	bl	800341c <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008042:	4293      	cmp	r3, r2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e138      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800804a:	4b46      	ldr	r3, [pc, #280]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 800804c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0ed      	beq.n	8008034 <HAL_RCC_OscConfig+0x388>
 8008058:	e015      	b.n	8008086 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800805a:	f7fb f9df 	bl	800341c <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008060:	e00a      	b.n	8008078 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008062:	f7fb f9db 	bl	800341c <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008070:	4293      	cmp	r3, r2
 8008072:	d901      	bls.n	8008078 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e121      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008078:	4b3a      	ldr	r3, [pc, #232]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1ed      	bne.n	8008062 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008086:	7ffb      	ldrb	r3, [r7, #31]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d105      	bne.n	8008098 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800808c:	4b35      	ldr	r3, [pc, #212]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 800808e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008090:	4a34      	ldr	r2, [pc, #208]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8008092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008096:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d03c      	beq.n	800811e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01c      	beq.n	80080e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 80080ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080bc:	f7fb f9ae 	bl	800341c <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080c4:	f7fb f9aa 	bl	800341c <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e0f2      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080d6:	4b23      	ldr	r3, [pc, #140]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 80080d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ef      	beq.n	80080c4 <HAL_RCC_OscConfig+0x418>
 80080e4:	e01b      	b.n	800811e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 80080e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 80080ee:	f023 0301 	bic.w	r3, r3, #1
 80080f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f6:	f7fb f991 	bl	800341c <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080fc:	e008      	b.n	8008110 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080fe:	f7fb f98d 	bl	800341c <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e0d5      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008110:	4b14      	ldr	r3, [pc, #80]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8008112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1ef      	bne.n	80080fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80c9 	beq.w	80082ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008128:	4b0e      	ldr	r3, [pc, #56]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 030c 	and.w	r3, r3, #12
 8008130:	2b0c      	cmp	r3, #12
 8008132:	f000 8083 	beq.w	800823c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d15e      	bne.n	80081fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800813e:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a08      	ldr	r2, [pc, #32]	@ (8008164 <HAL_RCC_OscConfig+0x4b8>)
 8008144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814a:	f7fb f967 	bl	800341c <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008150:	e00c      	b.n	800816c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008152:	f7fb f963 	bl	800341c <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d905      	bls.n	800816c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e0ab      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
 8008164:	40021000 	.word	0x40021000
 8008168:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800816c:	4b55      	ldr	r3, [pc, #340]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1ec      	bne.n	8008152 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008178:	4b52      	ldr	r3, [pc, #328]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	4b52      	ldr	r3, [pc, #328]	@ (80082c8 <HAL_RCC_OscConfig+0x61c>)
 800817e:	4013      	ands	r3, r2
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6a11      	ldr	r1, [r2, #32]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008188:	3a01      	subs	r2, #1
 800818a:	0112      	lsls	r2, r2, #4
 800818c:	4311      	orrs	r1, r2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008192:	0212      	lsls	r2, r2, #8
 8008194:	4311      	orrs	r1, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800819a:	0852      	lsrs	r2, r2, #1
 800819c:	3a01      	subs	r2, #1
 800819e:	0552      	lsls	r2, r2, #21
 80081a0:	4311      	orrs	r1, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80081a6:	0852      	lsrs	r2, r2, #1
 80081a8:	3a01      	subs	r2, #1
 80081aa:	0652      	lsls	r2, r2, #25
 80081ac:	4311      	orrs	r1, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80081b2:	06d2      	lsls	r2, r2, #27
 80081b4:	430a      	orrs	r2, r1
 80081b6:	4943      	ldr	r1, [pc, #268]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081bc:	4b41      	ldr	r3, [pc, #260]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a40      	ldr	r2, [pc, #256]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081c8:	4b3e      	ldr	r3, [pc, #248]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4a3d      	ldr	r2, [pc, #244]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d4:	f7fb f922 	bl	800341c <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081dc:	f7fb f91e 	bl	800341c <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e066      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081ee:	4b35      	ldr	r3, [pc, #212]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0x530>
 80081fa:	e05e      	b.n	80082ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081fc:	4b31      	ldr	r3, [pc, #196]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a30      	ldr	r2, [pc, #192]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 8008202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008208:	f7fb f908 	bl	800341c <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008210:	f7fb f904 	bl	800341c <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e04c      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008222:	4b28      	ldr	r3, [pc, #160]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800822e:	4b25      	ldr	r3, [pc, #148]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	4924      	ldr	r1, [pc, #144]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 8008234:	4b25      	ldr	r3, [pc, #148]	@ (80082cc <HAL_RCC_OscConfig+0x620>)
 8008236:	4013      	ands	r3, r2
 8008238:	60cb      	str	r3, [r1, #12]
 800823a:	e03e      	b.n	80082ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e039      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008248:	4b1e      	ldr	r3, [pc, #120]	@ (80082c4 <HAL_RCC_OscConfig+0x618>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f003 0203 	and.w	r2, r3, #3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	429a      	cmp	r2, r3
 800825a:	d12c      	bne.n	80082b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008266:	3b01      	subs	r3, #1
 8008268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800826a:	429a      	cmp	r2, r3
 800826c:	d123      	bne.n	80082b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008278:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800827a:	429a      	cmp	r2, r3
 800827c:	d11b      	bne.n	80082b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800828a:	429a      	cmp	r2, r3
 800828c:	d113      	bne.n	80082b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	3b01      	subs	r3, #1
 800829c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800829e:	429a      	cmp	r2, r3
 80082a0:	d109      	bne.n	80082b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	3b01      	subs	r3, #1
 80082b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d001      	beq.n	80082ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40021000 	.word	0x40021000
 80082c8:	019f800c 	.word	0x019f800c
 80082cc:	feeefffc 	.word	0xfeeefffc

080082d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e11e      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082e8:	4b91      	ldr	r3, [pc, #580]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d910      	bls.n	8008318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f6:	4b8e      	ldr	r3, [pc, #568]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f023 020f 	bic.w	r2, r3, #15
 80082fe:	498c      	ldr	r1, [pc, #560]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	4313      	orrs	r3, r2
 8008304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008306:	4b8a      	ldr	r3, [pc, #552]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e106      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d073      	beq.n	800840c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b03      	cmp	r3, #3
 800832a:	d129      	bne.n	8008380 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800832c:	4b81      	ldr	r3, [pc, #516]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e0f4      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800833c:	f000 f99e 	bl	800867c <RCC_GetSysClockFreqFromPLLSource>
 8008340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4a7c      	ldr	r2, [pc, #496]	@ (8008538 <HAL_RCC_ClockConfig+0x268>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d93f      	bls.n	80083ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800834a:	4b7a      	ldr	r3, [pc, #488]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800835e:	2b00      	cmp	r3, #0
 8008360:	d033      	beq.n	80083ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008366:	2b00      	cmp	r3, #0
 8008368:	d12f      	bne.n	80083ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800836a:	4b72      	ldr	r3, [pc, #456]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008372:	4a70      	ldr	r2, [pc, #448]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 8008374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800837a:	2380      	movs	r3, #128	@ 0x80
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e024      	b.n	80083ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d107      	bne.n	8008398 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008388:	4b6a      	ldr	r3, [pc, #424]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0c6      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008398:	4b66      	ldr	r3, [pc, #408]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0be      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80083a8:	f000 f8ce 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 80083ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4a61      	ldr	r2, [pc, #388]	@ (8008538 <HAL_RCC_ClockConfig+0x268>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d909      	bls.n	80083ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083be:	4a5d      	ldr	r2, [pc, #372]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80083c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80083c6:	2380      	movs	r3, #128	@ 0x80
 80083c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083ca:	4b5a      	ldr	r3, [pc, #360]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f023 0203 	bic.w	r2, r3, #3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4957      	ldr	r1, [pc, #348]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083dc:	f7fb f81e 	bl	800341c <HAL_GetTick>
 80083e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e2:	e00a      	b.n	80083fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083e4:	f7fb f81a 	bl	800341c <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e095      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 020c 	and.w	r2, r3, #12
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	429a      	cmp	r2, r3
 800840a:	d1eb      	bne.n	80083e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d023      	beq.n	8008460 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008424:	4b43      	ldr	r3, [pc, #268]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4a42      	ldr	r2, [pc, #264]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800842a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800842e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800843c:	4b3d      	ldr	r3, [pc, #244]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008444:	4a3b      	ldr	r2, [pc, #236]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 8008446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800844a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800844c:	4b39      	ldr	r3, [pc, #228]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	4936      	ldr	r1, [pc, #216]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800845a:	4313      	orrs	r3, r2
 800845c:	608b      	str	r3, [r1, #8]
 800845e:	e008      	b.n	8008472 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b80      	cmp	r3, #128	@ 0x80
 8008464:	d105      	bne.n	8008472 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008466:	4b33      	ldr	r3, [pc, #204]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	4a32      	ldr	r2, [pc, #200]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 800846c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008470:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008472:	4b2f      	ldr	r3, [pc, #188]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	429a      	cmp	r2, r3
 800847e:	d21d      	bcs.n	80084bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008480:	4b2b      	ldr	r3, [pc, #172]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f023 020f 	bic.w	r2, r3, #15
 8008488:	4929      	ldr	r1, [pc, #164]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	4313      	orrs	r3, r2
 800848e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008490:	f7fa ffc4 	bl	800341c <HAL_GetTick>
 8008494:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008496:	e00a      	b.n	80084ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008498:	f7fa ffc0 	bl	800341c <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e03b      	b.n	8008526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ae:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <HAL_RCC_ClockConfig+0x260>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d1ed      	bne.n	8008498 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d008      	beq.n	80084da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	4917      	ldr	r1, [pc, #92]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084e6:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	490f      	ldr	r1, [pc, #60]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084fa:	f000 f825 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 80084fe:	4602      	mov	r2, r0
 8008500:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <HAL_RCC_ClockConfig+0x264>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	490c      	ldr	r1, [pc, #48]	@ (800853c <HAL_RCC_ClockConfig+0x26c>)
 800850c:	5ccb      	ldrb	r3, [r1, r3]
 800850e:	f003 031f 	and.w	r3, r3, #31
 8008512:	fa22 f303 	lsr.w	r3, r2, r3
 8008516:	4a0a      	ldr	r2, [pc, #40]	@ (8008540 <HAL_RCC_ClockConfig+0x270>)
 8008518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800851a:	4b0a      	ldr	r3, [pc, #40]	@ (8008544 <HAL_RCC_ClockConfig+0x274>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7fa ff30 	bl	8003384 <HAL_InitTick>
 8008524:	4603      	mov	r3, r0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40022000 	.word	0x40022000
 8008534:	40021000 	.word	0x40021000
 8008538:	04c4b400 	.word	0x04c4b400
 800853c:	08010e54 	.word	0x08010e54
 8008540:	20000004 	.word	0x20000004
 8008544:	20000008 	.word	0x20000008

08008548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800854e:	4b2c      	ldr	r3, [pc, #176]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 030c 	and.w	r3, r3, #12
 8008556:	2b04      	cmp	r3, #4
 8008558:	d102      	bne.n	8008560 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800855a:	4b2a      	ldr	r3, [pc, #168]	@ (8008604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	e047      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008560:	4b27      	ldr	r3, [pc, #156]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 030c 	and.w	r3, r3, #12
 8008568:	2b08      	cmp	r3, #8
 800856a:	d102      	bne.n	8008572 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800856c:	4b26      	ldr	r3, [pc, #152]	@ (8008608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	e03e      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008572:	4b23      	ldr	r3, [pc, #140]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	2b0c      	cmp	r3, #12
 800857c:	d136      	bne.n	80085ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800857e:	4b20      	ldr	r3, [pc, #128]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008588:	4b1d      	ldr	r3, [pc, #116]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	091b      	lsrs	r3, r3, #4
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	3301      	adds	r3, #1
 8008594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d10c      	bne.n	80085b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800859c:	4a1a      	ldr	r2, [pc, #104]	@ (8008608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a4:	4a16      	ldr	r2, [pc, #88]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085a6:	68d2      	ldr	r2, [r2, #12]
 80085a8:	0a12      	lsrs	r2, r2, #8
 80085aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085ae:	fb02 f303 	mul.w	r3, r2, r3
 80085b2:	617b      	str	r3, [r7, #20]
      break;
 80085b4:	e00c      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085b6:	4a13      	ldr	r2, [pc, #76]	@ (8008604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80085be:	4a10      	ldr	r2, [pc, #64]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085c0:	68d2      	ldr	r2, [r2, #12]
 80085c2:	0a12      	lsrs	r2, r2, #8
 80085c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085c8:	fb02 f303 	mul.w	r3, r2, r3
 80085cc:	617b      	str	r3, [r7, #20]
      break;
 80085ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	0e5b      	lsrs	r3, r3, #25
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	3301      	adds	r3, #1
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	e001      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80085f0:	693b      	ldr	r3, [r7, #16]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40021000 	.word	0x40021000
 8008604:	00f42400 	.word	0x00f42400
 8008608:	007a1200 	.word	0x007a1200

0800860c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008610:	4b03      	ldr	r3, [pc, #12]	@ (8008620 <HAL_RCC_GetHCLKFreq+0x14>)
 8008612:	681b      	ldr	r3, [r3, #0]
}
 8008614:	4618      	mov	r0, r3
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20000004 	.word	0x20000004

08008624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008628:	f7ff fff0 	bl	800860c <HAL_RCC_GetHCLKFreq>
 800862c:	4602      	mov	r2, r0
 800862e:	4b06      	ldr	r3, [pc, #24]	@ (8008648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	4904      	ldr	r1, [pc, #16]	@ (800864c <HAL_RCC_GetPCLK1Freq+0x28>)
 800863a:	5ccb      	ldrb	r3, [r1, r3]
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008644:	4618      	mov	r0, r3
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40021000 	.word	0x40021000
 800864c:	08010e64 	.word	0x08010e64

08008650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008654:	f7ff ffda 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8008658:	4602      	mov	r2, r0
 800865a:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	0adb      	lsrs	r3, r3, #11
 8008660:	f003 0307 	and.w	r3, r3, #7
 8008664:	4904      	ldr	r1, [pc, #16]	@ (8008678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008666:	5ccb      	ldrb	r3, [r1, r3]
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008670:	4618      	mov	r0, r3
 8008672:	bd80      	pop	{r7, pc}
 8008674:	40021000 	.word	0x40021000
 8008678:	08010e64 	.word	0x08010e64

0800867c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008682:	4b1e      	ldr	r3, [pc, #120]	@ (80086fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800868c:	4b1b      	ldr	r3, [pc, #108]	@ (80086fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	091b      	lsrs	r3, r3, #4
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	3301      	adds	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d10c      	bne.n	80086ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086a0:	4a17      	ldr	r2, [pc, #92]	@ (8008700 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a8:	4a14      	ldr	r2, [pc, #80]	@ (80086fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086aa:	68d2      	ldr	r2, [r2, #12]
 80086ac:	0a12      	lsrs	r2, r2, #8
 80086ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086b2:	fb02 f303 	mul.w	r3, r2, r3
 80086b6:	617b      	str	r3, [r7, #20]
    break;
 80086b8:	e00c      	b.n	80086d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086ba:	4a12      	ldr	r2, [pc, #72]	@ (8008704 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	4a0e      	ldr	r2, [pc, #56]	@ (80086fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086c4:	68d2      	ldr	r2, [r2, #12]
 80086c6:	0a12      	lsrs	r2, r2, #8
 80086c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086cc:	fb02 f303 	mul.w	r3, r2, r3
 80086d0:	617b      	str	r3, [r7, #20]
    break;
 80086d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086d4:	4b09      	ldr	r3, [pc, #36]	@ (80086fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	0e5b      	lsrs	r3, r3, #25
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	3301      	adds	r3, #1
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80086ee:	687b      	ldr	r3, [r7, #4]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40021000 	.word	0x40021000
 8008700:	007a1200 	.word	0x007a1200
 8008704:	00f42400 	.word	0x00f42400

08008708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008710:	2300      	movs	r3, #0
 8008712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008714:	2300      	movs	r3, #0
 8008716:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8098 	beq.w	8008856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008726:	2300      	movs	r3, #0
 8008728:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800872a:	4b43      	ldr	r3, [pc, #268]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800872c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800872e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10d      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008736:	4b40      	ldr	r3, [pc, #256]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873a:	4a3f      	ldr	r2, [pc, #252]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800873c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008740:	6593      	str	r3, [r2, #88]	@ 0x58
 8008742:	4b3d      	ldr	r3, [pc, #244]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800874a:	60bb      	str	r3, [r7, #8]
 800874c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800874e:	2301      	movs	r3, #1
 8008750:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008752:	4b3a      	ldr	r3, [pc, #232]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a39      	ldr	r2, [pc, #228]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800875c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800875e:	f7fa fe5d 	bl	800341c <HAL_GetTick>
 8008762:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008764:	e009      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008766:	f7fa fe59 	bl	800341c <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d902      	bls.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	74fb      	strb	r3, [r7, #19]
        break;
 8008778:	e005      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800877a:	4b30      	ldr	r3, [pc, #192]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0ef      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008786:	7cfb      	ldrb	r3, [r7, #19]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d159      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800878c:	4b2a      	ldr	r3, [pc, #168]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008796:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01e      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d019      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087a8:	4b23      	ldr	r3, [pc, #140]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087b4:	4b20      	ldr	r3, [pc, #128]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ba:	4a1f      	ldr	r2, [pc, #124]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087d4:	4a18      	ldr	r2, [pc, #96]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d016      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e6:	f7fa fe19 	bl	800341c <HAL_GetTick>
 80087ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ec:	e00b      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ee:	f7fa fe15 	bl	800341c <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d902      	bls.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	74fb      	strb	r3, [r7, #19]
            break;
 8008804:	e006      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008806:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0ec      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008814:	7cfb      	ldrb	r3, [r7, #19]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800881a:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800881c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008828:	4903      	ldr	r1, [pc, #12]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008830:	e008      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008832:	7cfb      	ldrb	r3, [r7, #19]
 8008834:	74bb      	strb	r3, [r7, #18]
 8008836:	e005      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008838:	40021000 	.word	0x40021000
 800883c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	7cfb      	ldrb	r3, [r7, #19]
 8008842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008844:	7c7b      	ldrb	r3, [r7, #17]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d105      	bne.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800884a:	4ba6      	ldr	r3, [pc, #664]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	4aa5      	ldr	r2, [pc, #660]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008854:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00a      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008862:	4ba0      	ldr	r3, [pc, #640]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008868:	f023 0203 	bic.w	r2, r3, #3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	499c      	ldr	r1, [pc, #624]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008872:	4313      	orrs	r3, r2
 8008874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008884:	4b97      	ldr	r3, [pc, #604]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888a:	f023 020c 	bic.w	r2, r3, #12
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	4994      	ldr	r1, [pc, #592]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008894:	4313      	orrs	r3, r2
 8008896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088a6:	4b8f      	ldr	r3, [pc, #572]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	498b      	ldr	r1, [pc, #556]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088c8:	4b86      	ldr	r3, [pc, #536]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	4983      	ldr	r1, [pc, #524]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088ea:	4b7e      	ldr	r3, [pc, #504]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	497a      	ldr	r1, [pc, #488]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800890c:	4b75      	ldr	r3, [pc, #468]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800890e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008912:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	4972      	ldr	r1, [pc, #456]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800891c:	4313      	orrs	r3, r2
 800891e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800892e:	4b6d      	ldr	r3, [pc, #436]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008934:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	4969      	ldr	r1, [pc, #420]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800893e:	4313      	orrs	r3, r2
 8008940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008950:	4b64      	ldr	r3, [pc, #400]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008956:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	4961      	ldr	r1, [pc, #388]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008960:	4313      	orrs	r3, r2
 8008962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008972:	4b5c      	ldr	r3, [pc, #368]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008978:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	4958      	ldr	r1, [pc, #352]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008982:	4313      	orrs	r3, r2
 8008984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008990:	2b00      	cmp	r3, #0
 8008992:	d015      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008994:	4b53      	ldr	r3, [pc, #332]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800899a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	4950      	ldr	r1, [pc, #320]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089b2:	d105      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089b4:	4b4b      	ldr	r3, [pc, #300]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4a4a      	ldr	r2, [pc, #296]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d015      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089cc:	4b45      	ldr	r3, [pc, #276]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	4942      	ldr	r1, [pc, #264]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089ea:	d105      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089ec:	4b3d      	ldr	r3, [pc, #244]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d015      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a04:	4b37      	ldr	r3, [pc, #220]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	4934      	ldr	r1, [pc, #208]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a22:	d105      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a24:	4b2f      	ldr	r3, [pc, #188]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4a2e      	ldr	r2, [pc, #184]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d015      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a3c:	4b29      	ldr	r3, [pc, #164]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4a:	4926      	ldr	r1, [pc, #152]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a5a:	d105      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a5c:	4b21      	ldr	r3, [pc, #132]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	4a20      	ldr	r2, [pc, #128]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d015      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	4918      	ldr	r1, [pc, #96]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a92:	d105      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a94:	4b13      	ldr	r3, [pc, #76]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4a12      	ldr	r2, [pc, #72]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d015      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008aac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aba:	490a      	ldr	r1, [pc, #40]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aca:	d105      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008acc:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	4a04      	ldr	r2, [pc, #16]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008ad8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40021000 	.word	0x40021000

08008ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e049      	b.n	8008b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fa fa96 	bl	8003040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f001 f808 	bl	8009b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e049      	b.n	8008c3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f841 	bl	8008c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f000 ffb1 	bl	8009b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d109      	bne.n	8008c84 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2301      	moveq	r3, #1
 8008c7e:	2300      	movne	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	e03c      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0xa6>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d109      	bne.n	8008c9e <HAL_TIM_PWM_Start_DMA+0x46>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	bf0c      	ite	eq
 8008c96:	2301      	moveq	r3, #1
 8008c98:	2300      	movne	r3, #0
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	e02f      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0xa6>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d109      	bne.n	8008cb8 <HAL_TIM_PWM_Start_DMA+0x60>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	e022      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0xa6>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b0c      	cmp	r3, #12
 8008cbc:	d109      	bne.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	bf0c      	ite	eq
 8008cca:	2301      	moveq	r3, #1
 8008ccc:	2300      	movne	r3, #0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	e015      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0xa6>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b10      	cmp	r3, #16
 8008cd6:	d109      	bne.n	8008cec <HAL_TIM_PWM_Start_DMA+0x94>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2301      	moveq	r3, #1
 8008ce6:	2300      	movne	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	e008      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0xa6>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	bf0c      	ite	eq
 8008cf8:	2301      	moveq	r3, #1
 8008cfa:	2300      	movne	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008d02:	2302      	movs	r3, #2
 8008d04:	e1a6      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d109      	bne.n	8008d20 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	e03c      	b.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x142>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d109      	bne.n	8008d3a <HAL_TIM_PWM_Start_DMA+0xe2>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	bf0c      	ite	eq
 8008d32:	2301      	moveq	r3, #1
 8008d34:	2300      	movne	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	e02f      	b.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x142>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d109      	bne.n	8008d54 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	bf0c      	ite	eq
 8008d4c:	2301      	moveq	r3, #1
 8008d4e:	2300      	movne	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	e022      	b.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x142>
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b0c      	cmp	r3, #12
 8008d58:	d109      	bne.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x116>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	e015      	b.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x142>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b10      	cmp	r3, #16
 8008d72:	d109      	bne.n	8008d88 <HAL_TIM_PWM_Start_DMA+0x130>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	bf0c      	ite	eq
 8008d80:	2301      	moveq	r3, #1
 8008d82:	2300      	movne	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	e008      	b.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x142>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d034      	beq.n	8008e08 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x152>
 8008da4:	887b      	ldrh	r3, [r7, #2]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e152      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x166>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dbc:	e026      	b.n	8008e0c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_PWM_Start_DMA+0x176>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dcc:	e01e      	b.n	8008e0c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d104      	bne.n	8008dde <HAL_TIM_PWM_Start_DMA+0x186>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ddc:	e016      	b.n	8008e0c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b0c      	cmp	r3, #12
 8008de2:	d104      	bne.n	8008dee <HAL_TIM_PWM_Start_DMA+0x196>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008dec:	e00e      	b.n	8008e0c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dfc:	e006      	b.n	8008e0c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e06:	e001      	b.n	8008e0c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e123      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b0c      	cmp	r3, #12
 8008e10:	f200 80ae 	bhi.w	8008f70 <HAL_TIM_PWM_Start_DMA+0x318>
 8008e14:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e51 	.word	0x08008e51
 8008e20:	08008f71 	.word	0x08008f71
 8008e24:	08008f71 	.word	0x08008f71
 8008e28:	08008f71 	.word	0x08008f71
 8008e2c:	08008e99 	.word	0x08008e99
 8008e30:	08008f71 	.word	0x08008f71
 8008e34:	08008f71 	.word	0x08008f71
 8008e38:	08008f71 	.word	0x08008f71
 8008e3c:	08008ee1 	.word	0x08008ee1
 8008e40:	08008f71 	.word	0x08008f71
 8008e44:	08008f71 	.word	0x08008f71
 8008e48:	08008f71 	.word	0x08008f71
 8008e4c:	08008f29 	.word	0x08008f29
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e54:	4a81      	ldr	r2, [pc, #516]	@ (800905c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008e56:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	4a80      	ldr	r2, [pc, #512]	@ (8009060 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008e5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	4a7f      	ldr	r2, [pc, #508]	@ (8009064 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008e66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3334      	adds	r3, #52	@ 0x34
 8008e74:	461a      	mov	r2, r3
 8008e76:	887b      	ldrh	r3, [r7, #2]
 8008e78:	f7fc f904 	bl	8005084 <HAL_DMA_Start_IT>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e0e6      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e94:	60da      	str	r2, [r3, #12]
      break;
 8008e96:	e06e      	b.n	8008f76 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	4a6f      	ldr	r2, [pc, #444]	@ (800905c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8009060 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008ea6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eac:	4a6d      	ldr	r2, [pc, #436]	@ (8009064 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008eae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3338      	adds	r3, #56	@ 0x38
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	f7fc f8e0 	bl	8005084 <HAL_DMA_Start_IT>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e0c2      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008edc:	60da      	str	r2, [r3, #12]
      break;
 8008ede:	e04a      	b.n	8008f76 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800905c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eec:	4a5c      	ldr	r2, [pc, #368]	@ (8009060 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008eee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8009064 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	333c      	adds	r3, #60	@ 0x3c
 8008f04:	461a      	mov	r2, r3
 8008f06:	887b      	ldrh	r3, [r7, #2]
 8008f08:	f7fc f8bc 	bl	8005084 <HAL_DMA_Start_IT>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e09e      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f24:	60da      	str	r2, [r3, #12]
      break;
 8008f26:	e026      	b.n	8008f76 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2c:	4a4b      	ldr	r2, [pc, #300]	@ (800905c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f34:	4a4a      	ldr	r2, [pc, #296]	@ (8009060 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008f36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	4a49      	ldr	r2, [pc, #292]	@ (8009064 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008f3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3340      	adds	r3, #64	@ 0x40
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	887b      	ldrh	r3, [r7, #2]
 8008f50:	f7fc f898 	bl	8005084 <HAL_DMA_Start_IT>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e07a      	b.n	8009054 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f6c:	60da      	str	r2, [r3, #12]
      break;
 8008f6e:	e002      	b.n	8008f76 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
      break;
 8008f74:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d16a      	bne.n	8009052 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2201      	movs	r2, #1
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fa07 	bl	800a398 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a36      	ldr	r2, [pc, #216]	@ (8009068 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d013      	beq.n	8008fbc <HAL_TIM_PWM_Start_DMA+0x364>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a34      	ldr	r2, [pc, #208]	@ (800906c <HAL_TIM_PWM_Start_DMA+0x414>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00e      	beq.n	8008fbc <HAL_TIM_PWM_Start_DMA+0x364>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a33      	ldr	r2, [pc, #204]	@ (8009070 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d009      	beq.n	8008fbc <HAL_TIM_PWM_Start_DMA+0x364>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a31      	ldr	r2, [pc, #196]	@ (8009074 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d004      	beq.n	8008fbc <HAL_TIM_PWM_Start_DMA+0x364>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a30      	ldr	r2, [pc, #192]	@ (8009078 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d101      	bne.n	8008fc0 <HAL_TIM_PWM_Start_DMA+0x368>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <HAL_TIM_PWM_Start_DMA+0x36a>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d007      	beq.n	8008fd6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a23      	ldr	r2, [pc, #140]	@ (8009068 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d018      	beq.n	8009012 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe8:	d013      	beq.n	8009012 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a23      	ldr	r2, [pc, #140]	@ (800907c <HAL_TIM_PWM_Start_DMA+0x424>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d00e      	beq.n	8009012 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a21      	ldr	r2, [pc, #132]	@ (8009080 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d009      	beq.n	8009012 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a1a      	ldr	r2, [pc, #104]	@ (800906c <HAL_TIM_PWM_Start_DMA+0x414>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d004      	beq.n	8009012 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a18      	ldr	r2, [pc, #96]	@ (8009070 <HAL_TIM_PWM_Start_DMA+0x418>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d115      	bne.n	800903e <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	4b1a      	ldr	r3, [pc, #104]	@ (8009084 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800901a:	4013      	ands	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2b06      	cmp	r3, #6
 8009022:	d015      	beq.n	8009050 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902a:	d011      	beq.n	8009050 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903c:	e008      	b.n	8009050 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f042 0201 	orr.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e000      	b.n	8009052 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009050:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	08009a2b 	.word	0x08009a2b
 8009060:	08009ad3 	.word	0x08009ad3
 8009064:	08009999 	.word	0x08009999
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40013400 	.word	0x40013400
 8009070:	40014000 	.word	0x40014000
 8009074:	40014400 	.word	0x40014400
 8009078:	40014800 	.word	0x40014800
 800907c:	40000400 	.word	0x40000400
 8009080:	40000800 	.word	0x40000800
 8009084:	00010007 	.word	0x00010007

08009088 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b0c      	cmp	r3, #12
 800909a:	d855      	bhi.n	8009148 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800909c:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090d9 	.word	0x080090d9
 80090a8:	08009149 	.word	0x08009149
 80090ac:	08009149 	.word	0x08009149
 80090b0:	08009149 	.word	0x08009149
 80090b4:	080090f5 	.word	0x080090f5
 80090b8:	08009149 	.word	0x08009149
 80090bc:	08009149 	.word	0x08009149
 80090c0:	08009149 	.word	0x08009149
 80090c4:	08009111 	.word	0x08009111
 80090c8:	08009149 	.word	0x08009149
 80090cc:	08009149 	.word	0x08009149
 80090d0:	08009149 	.word	0x08009149
 80090d4:	0800912d 	.word	0x0800912d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80090e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fc f844 	bl	800517a <HAL_DMA_Abort_IT>
      break;
 80090f2:	e02c      	b.n	800914e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009102:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc f836 	bl	800517a <HAL_DMA_Abort_IT>
      break;
 800910e:	e01e      	b.n	800914e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800911e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	4618      	mov	r0, r3
 8009126:	f7fc f828 	bl	800517a <HAL_DMA_Abort_IT>
      break;
 800912a:	e010      	b.n	800914e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800913a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009140:	4618      	mov	r0, r3
 8009142:	f7fc f81a 	bl	800517a <HAL_DMA_Abort_IT>
      break;
 8009146:	e002      	b.n	800914e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	bf00      	nop
  }

  if (status == HAL_OK)
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f040 8081 	bne.w	8009258 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f001 f91a 	bl	800a398 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a3e      	ldr	r2, [pc, #248]	@ (8009264 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a3d      	ldr	r2, [pc, #244]	@ (8009268 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00e      	beq.n	8009196 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a3b      	ldr	r2, [pc, #236]	@ (800926c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d009      	beq.n	8009196 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a3a      	ldr	r2, [pc, #232]	@ (8009270 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d004      	beq.n	8009196 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a38      	ldr	r2, [pc, #224]	@ (8009274 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d101      	bne.n	800919a <HAL_TIM_PWM_Stop_DMA+0x112>
 8009196:	2301      	movs	r3, #1
 8009198:	e000      	b.n	800919c <HAL_TIM_PWM_Stop_DMA+0x114>
 800919a:	2300      	movs	r3, #0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d017      	beq.n	80091d0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10f      	bne.n	80091d0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6a1a      	ldr	r2, [r3, #32]
 80091b6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d107      	bne.n	80091d0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6a1a      	ldr	r2, [r3, #32]
 80091d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80091da:	4013      	ands	r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10f      	bne.n	8009200 <HAL_TIM_PWM_Stop_DMA+0x178>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6a1a      	ldr	r2, [r3, #32]
 80091e6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d107      	bne.n	8009200 <HAL_TIM_PWM_Stop_DMA+0x178>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 0201 	bic.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d104      	bne.n	8009210 <HAL_TIM_PWM_Stop_DMA+0x188>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800920e:	e023      	b.n	8009258 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b04      	cmp	r3, #4
 8009214:	d104      	bne.n	8009220 <HAL_TIM_PWM_Stop_DMA+0x198>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800921e:	e01b      	b.n	8009258 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b08      	cmp	r3, #8
 8009224:	d104      	bne.n	8009230 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800922e:	e013      	b.n	8009258 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b0c      	cmp	r3, #12
 8009234:	d104      	bne.n	8009240 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800923e:	e00b      	b.n	8009258 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b10      	cmp	r3, #16
 8009244:	d104      	bne.n	8009250 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800924e:	e003      	b.n	8009258 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	40012c00 	.word	0x40012c00
 8009268:	40013400 	.word	0x40013400
 800926c:	40014000 	.word	0x40014000
 8009270:	40014400 	.word	0x40014400
 8009274:	40014800 	.word	0x40014800

08009278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d020      	beq.n	80092dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01b      	beq.n	80092dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0202 	mvn.w	r2, #2
 80092ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fb40 	bl	8009948 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fb32 	bl	8009934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7f9 fc57 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d020      	beq.n	8009328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01b      	beq.n	8009328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0204 	mvn.w	r2, #4
 80092f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fb1a 	bl	8009948 <HAL_TIM_IC_CaptureCallback>
 8009314:	e005      	b.n	8009322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fb0c 	bl	8009934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7f9 fc31 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f003 0308 	and.w	r3, r3, #8
 800932e:	2b00      	cmp	r3, #0
 8009330:	d020      	beq.n	8009374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f003 0308 	and.w	r3, r3, #8
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01b      	beq.n	8009374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f06f 0208 	mvn.w	r2, #8
 8009344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2204      	movs	r2, #4
 800934a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 faf4 	bl	8009948 <HAL_TIM_IC_CaptureCallback>
 8009360:	e005      	b.n	800936e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fae6 	bl	8009934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7f9 fc0b 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0310 	and.w	r3, r3, #16
 800937a:	2b00      	cmp	r3, #0
 800937c:	d020      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0310 	and.w	r3, r3, #16
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01b      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0210 	mvn.w	r2, #16
 8009390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2208      	movs	r2, #8
 8009396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 face 	bl	8009948 <HAL_TIM_IC_CaptureCallback>
 80093ac:	e005      	b.n	80093ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fac0 	bl	8009934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7f9 fbe5 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00c      	beq.n	80093e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d007      	beq.n	80093e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0201 	mvn.w	r2, #1
 80093dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f7 fea2 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800940a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f875 	bl	800a4fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009422:	2b00      	cmp	r3, #0
 8009424:	d007      	beq.n	8009436 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800942e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 f86d 	bl	800a510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00c      	beq.n	800945a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d007      	beq.n	800945a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fa8b 	bl	8009970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00c      	beq.n	800947e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d007      	beq.n	800947e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f06f 0220 	mvn.w	r2, #32
 8009476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f835 	bl	800a4e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800949a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f841 	bl	800a524 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00c      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80094be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 f839 	bl	800a538 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00c      	beq.n	80094ea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 f831 	bl	800a54c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f829 	bl	800a560 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009532:	2302      	movs	r3, #2
 8009534:	e0ff      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b14      	cmp	r3, #20
 8009542:	f200 80f0 	bhi.w	8009726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	080095a1 	.word	0x080095a1
 8009550:	08009727 	.word	0x08009727
 8009554:	08009727 	.word	0x08009727
 8009558:	08009727 	.word	0x08009727
 800955c:	080095e1 	.word	0x080095e1
 8009560:	08009727 	.word	0x08009727
 8009564:	08009727 	.word	0x08009727
 8009568:	08009727 	.word	0x08009727
 800956c:	08009623 	.word	0x08009623
 8009570:	08009727 	.word	0x08009727
 8009574:	08009727 	.word	0x08009727
 8009578:	08009727 	.word	0x08009727
 800957c:	08009663 	.word	0x08009663
 8009580:	08009727 	.word	0x08009727
 8009584:	08009727 	.word	0x08009727
 8009588:	08009727 	.word	0x08009727
 800958c:	080096a5 	.word	0x080096a5
 8009590:	08009727 	.word	0x08009727
 8009594:	08009727 	.word	0x08009727
 8009598:	08009727 	.word	0x08009727
 800959c:	080096e5 	.word	0x080096e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fb64 	bl	8009c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0208 	orr.w	r2, r2, #8
 80095ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0204 	bic.w	r2, r2, #4
 80095ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6999      	ldr	r1, [r3, #24]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	619a      	str	r2, [r3, #24]
      break;
 80095de:	e0a5      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68b9      	ldr	r1, [r7, #8]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fbd4 	bl	8009d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	699a      	ldr	r2, [r3, #24]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6999      	ldr	r1, [r3, #24]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	021a      	lsls	r2, r3, #8
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	619a      	str	r2, [r3, #24]
      break;
 8009620:	e084      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fc3d 	bl	8009ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69da      	ldr	r2, [r3, #28]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0208 	orr.w	r2, r2, #8
 800963c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69da      	ldr	r2, [r3, #28]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0204 	bic.w	r2, r2, #4
 800964c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69d9      	ldr	r1, [r3, #28]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	61da      	str	r2, [r3, #28]
      break;
 8009660:	e064      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fca5 	bl	8009fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	69da      	ldr	r2, [r3, #28]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800967c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800968c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69d9      	ldr	r1, [r3, #28]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	021a      	lsls	r2, r3, #8
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	61da      	str	r2, [r3, #28]
      break;
 80096a2:	e043      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68b9      	ldr	r1, [r7, #8]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fd0e 	bl	800a0cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 0208 	orr.w	r2, r2, #8
 80096be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0204 	bic.w	r2, r2, #4
 80096ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	691a      	ldr	r2, [r3, #16]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80096e2:	e023      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fd52 	bl	800a194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	021a      	lsls	r2, r3, #8
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009724:	e002      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]
      break;
 800972a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop

08009740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_TIM_ConfigClockSource+0x1c>
 8009758:	2302      	movs	r3, #2
 800975a:	e0de      	b.n	800991a <HAL_TIM_ConfigClockSource+0x1da>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800977a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800977e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a63      	ldr	r2, [pc, #396]	@ (8009924 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009796:	4293      	cmp	r3, r2
 8009798:	f000 80a9 	beq.w	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 800979c:	4a61      	ldr	r2, [pc, #388]	@ (8009924 <HAL_TIM_ConfigClockSource+0x1e4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	f200 80ae 	bhi.w	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 80097a4:	4a60      	ldr	r2, [pc, #384]	@ (8009928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	f000 80a1 	beq.w	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 80097ac:	4a5e      	ldr	r2, [pc, #376]	@ (8009928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	f200 80a6 	bhi.w	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 80097b4:	4a5d      	ldr	r2, [pc, #372]	@ (800992c <HAL_TIM_ConfigClockSource+0x1ec>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	f000 8099 	beq.w	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 80097bc:	4a5b      	ldr	r2, [pc, #364]	@ (800992c <HAL_TIM_ConfigClockSource+0x1ec>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	f200 809e 	bhi.w	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 80097c4:	4a5a      	ldr	r2, [pc, #360]	@ (8009930 <HAL_TIM_ConfigClockSource+0x1f0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	f000 8091 	beq.w	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 80097cc:	4a58      	ldr	r2, [pc, #352]	@ (8009930 <HAL_TIM_ConfigClockSource+0x1f0>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	f200 8096 	bhi.w	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 80097d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097d8:	f000 8089 	beq.w	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 80097dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097e0:	f200 808e 	bhi.w	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 80097e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097e8:	d03e      	beq.n	8009868 <HAL_TIM_ConfigClockSource+0x128>
 80097ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ee:	f200 8087 	bhi.w	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 80097f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097f6:	f000 8086 	beq.w	8009906 <HAL_TIM_ConfigClockSource+0x1c6>
 80097fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097fe:	d87f      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009800:	2b70      	cmp	r3, #112	@ 0x70
 8009802:	d01a      	beq.n	800983a <HAL_TIM_ConfigClockSource+0xfa>
 8009804:	2b70      	cmp	r3, #112	@ 0x70
 8009806:	d87b      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009808:	2b60      	cmp	r3, #96	@ 0x60
 800980a:	d050      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0x16e>
 800980c:	2b60      	cmp	r3, #96	@ 0x60
 800980e:	d877      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009810:	2b50      	cmp	r3, #80	@ 0x50
 8009812:	d03c      	beq.n	800988e <HAL_TIM_ConfigClockSource+0x14e>
 8009814:	2b50      	cmp	r3, #80	@ 0x50
 8009816:	d873      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	d058      	beq.n	80098ce <HAL_TIM_ConfigClockSource+0x18e>
 800981c:	2b40      	cmp	r3, #64	@ 0x40
 800981e:	d86f      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009820:	2b30      	cmp	r3, #48	@ 0x30
 8009822:	d064      	beq.n	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 8009824:	2b30      	cmp	r3, #48	@ 0x30
 8009826:	d86b      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009828:	2b20      	cmp	r3, #32
 800982a:	d060      	beq.n	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 800982c:	2b20      	cmp	r3, #32
 800982e:	d867      	bhi.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
 8009830:	2b00      	cmp	r3, #0
 8009832:	d05c      	beq.n	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 8009834:	2b10      	cmp	r3, #16
 8009836:	d05a      	beq.n	80098ee <HAL_TIM_ConfigClockSource+0x1ae>
 8009838:	e062      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800984a:	f000 fd85 	bl	800a358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800985c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	609a      	str	r2, [r3, #8]
      break;
 8009866:	e04f      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009878:	f000 fd6e 	bl	800a358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800988a:	609a      	str	r2, [r3, #8]
      break;
 800988c:	e03c      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800989a:	461a      	mov	r2, r3
 800989c:	f000 fce0 	bl	800a260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2150      	movs	r1, #80	@ 0x50
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fd39 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 80098ac:	e02c      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098ba:	461a      	mov	r2, r3
 80098bc:	f000 fcff 	bl	800a2be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2160      	movs	r1, #96	@ 0x60
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fd29 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 80098cc:	e01c      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098da:	461a      	mov	r2, r3
 80098dc:	f000 fcc0 	bl	800a260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2140      	movs	r1, #64	@ 0x40
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fd19 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 80098ec:	e00c      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	4610      	mov	r0, r2
 80098fa:	f000 fd10 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 80098fe:	e003      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
      break;
 8009904:	e000      	b.n	8009908 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009918:	7bfb      	ldrb	r3, [r7, #15]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	00100070 	.word	0x00100070
 8009928:	00100040 	.word	0x00100040
 800992c:	00100030 	.word	0x00100030
 8009930:	00100020 	.word	0x00100020

08009934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d107      	bne.n	80099c0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099be:	e02a      	b.n	8009a16 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d107      	bne.n	80099da <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2202      	movs	r2, #2
 80099ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099d8:	e01d      	b.n	8009a16 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d107      	bne.n	80099f4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2204      	movs	r2, #4
 80099e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099f2:	e010      	b.n	8009a16 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d107      	bne.n	8009a0e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2208      	movs	r2, #8
 8009a02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a0c:	e003      	b.n	8009a16 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff ffb4 	bl	8009984 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	771a      	strb	r2, [r3, #28]
}
 8009a22:	bf00      	nop
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d10b      	bne.n	8009a5a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d136      	bne.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a58:	e031      	b.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d10b      	bne.n	8009a7c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2202      	movs	r2, #2
 8009a68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d125      	bne.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a7a:	e020      	b.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d10b      	bne.n	8009a9e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2204      	movs	r2, #4
 8009a8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	69db      	ldr	r3, [r3, #28]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d114      	bne.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a9c:	e00f      	b.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d10a      	bne.n	8009abe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2208      	movs	r2, #8
 8009aac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7f9 f860 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	771a      	strb	r2, [r3, #28]
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d103      	bne.n	8009af2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	771a      	strb	r2, [r3, #28]
 8009af0:	e019      	b.n	8009b26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d103      	bne.n	8009b04 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2202      	movs	r2, #2
 8009b00:	771a      	strb	r2, [r3, #28]
 8009b02:	e010      	b.n	8009b26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d103      	bne.n	8009b16 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2204      	movs	r2, #4
 8009b12:	771a      	strb	r2, [r3, #28]
 8009b14:	e007      	b.n	8009b26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d102      	bne.n	8009b26 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2208      	movs	r2, #8
 8009b24:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff ff18 	bl	800995c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	771a      	strb	r2, [r3, #28]
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a42      	ldr	r2, [pc, #264]	@ (8009c58 <TIM_Base_SetConfig+0x11c>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00f      	beq.n	8009b74 <TIM_Base_SetConfig+0x38>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b5a:	d00b      	beq.n	8009b74 <TIM_Base_SetConfig+0x38>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c5c <TIM_Base_SetConfig+0x120>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d007      	beq.n	8009b74 <TIM_Base_SetConfig+0x38>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a3e      	ldr	r2, [pc, #248]	@ (8009c60 <TIM_Base_SetConfig+0x124>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d003      	beq.n	8009b74 <TIM_Base_SetConfig+0x38>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c64 <TIM_Base_SetConfig+0x128>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d108      	bne.n	8009b86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a33      	ldr	r2, [pc, #204]	@ (8009c58 <TIM_Base_SetConfig+0x11c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d01b      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b94:	d017      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a30      	ldr	r2, [pc, #192]	@ (8009c5c <TIM_Base_SetConfig+0x120>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d013      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8009c60 <TIM_Base_SetConfig+0x124>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d00f      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8009c64 <TIM_Base_SetConfig+0x128>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d00b      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8009c68 <TIM_Base_SetConfig+0x12c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d007      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8009c6c <TIM_Base_SetConfig+0x130>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d003      	beq.n	8009bc6 <TIM_Base_SetConfig+0x8a>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8009c70 <TIM_Base_SetConfig+0x134>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d108      	bne.n	8009bd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a16      	ldr	r2, [pc, #88]	@ (8009c58 <TIM_Base_SetConfig+0x11c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00f      	beq.n	8009c24 <TIM_Base_SetConfig+0xe8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a17      	ldr	r2, [pc, #92]	@ (8009c64 <TIM_Base_SetConfig+0x128>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <TIM_Base_SetConfig+0xe8>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a16      	ldr	r2, [pc, #88]	@ (8009c68 <TIM_Base_SetConfig+0x12c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <TIM_Base_SetConfig+0xe8>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a15      	ldr	r2, [pc, #84]	@ (8009c6c <TIM_Base_SetConfig+0x130>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_Base_SetConfig+0xe8>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a14      	ldr	r2, [pc, #80]	@ (8009c70 <TIM_Base_SetConfig+0x134>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d103      	bne.n	8009c2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	691a      	ldr	r2, [r3, #16]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d105      	bne.n	8009c4a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f023 0201 	bic.w	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	611a      	str	r2, [r3, #16]
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40012c00 	.word	0x40012c00
 8009c5c:	40000400 	.word	0x40000400
 8009c60:	40000800 	.word	0x40000800
 8009c64:	40013400 	.word	0x40013400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	40014400 	.word	0x40014400
 8009c70:	40014800 	.word	0x40014800

08009c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	f023 0201 	bic.w	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f023 0302 	bic.w	r3, r3, #2
 8009cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a2c      	ldr	r2, [pc, #176]	@ (8009d80 <TIM_OC1_SetConfig+0x10c>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d00f      	beq.n	8009cf4 <TIM_OC1_SetConfig+0x80>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8009d84 <TIM_OC1_SetConfig+0x110>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d00b      	beq.n	8009cf4 <TIM_OC1_SetConfig+0x80>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a2a      	ldr	r2, [pc, #168]	@ (8009d88 <TIM_OC1_SetConfig+0x114>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d007      	beq.n	8009cf4 <TIM_OC1_SetConfig+0x80>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a29      	ldr	r2, [pc, #164]	@ (8009d8c <TIM_OC1_SetConfig+0x118>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d003      	beq.n	8009cf4 <TIM_OC1_SetConfig+0x80>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a28      	ldr	r2, [pc, #160]	@ (8009d90 <TIM_OC1_SetConfig+0x11c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d10c      	bne.n	8009d0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f023 0308 	bic.w	r3, r3, #8
 8009cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f023 0304 	bic.w	r3, r3, #4
 8009d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a1b      	ldr	r2, [pc, #108]	@ (8009d80 <TIM_OC1_SetConfig+0x10c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00f      	beq.n	8009d36 <TIM_OC1_SetConfig+0xc2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a1a      	ldr	r2, [pc, #104]	@ (8009d84 <TIM_OC1_SetConfig+0x110>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d00b      	beq.n	8009d36 <TIM_OC1_SetConfig+0xc2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a19      	ldr	r2, [pc, #100]	@ (8009d88 <TIM_OC1_SetConfig+0x114>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d007      	beq.n	8009d36 <TIM_OC1_SetConfig+0xc2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a18      	ldr	r2, [pc, #96]	@ (8009d8c <TIM_OC1_SetConfig+0x118>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d003      	beq.n	8009d36 <TIM_OC1_SetConfig+0xc2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a17      	ldr	r2, [pc, #92]	@ (8009d90 <TIM_OC1_SetConfig+0x11c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d111      	bne.n	8009d5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	621a      	str	r2, [r3, #32]
}
 8009d74:	bf00      	nop
 8009d76:	371c      	adds	r7, #28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	40012c00 	.word	0x40012c00
 8009d84:	40013400 	.word	0x40013400
 8009d88:	40014000 	.word	0x40014000
 8009d8c:	40014400 	.word	0x40014400
 8009d90:	40014800 	.word	0x40014800

08009d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	f023 0210 	bic.w	r2, r3, #16
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0320 	bic.w	r3, r3, #32
 8009de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a28      	ldr	r2, [pc, #160]	@ (8009e94 <TIM_OC2_SetConfig+0x100>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_OC2_SetConfig+0x6c>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a27      	ldr	r2, [pc, #156]	@ (8009e98 <TIM_OC2_SetConfig+0x104>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d10d      	bne.n	8009e1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8009e94 <TIM_OC2_SetConfig+0x100>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d00f      	beq.n	8009e44 <TIM_OC2_SetConfig+0xb0>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a1c      	ldr	r2, [pc, #112]	@ (8009e98 <TIM_OC2_SetConfig+0x104>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d00b      	beq.n	8009e44 <TIM_OC2_SetConfig+0xb0>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8009e9c <TIM_OC2_SetConfig+0x108>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d007      	beq.n	8009e44 <TIM_OC2_SetConfig+0xb0>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea0 <TIM_OC2_SetConfig+0x10c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d003      	beq.n	8009e44 <TIM_OC2_SetConfig+0xb0>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a19      	ldr	r2, [pc, #100]	@ (8009ea4 <TIM_OC2_SetConfig+0x110>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d113      	bne.n	8009e6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	621a      	str	r2, [r3, #32]
}
 8009e86:	bf00      	nop
 8009e88:	371c      	adds	r7, #28
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40012c00 	.word	0x40012c00
 8009e98:	40013400 	.word	0x40013400
 8009e9c:	40014000 	.word	0x40014000
 8009ea0:	40014400 	.word	0x40014400
 8009ea4:	40014800 	.word	0x40014800

08009ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a27      	ldr	r2, [pc, #156]	@ (8009fa4 <TIM_OC3_SetConfig+0xfc>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d003      	beq.n	8009f12 <TIM_OC3_SetConfig+0x6a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a26      	ldr	r2, [pc, #152]	@ (8009fa8 <TIM_OC3_SetConfig+0x100>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d10d      	bne.n	8009f2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	021b      	lsls	r3, r3, #8
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa4 <TIM_OC3_SetConfig+0xfc>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00f      	beq.n	8009f56 <TIM_OC3_SetConfig+0xae>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa8 <TIM_OC3_SetConfig+0x100>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00b      	beq.n	8009f56 <TIM_OC3_SetConfig+0xae>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a1a      	ldr	r2, [pc, #104]	@ (8009fac <TIM_OC3_SetConfig+0x104>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d007      	beq.n	8009f56 <TIM_OC3_SetConfig+0xae>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a19      	ldr	r2, [pc, #100]	@ (8009fb0 <TIM_OC3_SetConfig+0x108>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_OC3_SetConfig+0xae>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a18      	ldr	r2, [pc, #96]	@ (8009fb4 <TIM_OC3_SetConfig+0x10c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d113      	bne.n	8009f7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	621a      	str	r2, [r3, #32]
}
 8009f98:	bf00      	nop
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	40012c00 	.word	0x40012c00
 8009fa8:	40013400 	.word	0x40013400
 8009fac:	40014000 	.word	0x40014000
 8009fb0:	40014400 	.word	0x40014400
 8009fb4:	40014800 	.word	0x40014800

08009fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	031b      	lsls	r3, r3, #12
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a28      	ldr	r2, [pc, #160]	@ (800a0b8 <TIM_OC4_SetConfig+0x100>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC4_SetConfig+0x6c>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a27      	ldr	r2, [pc, #156]	@ (800a0bc <TIM_OC4_SetConfig+0x104>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d10d      	bne.n	800a040 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a02a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	031b      	lsls	r3, r3, #12
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a03e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b8 <TIM_OC4_SetConfig+0x100>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00f      	beq.n	800a068 <TIM_OC4_SetConfig+0xb0>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a1c      	ldr	r2, [pc, #112]	@ (800a0bc <TIM_OC4_SetConfig+0x104>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00b      	beq.n	800a068 <TIM_OC4_SetConfig+0xb0>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a1b      	ldr	r2, [pc, #108]	@ (800a0c0 <TIM_OC4_SetConfig+0x108>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d007      	beq.n	800a068 <TIM_OC4_SetConfig+0xb0>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0c4 <TIM_OC4_SetConfig+0x10c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_OC4_SetConfig+0xb0>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a19      	ldr	r2, [pc, #100]	@ (800a0c8 <TIM_OC4_SetConfig+0x110>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d113      	bne.n	800a090 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a06e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a076:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	019b      	lsls	r3, r3, #6
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	019b      	lsls	r3, r3, #6
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	621a      	str	r2, [r3, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40012c00 	.word	0x40012c00
 800a0bc:	40013400 	.word	0x40013400
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	40014400 	.word	0x40014400
 800a0c8:	40014800 	.word	0x40014800

0800a0cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	041b      	lsls	r3, r3, #16
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a17      	ldr	r2, [pc, #92]	@ (800a180 <TIM_OC5_SetConfig+0xb4>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00f      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a16      	ldr	r2, [pc, #88]	@ (800a184 <TIM_OC5_SetConfig+0xb8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00b      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a15      	ldr	r2, [pc, #84]	@ (800a188 <TIM_OC5_SetConfig+0xbc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d007      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a14      	ldr	r2, [pc, #80]	@ (800a18c <TIM_OC5_SetConfig+0xc0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d003      	beq.n	800a146 <TIM_OC5_SetConfig+0x7a>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a13      	ldr	r2, [pc, #76]	@ (800a190 <TIM_OC5_SetConfig+0xc4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d109      	bne.n	800a15a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a14c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	621a      	str	r2, [r3, #32]
}
 800a174:	bf00      	nop
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	40012c00 	.word	0x40012c00
 800a184:	40013400 	.word	0x40013400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	051b      	lsls	r3, r3, #20
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <TIM_OC6_SetConfig+0xb8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00f      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <TIM_OC6_SetConfig+0xbc>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00b      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a16      	ldr	r2, [pc, #88]	@ (800a254 <TIM_OC6_SetConfig+0xc0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d007      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a15      	ldr	r2, [pc, #84]	@ (800a258 <TIM_OC6_SetConfig+0xc4>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <TIM_OC6_SetConfig+0x7c>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a14      	ldr	r2, [pc, #80]	@ (800a25c <TIM_OC6_SetConfig+0xc8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d109      	bne.n	800a224 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	029b      	lsls	r3, r3, #10
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	621a      	str	r2, [r3, #32]
}
 800a23e:	bf00      	nop
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	40012c00 	.word	0x40012c00
 800a250:	40013400 	.word	0x40013400
 800a254:	40014000 	.word	0x40014000
 800a258:	40014400 	.word	0x40014400
 800a25c:	40014800 	.word	0x40014800

0800a260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f023 0201 	bic.w	r2, r3, #1
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a28a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4313      	orrs	r3, r2
 800a294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f023 030a 	bic.w	r3, r3, #10
 800a29c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	621a      	str	r2, [r3, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b087      	sub	sp, #28
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	f023 0210 	bic.w	r2, r3, #16
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	031b      	lsls	r3, r3, #12
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	621a      	str	r2, [r3, #32]
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	f043 0307 	orr.w	r3, r3, #7
 800a344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	609a      	str	r2, [r3, #8]
}
 800a34c:	bf00      	nop
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	021a      	lsls	r2, r3, #8
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4313      	orrs	r3, r2
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	609a      	str	r2, [r3, #8]
}
 800a38c:	bf00      	nop
 800a38e:	371c      	adds	r7, #28
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	f003 031f 	and.w	r3, r3, #31
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6a1a      	ldr	r2, [r3, #32]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	401a      	ands	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a1a      	ldr	r2, [r3, #32]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	f003 031f 	and.w	r3, r3, #31
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	621a      	str	r2, [r3, #32]
}
 800a3d6:	bf00      	nop
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e065      	b.n	800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a2c      	ldr	r2, [pc, #176]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d108      	bne.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a436:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a44c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	4313      	orrs	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d018      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a472:	d013      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a18      	ldr	r2, [pc, #96]	@ (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00e      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a17      	ldr	r2, [pc, #92]	@ (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d009      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a12      	ldr	r2, [pc, #72]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d004      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a13      	ldr	r2, [pc, #76]	@ (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d10c      	bne.n	800a4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	40012c00 	.word	0x40012c00
 800a4d8:	40013400 	.word	0x40013400
 800a4dc:	40000400 	.word	0x40000400
 800a4e0:	40000800 	.word	0x40000800
 800a4e4:	40014000 	.word	0x40014000

0800a4e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e042      	b.n	800a60c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d106      	bne.n	800a59e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7f8 fe59 	bl	8003250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2224      	movs	r2, #36	@ 0x24
 800a5a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0201 	bic.w	r2, r2, #1
 800a5b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 faf4 	bl	800abac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f825 	bl	800a614 <UART_SetConfig>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e01b      	b.n	800a60c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a5e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f042 0201 	orr.w	r2, r2, #1
 800a602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fb73 	bl	800acf0 <UART_CheckIdleState>
 800a60a:	4603      	mov	r3, r0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a618:	b08c      	sub	sp, #48	@ 0x30
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	431a      	orrs	r2, r3
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	431a      	orrs	r2, r3
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	4313      	orrs	r3, r2
 800a63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4bab      	ldr	r3, [pc, #684]	@ (800a8f0 <UART_SetConfig+0x2dc>)
 800a644:	4013      	ands	r3, r2
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a64c:	430b      	orrs	r3, r1
 800a64e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4aa0      	ldr	r2, [pc, #640]	@ (800a8f4 <UART_SetConfig+0x2e0>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d004      	beq.n	800a680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a67c:	4313      	orrs	r3, r2
 800a67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a68a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a694:	430b      	orrs	r3, r1
 800a696:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	f023 010f 	bic.w	r1, r3, #15
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a91      	ldr	r2, [pc, #580]	@ (800a8f8 <UART_SetConfig+0x2e4>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d125      	bne.n	800a704 <UART_SetConfig+0xf0>
 800a6b8:	4b90      	ldr	r3, [pc, #576]	@ (800a8fc <UART_SetConfig+0x2e8>)
 800a6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d81a      	bhi.n	800a6fc <UART_SetConfig+0xe8>
 800a6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <UART_SetConfig+0xb8>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6ed 	.word	0x0800a6ed
 800a6d4:	0800a6e5 	.word	0x0800a6e5
 800a6d8:	0800a6f5 	.word	0x0800a6f5
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e2:	e0d6      	b.n	800a892 <UART_SetConfig+0x27e>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ea:	e0d2      	b.n	800a892 <UART_SetConfig+0x27e>
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6f2:	e0ce      	b.n	800a892 <UART_SetConfig+0x27e>
 800a6f4:	2308      	movs	r3, #8
 800a6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6fa:	e0ca      	b.n	800a892 <UART_SetConfig+0x27e>
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a702:	e0c6      	b.n	800a892 <UART_SetConfig+0x27e>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a7d      	ldr	r2, [pc, #500]	@ (800a900 <UART_SetConfig+0x2ec>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d138      	bne.n	800a780 <UART_SetConfig+0x16c>
 800a70e:	4b7b      	ldr	r3, [pc, #492]	@ (800a8fc <UART_SetConfig+0x2e8>)
 800a710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a714:	f003 030c 	and.w	r3, r3, #12
 800a718:	2b0c      	cmp	r3, #12
 800a71a:	d82d      	bhi.n	800a778 <UART_SetConfig+0x164>
 800a71c:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <UART_SetConfig+0x110>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a759 	.word	0x0800a759
 800a728:	0800a779 	.word	0x0800a779
 800a72c:	0800a779 	.word	0x0800a779
 800a730:	0800a779 	.word	0x0800a779
 800a734:	0800a769 	.word	0x0800a769
 800a738:	0800a779 	.word	0x0800a779
 800a73c:	0800a779 	.word	0x0800a779
 800a740:	0800a779 	.word	0x0800a779
 800a744:	0800a761 	.word	0x0800a761
 800a748:	0800a779 	.word	0x0800a779
 800a74c:	0800a779 	.word	0x0800a779
 800a750:	0800a779 	.word	0x0800a779
 800a754:	0800a771 	.word	0x0800a771
 800a758:	2300      	movs	r3, #0
 800a75a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75e:	e098      	b.n	800a892 <UART_SetConfig+0x27e>
 800a760:	2302      	movs	r3, #2
 800a762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a766:	e094      	b.n	800a892 <UART_SetConfig+0x27e>
 800a768:	2304      	movs	r3, #4
 800a76a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a76e:	e090      	b.n	800a892 <UART_SetConfig+0x27e>
 800a770:	2308      	movs	r3, #8
 800a772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a776:	e08c      	b.n	800a892 <UART_SetConfig+0x27e>
 800a778:	2310      	movs	r3, #16
 800a77a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a77e:	e088      	b.n	800a892 <UART_SetConfig+0x27e>
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a5f      	ldr	r2, [pc, #380]	@ (800a904 <UART_SetConfig+0x2f0>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d125      	bne.n	800a7d6 <UART_SetConfig+0x1c2>
 800a78a:	4b5c      	ldr	r3, [pc, #368]	@ (800a8fc <UART_SetConfig+0x2e8>)
 800a78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a790:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a794:	2b30      	cmp	r3, #48	@ 0x30
 800a796:	d016      	beq.n	800a7c6 <UART_SetConfig+0x1b2>
 800a798:	2b30      	cmp	r3, #48	@ 0x30
 800a79a:	d818      	bhi.n	800a7ce <UART_SetConfig+0x1ba>
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d00a      	beq.n	800a7b6 <UART_SetConfig+0x1a2>
 800a7a0:	2b20      	cmp	r3, #32
 800a7a2:	d814      	bhi.n	800a7ce <UART_SetConfig+0x1ba>
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <UART_SetConfig+0x19a>
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d008      	beq.n	800a7be <UART_SetConfig+0x1aa>
 800a7ac:	e00f      	b.n	800a7ce <UART_SetConfig+0x1ba>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7b4:	e06d      	b.n	800a892 <UART_SetConfig+0x27e>
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7bc:	e069      	b.n	800a892 <UART_SetConfig+0x27e>
 800a7be:	2304      	movs	r3, #4
 800a7c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7c4:	e065      	b.n	800a892 <UART_SetConfig+0x27e>
 800a7c6:	2308      	movs	r3, #8
 800a7c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7cc:	e061      	b.n	800a892 <UART_SetConfig+0x27e>
 800a7ce:	2310      	movs	r3, #16
 800a7d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d4:	e05d      	b.n	800a892 <UART_SetConfig+0x27e>
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a4b      	ldr	r2, [pc, #300]	@ (800a908 <UART_SetConfig+0x2f4>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d125      	bne.n	800a82c <UART_SetConfig+0x218>
 800a7e0:	4b46      	ldr	r3, [pc, #280]	@ (800a8fc <UART_SetConfig+0x2e8>)
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a7ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7ec:	d016      	beq.n	800a81c <UART_SetConfig+0x208>
 800a7ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7f0:	d818      	bhi.n	800a824 <UART_SetConfig+0x210>
 800a7f2:	2b80      	cmp	r3, #128	@ 0x80
 800a7f4:	d00a      	beq.n	800a80c <UART_SetConfig+0x1f8>
 800a7f6:	2b80      	cmp	r3, #128	@ 0x80
 800a7f8:	d814      	bhi.n	800a824 <UART_SetConfig+0x210>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <UART_SetConfig+0x1f0>
 800a7fe:	2b40      	cmp	r3, #64	@ 0x40
 800a800:	d008      	beq.n	800a814 <UART_SetConfig+0x200>
 800a802:	e00f      	b.n	800a824 <UART_SetConfig+0x210>
 800a804:	2300      	movs	r3, #0
 800a806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a80a:	e042      	b.n	800a892 <UART_SetConfig+0x27e>
 800a80c:	2302      	movs	r3, #2
 800a80e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a812:	e03e      	b.n	800a892 <UART_SetConfig+0x27e>
 800a814:	2304      	movs	r3, #4
 800a816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a81a:	e03a      	b.n	800a892 <UART_SetConfig+0x27e>
 800a81c:	2308      	movs	r3, #8
 800a81e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a822:	e036      	b.n	800a892 <UART_SetConfig+0x27e>
 800a824:	2310      	movs	r3, #16
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82a:	e032      	b.n	800a892 <UART_SetConfig+0x27e>
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a30      	ldr	r2, [pc, #192]	@ (800a8f4 <UART_SetConfig+0x2e0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d12a      	bne.n	800a88c <UART_SetConfig+0x278>
 800a836:	4b31      	ldr	r3, [pc, #196]	@ (800a8fc <UART_SetConfig+0x2e8>)
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a83c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a840:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a844:	d01a      	beq.n	800a87c <UART_SetConfig+0x268>
 800a846:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a84a:	d81b      	bhi.n	800a884 <UART_SetConfig+0x270>
 800a84c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a850:	d00c      	beq.n	800a86c <UART_SetConfig+0x258>
 800a852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a856:	d815      	bhi.n	800a884 <UART_SetConfig+0x270>
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <UART_SetConfig+0x250>
 800a85c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a860:	d008      	beq.n	800a874 <UART_SetConfig+0x260>
 800a862:	e00f      	b.n	800a884 <UART_SetConfig+0x270>
 800a864:	2300      	movs	r3, #0
 800a866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a86a:	e012      	b.n	800a892 <UART_SetConfig+0x27e>
 800a86c:	2302      	movs	r3, #2
 800a86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a872:	e00e      	b.n	800a892 <UART_SetConfig+0x27e>
 800a874:	2304      	movs	r3, #4
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87a:	e00a      	b.n	800a892 <UART_SetConfig+0x27e>
 800a87c:	2308      	movs	r3, #8
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a882:	e006      	b.n	800a892 <UART_SetConfig+0x27e>
 800a884:	2310      	movs	r3, #16
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e002      	b.n	800a892 <UART_SetConfig+0x27e>
 800a88c:	2310      	movs	r3, #16
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a17      	ldr	r2, [pc, #92]	@ (800a8f4 <UART_SetConfig+0x2e0>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	f040 80a8 	bne.w	800a9ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a89e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8a2:	2b08      	cmp	r3, #8
 800a8a4:	d834      	bhi.n	800a910 <UART_SetConfig+0x2fc>
 800a8a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ac <UART_SetConfig+0x298>)
 800a8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ac:	0800a8d1 	.word	0x0800a8d1
 800a8b0:	0800a911 	.word	0x0800a911
 800a8b4:	0800a8d9 	.word	0x0800a8d9
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	0800a8df 	.word	0x0800a8df
 800a8c0:	0800a911 	.word	0x0800a911
 800a8c4:	0800a911 	.word	0x0800a911
 800a8c8:	0800a911 	.word	0x0800a911
 800a8cc:	0800a8e7 	.word	0x0800a8e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d0:	f7fd fea8 	bl	8008624 <HAL_RCC_GetPCLK1Freq>
 800a8d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8d6:	e021      	b.n	800a91c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <UART_SetConfig+0x2f8>)
 800a8da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8dc:	e01e      	b.n	800a91c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8de:	f7fd fe33 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 800a8e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8e4:	e01a      	b.n	800a91c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8ec:	e016      	b.n	800a91c <UART_SetConfig+0x308>
 800a8ee:	bf00      	nop
 800a8f0:	cfff69f3 	.word	0xcfff69f3
 800a8f4:	40008000 	.word	0x40008000
 800a8f8:	40013800 	.word	0x40013800
 800a8fc:	40021000 	.word	0x40021000
 800a900:	40004400 	.word	0x40004400
 800a904:	40004800 	.word	0x40004800
 800a908:	40004c00 	.word	0x40004c00
 800a90c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a91a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 812a 	beq.w	800ab78 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a928:	4a9e      	ldr	r2, [pc, #632]	@ (800aba4 <UART_SetConfig+0x590>)
 800a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92e:	461a      	mov	r2, r3
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	fbb3 f3f2 	udiv	r3, r3, r2
 800a936:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	4613      	mov	r3, r2
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	4413      	add	r3, r2
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	429a      	cmp	r2, r3
 800a946:	d305      	bcc.n	800a954 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	429a      	cmp	r2, r3
 800a952:	d903      	bls.n	800a95c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a95a:	e10d      	b.n	800ab78 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95e:	2200      	movs	r2, #0
 800a960:	60bb      	str	r3, [r7, #8]
 800a962:	60fa      	str	r2, [r7, #12]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a968:	4a8e      	ldr	r2, [pc, #568]	@ (800aba4 <UART_SetConfig+0x590>)
 800a96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2200      	movs	r2, #0
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a97a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a97e:	f7f5 fc9f 	bl	80002c0 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4610      	mov	r0, r2
 800a988:	4619      	mov	r1, r3
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	f04f 0300 	mov.w	r3, #0
 800a992:	020b      	lsls	r3, r1, #8
 800a994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a998:	0202      	lsls	r2, r0, #8
 800a99a:	6979      	ldr	r1, [r7, #20]
 800a99c:	6849      	ldr	r1, [r1, #4]
 800a99e:	0849      	lsrs	r1, r1, #1
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	eb12 0804 	adds.w	r8, r2, r4
 800a9aa:	eb43 0905 	adc.w	r9, r3, r5
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	469a      	mov	sl, r3
 800a9b6:	4693      	mov	fp, r2
 800a9b8:	4652      	mov	r2, sl
 800a9ba:	465b      	mov	r3, fp
 800a9bc:	4640      	mov	r0, r8
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f7f5 fc7e 	bl	80002c0 <__aeabi_uldivmod>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9d2:	d308      	bcc.n	800a9e6 <UART_SetConfig+0x3d2>
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9da:	d204      	bcs.n	800a9e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6a3a      	ldr	r2, [r7, #32]
 800a9e2:	60da      	str	r2, [r3, #12]
 800a9e4:	e0c8      	b.n	800ab78 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a9ec:	e0c4      	b.n	800ab78 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9f6:	d167      	bne.n	800aac8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a9f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d828      	bhi.n	800aa52 <UART_SetConfig+0x43e>
 800aa00:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <UART_SetConfig+0x3f4>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa3d 	.word	0x0800aa3d
 800aa14:	0800aa53 	.word	0x0800aa53
 800aa18:	0800aa43 	.word	0x0800aa43
 800aa1c:	0800aa53 	.word	0x0800aa53
 800aa20:	0800aa53 	.word	0x0800aa53
 800aa24:	0800aa53 	.word	0x0800aa53
 800aa28:	0800aa4b 	.word	0x0800aa4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa2c:	f7fd fdfa 	bl	8008624 <HAL_RCC_GetPCLK1Freq>
 800aa30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa32:	e014      	b.n	800aa5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa34:	f7fd fe0c 	bl	8008650 <HAL_RCC_GetPCLK2Freq>
 800aa38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa3a:	e010      	b.n	800aa5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa3c:	4b5a      	ldr	r3, [pc, #360]	@ (800aba8 <UART_SetConfig+0x594>)
 800aa3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa40:	e00d      	b.n	800aa5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa42:	f7fd fd81 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 800aa46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa48:	e009      	b.n	800aa5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa50:	e005      	b.n	800aa5e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 8089 	beq.w	800ab78 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6a:	4a4e      	ldr	r2, [pc, #312]	@ (800aba4 <UART_SetConfig+0x590>)
 800aa6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa70:	461a      	mov	r2, r3
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa78:	005a      	lsls	r2, r3, #1
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	085b      	lsrs	r3, r3, #1
 800aa80:	441a      	add	r2, r3
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	2b0f      	cmp	r3, #15
 800aa90:	d916      	bls.n	800aac0 <UART_SetConfig+0x4ac>
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa98:	d212      	bcs.n	800aac0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f023 030f 	bic.w	r3, r3, #15
 800aaa2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	085b      	lsrs	r3, r3, #1
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	8bfb      	ldrh	r3, [r7, #30]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	8bfa      	ldrh	r2, [r7, #30]
 800aabc:	60da      	str	r2, [r3, #12]
 800aabe:	e05b      	b.n	800ab78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aac6:	e057      	b.n	800ab78 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aacc:	2b08      	cmp	r3, #8
 800aace:	d828      	bhi.n	800ab22 <UART_SetConfig+0x50e>
 800aad0:	a201      	add	r2, pc, #4	@ (adr r2, 800aad8 <UART_SetConfig+0x4c4>)
 800aad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad6:	bf00      	nop
 800aad8:	0800aafd 	.word	0x0800aafd
 800aadc:	0800ab05 	.word	0x0800ab05
 800aae0:	0800ab0d 	.word	0x0800ab0d
 800aae4:	0800ab23 	.word	0x0800ab23
 800aae8:	0800ab13 	.word	0x0800ab13
 800aaec:	0800ab23 	.word	0x0800ab23
 800aaf0:	0800ab23 	.word	0x0800ab23
 800aaf4:	0800ab23 	.word	0x0800ab23
 800aaf8:	0800ab1b 	.word	0x0800ab1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aafc:	f7fd fd92 	bl	8008624 <HAL_RCC_GetPCLK1Freq>
 800ab00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab02:	e014      	b.n	800ab2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab04:	f7fd fda4 	bl	8008650 <HAL_RCC_GetPCLK2Freq>
 800ab08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab0a:	e010      	b.n	800ab2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab0c:	4b26      	ldr	r3, [pc, #152]	@ (800aba8 <UART_SetConfig+0x594>)
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab10:	e00d      	b.n	800ab2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab12:	f7fd fd19 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 800ab16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab18:	e009      	b.n	800ab2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab20:	e005      	b.n	800ab2e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab2c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d021      	beq.n	800ab78 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab38:	4a1a      	ldr	r2, [pc, #104]	@ (800aba4 <UART_SetConfig+0x590>)
 800ab3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	441a      	add	r2, r3
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	2b0f      	cmp	r3, #15
 800ab5c:	d909      	bls.n	800ab72 <UART_SetConfig+0x55e>
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab64:	d205      	bcs.n	800ab72 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60da      	str	r2, [r3, #12]
 800ab70:	e002      	b.n	800ab78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2200      	movs	r2, #0
 800ab92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3730      	adds	r7, #48	@ 0x30
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aba2:	bf00      	nop
 800aba4:	08010e6c 	.word	0x08010e6c
 800aba8:	00f42400 	.word	0x00f42400

0800abac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb8:	f003 0308 	and.w	r3, r3, #8
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00a      	beq.n	800abd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	430a      	orrs	r2, r1
 800abd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00a      	beq.n	800abf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00a      	beq.n	800ac1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1e:	f003 0304 	and.w	r3, r3, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00a      	beq.n	800ac5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac62:	f003 0320 	and.w	r3, r3, #32
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01a      	beq.n	800acc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acaa:	d10a      	bne.n	800acc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00a      	beq.n	800ace4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	605a      	str	r2, [r3, #4]
  }
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b098      	sub	sp, #96	@ 0x60
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad00:	f7f8 fb8c 	bl	800341c <HAL_GetTick>
 800ad04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0308 	and.w	r3, r3, #8
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d12f      	bne.n	800ad74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f88e 	bl	800ae44 <UART_WaitOnFlagUntilTimeout>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d022      	beq.n	800ad74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	e853 3f00 	ldrex	r3, [r3]
 800ad3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad42:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e6      	bne.n	800ad2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e063      	b.n	800ae3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d149      	bne.n	800ae16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f857 	bl	800ae44 <UART_WaitOnFlagUntilTimeout>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d03c      	beq.n	800ae16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	623b      	str	r3, [r7, #32]
   return(result);
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adba:	633b      	str	r3, [r7, #48]	@ 0x30
 800adbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e6      	bne.n	800ad9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f023 0301 	bic.w	r3, r3, #1
 800ade4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3308      	adds	r3, #8
 800adec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adee:	61fa      	str	r2, [r7, #28]
 800adf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	69b9      	ldr	r1, [r7, #24]
 800adf4:	69fa      	ldr	r2, [r7, #28]
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	617b      	str	r3, [r7, #20]
   return(result);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e5      	bne.n	800adce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2220      	movs	r2, #32
 800ae06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e012      	b.n	800ae3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3758      	adds	r7, #88	@ 0x58
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	4613      	mov	r3, r2
 800ae52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae54:	e04f      	b.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5c:	d04b      	beq.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae5e:	f7f8 fadd 	bl	800341c <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d302      	bcc.n	800ae74 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e04e      	b.n	800af16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0304 	and.w	r3, r3, #4
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d037      	beq.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2b80      	cmp	r3, #128	@ 0x80
 800ae8a:	d034      	beq.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b40      	cmp	r3, #64	@ 0x40
 800ae90:	d031      	beq.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	f003 0308 	and.w	r3, r3, #8
 800ae9c:	2b08      	cmp	r3, #8
 800ae9e:	d110      	bne.n	800aec2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2208      	movs	r2, #8
 800aea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 f838 	bl	800af1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e029      	b.n	800af16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aed0:	d111      	bne.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f81e 	bl	800af1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e00f      	b.n	800af16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	69da      	ldr	r2, [r3, #28]
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	4013      	ands	r3, r2
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	429a      	cmp	r2, r3
 800af04:	bf0c      	ite	eq
 800af06:	2301      	moveq	r3, #1
 800af08:	2300      	movne	r3, #0
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	429a      	cmp	r2, r3
 800af12:	d0a0      	beq.n	800ae56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af1e:	b480      	push	{r7}
 800af20:	b095      	sub	sp, #84	@ 0x54
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af2e:	e853 3f00 	ldrex	r3, [r3]
 800af32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	461a      	mov	r2, r3
 800af42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af44:	643b      	str	r3, [r7, #64]	@ 0x40
 800af46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af4c:	e841 2300 	strex	r3, r2, [r1]
 800af50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1e6      	bne.n	800af26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3308      	adds	r3, #8
 800af5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	e853 3f00 	ldrex	r3, [r3]
 800af66:	61fb      	str	r3, [r7, #28]
   return(result);
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af6e:	f023 0301 	bic.w	r3, r3, #1
 800af72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3308      	adds	r3, #8
 800af7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e3      	bne.n	800af58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af94:	2b01      	cmp	r3, #1
 800af96:	d118      	bne.n	800afca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	60bb      	str	r3, [r7, #8]
   return(result);
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f023 0310 	bic.w	r3, r3, #16
 800afac:	647b      	str	r3, [r7, #68]	@ 0x44
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afb6:	61bb      	str	r3, [r7, #24]
 800afb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6979      	ldr	r1, [r7, #20]
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	613b      	str	r3, [r7, #16]
   return(result);
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e6      	bne.n	800af98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2220      	movs	r2, #32
 800afce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afde:	bf00      	nop
 800afe0:	3754      	adds	r7, #84	@ 0x54
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afea:	b480      	push	{r7}
 800afec:	b085      	sub	sp, #20
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <HAL_UARTEx_DisableFifoMode+0x16>
 800affc:	2302      	movs	r3, #2
 800affe:	e027      	b.n	800b050 <HAL_UARTEx_DisableFifoMode+0x66>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2224      	movs	r2, #36	@ 0x24
 800b00c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 0201 	bic.w	r2, r2, #1
 800b026:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b02e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b070:	2302      	movs	r3, #2
 800b072:	e02d      	b.n	800b0d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2224      	movs	r2, #36	@ 0x24
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f022 0201 	bic.w	r2, r2, #1
 800b09a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f84f 	bl	800b154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e02d      	b.n	800b14c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2224      	movs	r2, #36	@ 0x24
 800b0fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 0201 	bic.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f811 	bl	800b154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b160:	2b00      	cmp	r3, #0
 800b162:	d108      	bne.n	800b176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b174:	e031      	b.n	800b1da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b176:	2308      	movs	r3, #8
 800b178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b17a:	2308      	movs	r3, #8
 800b17c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	0e5b      	lsrs	r3, r3, #25
 800b186:	b2db      	uxtb	r3, r3
 800b188:	f003 0307 	and.w	r3, r3, #7
 800b18c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	0f5b      	lsrs	r3, r3, #29
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	7b3a      	ldrb	r2, [r7, #12]
 800b1a2:	4911      	ldr	r1, [pc, #68]	@ (800b1e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b1a4:	5c8a      	ldrb	r2, [r1, r2]
 800b1a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1aa:	7b3a      	ldrb	r2, [r7, #12]
 800b1ac:	490f      	ldr	r1, [pc, #60]	@ (800b1ec <UARTEx_SetNbDataToProcess+0x98>)
 800b1ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	7b7a      	ldrb	r2, [r7, #13]
 800b1c0:	4909      	ldr	r1, [pc, #36]	@ (800b1e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b1c2:	5c8a      	ldrb	r2, [r1, r2]
 800b1c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1c8:	7b7a      	ldrb	r2, [r7, #13]
 800b1ca:	4908      	ldr	r1, [pc, #32]	@ (800b1ec <UARTEx_SetNbDataToProcess+0x98>)
 800b1cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	08010e84 	.word	0x08010e84
 800b1ec:	08010e8c 	.word	0x08010e8c

0800b1f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b200:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b204:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b21e:	b480      	push	{r7}
 800b220:	b085      	sub	sp, #20
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b226:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b22a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	b29b      	uxth	r3, r3
 800b238:	43db      	mvns	r3, r3
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4013      	ands	r3, r2
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	1d3b      	adds	r3, r7, #4
 800b25e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2201      	movs	r2, #1
 800b266:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b290:	b480      	push	{r7}
 800b292:	b0a7      	sub	sp, #156	@ 0x9c
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b2b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	78db      	ldrb	r3, [r3, #3]
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d81f      	bhi.n	800b302 <USB_ActivateEndpoint+0x72>
 800b2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c8 <USB_ActivateEndpoint+0x38>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b2f5 	.word	0x0800b2f5
 800b2d0:	0800b30b 	.word	0x0800b30b
 800b2d4:	0800b2e7 	.word	0x0800b2e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b2d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b2dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b2e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b2e4:	e012      	b.n	800b30c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b2e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b2ea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b2ee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b2f2:	e00b      	b.n	800b30c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b2f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b2f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b2fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b300:	e004      	b.n	800b30c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800b308:	e000      	b.n	800b30c <USB_ActivateEndpoint+0x7c>
      break;
 800b30a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	441a      	add	r2, r3
 800b316:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b31a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b31e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	b21b      	sxth	r3, r3
 800b33e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b346:	b21a      	sxth	r2, r3
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b21b      	sxth	r3, r3
 800b34e:	4313      	orrs	r3, r2
 800b350:	b21b      	sxth	r3, r3
 800b352:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	441a      	add	r2, r3
 800b360:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b36c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b374:	b29b      	uxth	r3, r3
 800b376:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	7b1b      	ldrb	r3, [r3, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f040 8180 	bne.w	800b682 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	785b      	ldrb	r3, [r3, #1]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 8084 	beq.w	800b494 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b396:	b29b      	uxth	r3, r3
 800b398:	461a      	mov	r2, r3
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	4413      	add	r3, r2
 800b39e:	61bb      	str	r3, [r7, #24]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	00da      	lsls	r2, r3, #3
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3ae:	617b      	str	r3, [r7, #20]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	88db      	ldrh	r3, [r3, #6]
 800b3b4:	085b      	lsrs	r3, r3, #1
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	827b      	strh	r3, [r7, #18]
 800b3ce:	8a7b      	ldrh	r3, [r7, #18]
 800b3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d01b      	beq.n	800b410 <USB_ActivateEndpoint+0x180>
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3ee:	823b      	strh	r3, [r7, #16]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	441a      	add	r2, r3
 800b3fa:	8a3b      	ldrh	r3, [r7, #16]
 800b3fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b408:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	78db      	ldrb	r3, [r3, #3]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d020      	beq.n	800b45a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b42a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b42e:	81bb      	strh	r3, [r7, #12]
 800b430:	89bb      	ldrh	r3, [r7, #12]
 800b432:	f083 0320 	eor.w	r3, r3, #32
 800b436:	81bb      	strh	r3, [r7, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	441a      	add	r2, r3
 800b442:	89bb      	ldrh	r3, [r7, #12]
 800b444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b44c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b454:	b29b      	uxth	r3, r3
 800b456:	8013      	strh	r3, [r2, #0]
 800b458:	e3f9      	b.n	800bc4e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b470:	81fb      	strh	r3, [r7, #14]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	441a      	add	r2, r3
 800b47c:	89fb      	ldrh	r3, [r7, #14]
 800b47e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b48e:	b29b      	uxth	r3, r3
 800b490:	8013      	strh	r3, [r2, #0]
 800b492:	e3dc      	b.n	800bc4e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	633b      	str	r3, [r7, #48]	@ 0x30
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	4413      	add	r3, r2
 800b4a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	00da      	lsls	r2, r3, #3
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	88db      	ldrh	r3, [r3, #6]
 800b4bc:	085b      	lsrs	r3, r3, #1
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d8:	4413      	add	r3, r2
 800b4da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	00da      	lsls	r2, r3, #3
 800b4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	801a      	strh	r2, [r3, #0]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <USB_ActivateEndpoint+0x28a>
 800b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b50e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b512:	b29a      	uxth	r2, r3
 800b514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b516:	801a      	strh	r2, [r3, #0]
 800b518:	e041      	b.n	800b59e <USB_ActivateEndpoint+0x30e>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b520:	d81c      	bhi.n	800b55c <USB_ActivateEndpoint+0x2cc>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	085b      	lsrs	r3, r3, #1
 800b528:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	2b00      	cmp	r3, #0
 800b536:	d004      	beq.n	800b542 <USB_ActivateEndpoint+0x2b2>
 800b538:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b53c:	3301      	adds	r3, #1
 800b53e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29a      	uxth	r2, r3
 800b548:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	029b      	lsls	r3, r3, #10
 800b550:	b29b      	uxth	r3, r3
 800b552:	4313      	orrs	r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	801a      	strh	r2, [r3, #0]
 800b55a:	e020      	b.n	800b59e <USB_ActivateEndpoint+0x30e>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	095b      	lsrs	r3, r3, #5
 800b562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 031f 	and.w	r3, r3, #31
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d104      	bne.n	800b57c <USB_ActivateEndpoint+0x2ec>
 800b572:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b576:	3b01      	subs	r3, #1
 800b578:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	b29a      	uxth	r2, r3
 800b582:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b586:	b29b      	uxth	r3, r3
 800b588:	029b      	lsls	r3, r3, #10
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	4313      	orrs	r3, r2
 800b58e:	b29b      	uxth	r3, r3
 800b590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b598:	b29a      	uxth	r2, r3
 800b59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b5ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b5ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01b      	beq.n	800b5ee <USB_ActivateEndpoint+0x35e>
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5cc:	843b      	strh	r3, [r7, #32]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	441a      	add	r2, r3
 800b5d8:	8c3b      	ldrh	r3, [r7, #32]
 800b5da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d124      	bne.n	800b640 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4413      	add	r3, r2
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	b29b      	uxth	r3, r3
 800b604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b60c:	83bb      	strh	r3, [r7, #28]
 800b60e:	8bbb      	ldrh	r3, [r7, #28]
 800b610:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b614:	83bb      	strh	r3, [r7, #28]
 800b616:	8bbb      	ldrh	r3, [r7, #28]
 800b618:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b61c:	83bb      	strh	r3, [r7, #28]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	441a      	add	r2, r3
 800b628:	8bbb      	ldrh	r3, [r7, #28]
 800b62a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b62e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	8013      	strh	r3, [r2, #0]
 800b63e:	e306      	b.n	800bc4e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b656:	83fb      	strh	r3, [r7, #30]
 800b658:	8bfb      	ldrh	r3, [r7, #30]
 800b65a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b65e:	83fb      	strh	r3, [r7, #30]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	441a      	add	r2, r3
 800b66a:	8bfb      	ldrh	r3, [r7, #30]
 800b66c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	8013      	strh	r3, [r2, #0]
 800b680:	e2e5      	b.n	800bc4e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	78db      	ldrb	r3, [r3, #3]
 800b686:	2b02      	cmp	r3, #2
 800b688:	d11e      	bne.n	800b6c8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	b29b      	uxth	r3, r3
 800b698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b69c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6a0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	441a      	add	r2, r3
 800b6ae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800b6b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b6be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	8013      	strh	r3, [r2, #0]
 800b6c6:	e01d      	b.n	800b704 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6de:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	441a      	add	r2, r3
 800b6ec:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b6f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b700:	b29b      	uxth	r3, r3
 800b702:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b70e:	b29b      	uxth	r3, r3
 800b710:	461a      	mov	r2, r3
 800b712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b714:	4413      	add	r3, r2
 800b716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	00da      	lsls	r2, r3, #3
 800b71e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b720:	4413      	add	r3, r2
 800b722:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b726:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	891b      	ldrh	r3, [r3, #8]
 800b72c:	085b      	lsrs	r3, r3, #1
 800b72e:	b29b      	uxth	r3, r3
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	b29a      	uxth	r2, r3
 800b734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b736:	801a      	strh	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b742:	b29b      	uxth	r3, r3
 800b744:	461a      	mov	r2, r3
 800b746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b748:	4413      	add	r3, r2
 800b74a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	00da      	lsls	r2, r3, #3
 800b752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b754:	4413      	add	r3, r2
 800b756:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b75a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	895b      	ldrh	r3, [r3, #10]
 800b760:	085b      	lsrs	r3, r3, #1
 800b762:	b29b      	uxth	r3, r3
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b76a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f040 81af 	bne.w	800bad4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800b786:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800b78a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01d      	beq.n	800b7ce <USB_ActivateEndpoint+0x53e>
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7a8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	441a      	add	r2, r3
 800b7b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b7ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800b7de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d01d      	beq.n	800b826 <USB_ActivateEndpoint+0x596>
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b800:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	441a      	add	r2, r3
 800b80e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800b812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b81a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b81e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b822:	b29b      	uxth	r3, r3
 800b824:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d16b      	bne.n	800b906 <USB_ActivateEndpoint+0x676>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b838:	b29b      	uxth	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b83e:	4413      	add	r3, r2
 800b840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	00da      	lsls	r2, r3, #3
 800b848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b84a:	4413      	add	r3, r2
 800b84c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b850:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b860:	801a      	strh	r2, [r3, #0]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <USB_ActivateEndpoint+0x5f0>
 800b86a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b878:	b29a      	uxth	r2, r3
 800b87a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b87c:	801a      	strh	r2, [r3, #0]
 800b87e:	e05d      	b.n	800b93c <USB_ActivateEndpoint+0x6ac>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b3e      	cmp	r3, #62	@ 0x3e
 800b886:	d81c      	bhi.n	800b8c2 <USB_ActivateEndpoint+0x632>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	085b      	lsrs	r3, r3, #1
 800b88e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d004      	beq.n	800b8a8 <USB_ActivateEndpoint+0x618>
 800b89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b8a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	029b      	lsls	r3, r3, #10
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8be:	801a      	strh	r2, [r3, #0]
 800b8c0:	e03c      	b.n	800b93c <USB_ActivateEndpoint+0x6ac>
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	095b      	lsrs	r3, r3, #5
 800b8c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f003 031f 	and.w	r3, r3, #31
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <USB_ActivateEndpoint+0x652>
 800b8d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b8e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	029b      	lsls	r3, r3, #10
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b902:	801a      	strh	r2, [r3, #0]
 800b904:	e01a      	b.n	800b93c <USB_ActivateEndpoint+0x6ac>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	785b      	ldrb	r3, [r3, #1]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d116      	bne.n	800b93c <USB_ActivateEndpoint+0x6ac>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	657b      	str	r3, [r7, #84]	@ 0x54
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b918:	b29b      	uxth	r3, r3
 800b91a:	461a      	mov	r2, r3
 800b91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b91e:	4413      	add	r3, r2
 800b920:	657b      	str	r3, [r7, #84]	@ 0x54
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	00da      	lsls	r2, r3, #3
 800b928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b92a:	4413      	add	r3, r2
 800b92c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b930:	653b      	str	r3, [r7, #80]	@ 0x50
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	b29a      	uxth	r2, r3
 800b938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b93a:	801a      	strh	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	785b      	ldrb	r3, [r3, #1]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d16b      	bne.n	800ba20 <USB_ActivateEndpoint+0x790>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b952:	b29b      	uxth	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b958:	4413      	add	r3, r2
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	00da      	lsls	r2, r3, #3
 800b962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b964:	4413      	add	r3, r2
 800b966:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b96a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	b29b      	uxth	r3, r3
 800b972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b976:	b29a      	uxth	r2, r3
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	801a      	strh	r2, [r3, #0]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10a      	bne.n	800b99a <USB_ActivateEndpoint+0x70a>
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b98e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b992:	b29a      	uxth	r2, r3
 800b994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b996:	801a      	strh	r2, [r3, #0]
 800b998:	e05b      	b.n	800ba52 <USB_ActivateEndpoint+0x7c2>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9a0:	d81c      	bhi.n	800b9dc <USB_ActivateEndpoint+0x74c>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	085b      	lsrs	r3, r3, #1
 800b9a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <USB_ActivateEndpoint+0x732>
 800b9b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b9bc:	3301      	adds	r3, #1
 800b9be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	029b      	lsls	r3, r3, #10
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d8:	801a      	strh	r2, [r3, #0]
 800b9da:	e03a      	b.n	800ba52 <USB_ActivateEndpoint+0x7c2>
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	095b      	lsrs	r3, r3, #5
 800b9e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	f003 031f 	and.w	r3, r3, #31
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d104      	bne.n	800b9fc <USB_ActivateEndpoint+0x76c>
 800b9f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	029b      	lsls	r3, r3, #10
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	801a      	strh	r2, [r3, #0]
 800ba1e:	e018      	b.n	800ba52 <USB_ActivateEndpoint+0x7c2>
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	785b      	ldrb	r3, [r3, #1]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d114      	bne.n	800ba52 <USB_ActivateEndpoint+0x7c2>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	461a      	mov	r2, r3
 800ba32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba34:	4413      	add	r3, r2
 800ba36:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	00da      	lsls	r2, r3, #3
 800ba3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba40:	4413      	add	r3, r2
 800ba42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba46:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba50:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba68:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ba6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ba6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ba72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ba74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	441a      	add	r2, r3
 800ba84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ba86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4413      	add	r3, r2
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bab0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	441a      	add	r2, r3
 800babc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800babe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bace:	b29b      	uxth	r3, r3
 800bad0:	8013      	strh	r3, [r2, #0]
 800bad2:	e0bc      	b.n	800bc4e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800bae4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01d      	beq.n	800bb2c <USB_ActivateEndpoint+0x89c>
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4413      	add	r3, r2
 800bafa:	881b      	ldrh	r3, [r3, #0]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	441a      	add	r2, r3
 800bb14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bb18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800bb3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800bb40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d01d      	beq.n	800bb84 <USB_ActivateEndpoint+0x8f4>
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb5e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	441a      	add	r2, r3
 800bb6c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800bb70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	78db      	ldrb	r3, [r3, #3]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d024      	beq.n	800bbd6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bba2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bba6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bbaa:	f083 0320 	eor.w	r3, r3, #32
 800bbae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	441a      	add	r2, r3
 800bbbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bbc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	8013      	strh	r3, [r2, #0]
 800bbd4:	e01d      	b.n	800bc12 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	441a      	add	r2, r3
 800bbfa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bbfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc28:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	441a      	add	r2, r3
 800bc36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bc3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bc4e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	379c      	adds	r7, #156	@ 0x9c
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop

0800bc60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b08d      	sub	sp, #52	@ 0x34
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	7b1b      	ldrb	r3, [r3, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f040 808e 	bne.w	800bd90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	785b      	ldrb	r3, [r3, #1]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d044      	beq.n	800bd06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	881b      	ldrh	r3, [r3, #0]
 800bc88:	81bb      	strh	r3, [r7, #12]
 800bc8a:	89bb      	ldrh	r3, [r7, #12]
 800bc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01b      	beq.n	800bccc <USB_DeactivateEndpoint+0x6c>
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4413      	add	r3, r2
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcaa:	817b      	strh	r3, [r7, #10]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	441a      	add	r2, r3
 800bcb6:	897b      	ldrh	r3, [r7, #10]
 800bcb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bce2:	813b      	strh	r3, [r7, #8]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	441a      	add	r2, r3
 800bcee:	893b      	ldrh	r3, [r7, #8]
 800bcf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	8013      	strh	r3, [r2, #0]
 800bd04:	e192      	b.n	800c02c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	827b      	strh	r3, [r7, #18]
 800bd14:	8a7b      	ldrh	r3, [r7, #18]
 800bd16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01b      	beq.n	800bd56 <USB_DeactivateEndpoint+0xf6>
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd34:	823b      	strh	r3, [r7, #16]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	441a      	add	r2, r3
 800bd40:	8a3b      	ldrh	r3, [r7, #16]
 800bd42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd6c:	81fb      	strh	r3, [r7, #14]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	441a      	add	r2, r3
 800bd78:	89fb      	ldrh	r3, [r7, #14]
 800bd7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	8013      	strh	r3, [r2, #0]
 800bd8e:	e14d      	b.n	800c02c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	785b      	ldrb	r3, [r3, #1]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f040 80a5 	bne.w	800bee4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	843b      	strh	r3, [r7, #32]
 800bda8:	8c3b      	ldrh	r3, [r7, #32]
 800bdaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01b      	beq.n	800bdea <USB_DeactivateEndpoint+0x18a>
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdc8:	83fb      	strh	r3, [r7, #30]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	441a      	add	r2, r3
 800bdd4:	8bfb      	ldrh	r3, [r7, #30]
 800bdd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	83bb      	strh	r3, [r7, #28]
 800bdf8:	8bbb      	ldrh	r3, [r7, #28]
 800bdfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01b      	beq.n	800be3a <USB_DeactivateEndpoint+0x1da>
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be18:	837b      	strh	r3, [r7, #26]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	441a      	add	r2, r3
 800be24:	8b7b      	ldrh	r3, [r7, #26]
 800be26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be36:	b29b      	uxth	r3, r3
 800be38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	b29b      	uxth	r3, r3
 800be48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be50:	833b      	strh	r3, [r7, #24]
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	441a      	add	r2, r3
 800be5c:	8b3b      	ldrh	r3, [r7, #24]
 800be5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be6e:	b29b      	uxth	r3, r3
 800be70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be88:	82fb      	strh	r3, [r7, #22]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	441a      	add	r2, r3
 800be94:	8afb      	ldrh	r3, [r7, #22]
 800be96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bec0:	82bb      	strh	r3, [r7, #20]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	441a      	add	r2, r3
 800becc:	8abb      	ldrh	r3, [r7, #20]
 800bece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bede:	b29b      	uxth	r3, r3
 800bee0:	8013      	strh	r3, [r2, #0]
 800bee2:	e0a3      	b.n	800c02c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bef2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01b      	beq.n	800bf34 <USB_DeactivateEndpoint+0x2d4>
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	441a      	add	r2, r3
 800bf1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bf20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bf42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01b      	beq.n	800bf84 <USB_DeactivateEndpoint+0x324>
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	441a      	add	r2, r3
 800bf6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4413      	add	r3, r2
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	441a      	add	r2, r3
 800bfa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bfa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	441a      	add	r2, r3
 800bfde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bfe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	b29b      	uxth	r3, r3
 800c002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c00a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	441a      	add	r2, r3
 800c016:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c01c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c028:	b29b      	uxth	r3, r3
 800c02a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3734      	adds	r7, #52	@ 0x34
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b0ac      	sub	sp, #176	@ 0xb0
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	785b      	ldrb	r3, [r3, #1]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	f040 84ca 	bne.w	800c9e2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	699a      	ldr	r2, [r3, #24]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	429a      	cmp	r2, r3
 800c058:	d904      	bls.n	800c064 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c062:	e003      	b.n	800c06c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	699b      	ldr	r3, [r3, #24]
 800c068:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	7b1b      	ldrb	r3, [r3, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d122      	bne.n	800c0ba <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	6959      	ldr	r1, [r3, #20]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	88da      	ldrh	r2, [r3, #6]
 800c07c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c080:	b29b      	uxth	r3, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 febd 	bl	800ce02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	613b      	str	r3, [r7, #16]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c092:	b29b      	uxth	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	4413      	add	r3, r2
 800c09a:	613b      	str	r3, [r7, #16]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	00da      	lsls	r2, r3, #3
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	801a      	strh	r2, [r3, #0]
 800c0b6:	f000 bc6f 	b.w	800c998 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	78db      	ldrb	r3, [r3, #3]
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	f040 831e 	bne.w	800c700 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	6a1a      	ldr	r2, [r3, #32]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	f240 82cf 	bls.w	800c670 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	441a      	add	r2, r3
 800c0f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c0fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c102:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	6a1a      	ldr	r2, [r3, #32]
 800c112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 814f 	beq.w	800c3d2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	785b      	ldrb	r3, [r3, #1]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d16b      	bne.n	800c218 <USB_EPStartXfer+0x1de>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c150:	4413      	add	r3, r2
 800c152:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	00da      	lsls	r2, r3, #3
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	4413      	add	r3, r2
 800c15e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c162:	627b      	str	r3, [r7, #36]	@ 0x24
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c16e:	b29a      	uxth	r2, r3
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	801a      	strh	r2, [r3, #0]
 800c174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <USB_EPStartXfer+0x158>
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	b29b      	uxth	r3, r3
 800c182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	801a      	strh	r2, [r3, #0]
 800c190:	e05b      	b.n	800c24a <USB_EPStartXfer+0x210>
 800c192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c196:	2b3e      	cmp	r3, #62	@ 0x3e
 800c198:	d81c      	bhi.n	800c1d4 <USB_EPStartXfer+0x19a>
 800c19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c19e:	085b      	lsrs	r3, r3, #1
 800c1a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d004      	beq.n	800c1ba <USB_EPStartXfer+0x180>
 800c1b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	029b      	lsls	r3, r3, #10
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d0:	801a      	strh	r2, [r3, #0]
 800c1d2:	e03a      	b.n	800c24a <USB_EPStartXfer+0x210>
 800c1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1d8:	095b      	lsrs	r3, r3, #5
 800c1da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1e2:	f003 031f 	and.w	r3, r3, #31
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <USB_EPStartXfer+0x1ba>
 800c1ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	029b      	lsls	r3, r3, #10
 800c202:	b29b      	uxth	r3, r3
 800c204:	4313      	orrs	r3, r2
 800c206:	b29b      	uxth	r3, r3
 800c208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c210:	b29a      	uxth	r2, r3
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	801a      	strh	r2, [r3, #0]
 800c216:	e018      	b.n	800c24a <USB_EPStartXfer+0x210>
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	785b      	ldrb	r3, [r3, #1]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d114      	bne.n	800c24a <USB_EPStartXfer+0x210>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c226:	b29b      	uxth	r3, r3
 800c228:	461a      	mov	r2, r3
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	4413      	add	r3, r2
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	00da      	lsls	r2, r3, #3
 800c236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c238:	4413      	add	r3, r2
 800c23a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c244:	b29a      	uxth	r2, r3
 800c246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	895b      	ldrh	r3, [r3, #10]
 800c24e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6959      	ldr	r1, [r3, #20]
 800c256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fdce 	bl	800ce02 <USB_WritePMA>
            ep->xfer_buff += len;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	695a      	ldr	r2, [r3, #20]
 800c26a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c26e:	441a      	add	r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	6a1a      	ldr	r2, [r3, #32]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d907      	bls.n	800c290 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	6a1a      	ldr	r2, [r3, #32]
 800c284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c288:	1ad2      	subs	r2, r2, r3
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	621a      	str	r2, [r3, #32]
 800c28e:	e006      	b.n	800c29e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	785b      	ldrb	r3, [r3, #1]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d16b      	bne.n	800c37e <USB_EPStartXfer+0x344>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	61bb      	str	r3, [r7, #24]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	61bb      	str	r3, [r7, #24]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	00da      	lsls	r2, r3, #3
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	801a      	strh	r2, [r3, #0]
 800c2da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10a      	bne.n	800c2f8 <USB_EPStartXfer+0x2be>
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	801a      	strh	r2, [r3, #0]
 800c2f6:	e05d      	b.n	800c3b4 <USB_EPStartXfer+0x37a>
 800c2f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2fe:	d81c      	bhi.n	800c33a <USB_EPStartXfer+0x300>
 800c300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c304:	085b      	lsrs	r3, r3, #1
 800c306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c30a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d004      	beq.n	800c320 <USB_EPStartXfer+0x2e6>
 800c316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c31a:	3301      	adds	r3, #1
 800c31c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	b29a      	uxth	r2, r3
 800c326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	029b      	lsls	r3, r3, #10
 800c32e:	b29b      	uxth	r3, r3
 800c330:	4313      	orrs	r3, r2
 800c332:	b29a      	uxth	r2, r3
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	801a      	strh	r2, [r3, #0]
 800c338:	e03c      	b.n	800c3b4 <USB_EPStartXfer+0x37a>
 800c33a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c348:	f003 031f 	and.w	r3, r3, #31
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d104      	bne.n	800c35a <USB_EPStartXfer+0x320>
 800c350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c354:	3b01      	subs	r3, #1
 800c356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	881b      	ldrh	r3, [r3, #0]
 800c35e:	b29a      	uxth	r2, r3
 800c360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c364:	b29b      	uxth	r3, r3
 800c366:	029b      	lsls	r3, r3, #10
 800c368:	b29b      	uxth	r3, r3
 800c36a:	4313      	orrs	r3, r2
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c376:	b29a      	uxth	r2, r3
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	801a      	strh	r2, [r3, #0]
 800c37c:	e01a      	b.n	800c3b4 <USB_EPStartXfer+0x37a>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d116      	bne.n	800c3b4 <USB_EPStartXfer+0x37a>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	623b      	str	r3, [r7, #32]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c390:	b29b      	uxth	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	4413      	add	r3, r2
 800c398:	623b      	str	r3, [r7, #32]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	00da      	lsls	r2, r3, #3
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	891b      	ldrh	r3, [r3, #8]
 800c3b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	6959      	ldr	r1, [r3, #20]
 800c3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fd19 	bl	800ce02 <USB_WritePMA>
 800c3d0:	e2e2      	b.n	800c998 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	785b      	ldrb	r3, [r3, #1]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d16b      	bne.n	800c4b2 <USB_EPStartXfer+0x478>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3ea:	4413      	add	r3, r2
 800c3ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	00da      	lsls	r2, r3, #3
 800c3f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	b29b      	uxth	r3, r3
 800c404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c408:	b29a      	uxth	r2, r3
 800c40a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10a      	bne.n	800c42c <USB_EPStartXfer+0x3f2>
 800c416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c424:	b29a      	uxth	r2, r3
 800c426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c428:	801a      	strh	r2, [r3, #0]
 800c42a:	e05d      	b.n	800c4e8 <USB_EPStartXfer+0x4ae>
 800c42c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c430:	2b3e      	cmp	r3, #62	@ 0x3e
 800c432:	d81c      	bhi.n	800c46e <USB_EPStartXfer+0x434>
 800c434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c438:	085b      	lsrs	r3, r3, #1
 800c43a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	d004      	beq.n	800c454 <USB_EPStartXfer+0x41a>
 800c44a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c44e:	3301      	adds	r3, #1
 800c450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29a      	uxth	r2, r3
 800c45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c45e:	b29b      	uxth	r3, r3
 800c460:	029b      	lsls	r3, r3, #10
 800c462:	b29b      	uxth	r3, r3
 800c464:	4313      	orrs	r3, r2
 800c466:	b29a      	uxth	r2, r3
 800c468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c46a:	801a      	strh	r2, [r3, #0]
 800c46c:	e03c      	b.n	800c4e8 <USB_EPStartXfer+0x4ae>
 800c46e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c472:	095b      	lsrs	r3, r3, #5
 800c474:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c47c:	f003 031f 	and.w	r3, r3, #31
 800c480:	2b00      	cmp	r3, #0
 800c482:	d104      	bne.n	800c48e <USB_EPStartXfer+0x454>
 800c484:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c488:	3b01      	subs	r3, #1
 800c48a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	b29a      	uxth	r2, r3
 800c494:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c498:	b29b      	uxth	r3, r3
 800c49a:	029b      	lsls	r3, r3, #10
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ae:	801a      	strh	r2, [r3, #0]
 800c4b0:	e01a      	b.n	800c4e8 <USB_EPStartXfer+0x4ae>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	785b      	ldrb	r3, [r3, #1]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d116      	bne.n	800c4e8 <USB_EPStartXfer+0x4ae>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ca:	4413      	add	r3, r2
 800c4cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	00da      	lsls	r2, r3, #3
 800c4d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	891b      	ldrh	r3, [r3, #8]
 800c4ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	6959      	ldr	r1, [r3, #20]
 800c4f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fc7f 	bl	800ce02 <USB_WritePMA>
            ep->xfer_buff += len;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	695a      	ldr	r2, [r3, #20]
 800c508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c50c:	441a      	add	r2, r3
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d907      	bls.n	800c52e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	6a1a      	ldr	r2, [r3, #32]
 800c522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	621a      	str	r2, [r3, #32]
 800c52c:	e006      	b.n	800c53c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2200      	movs	r2, #0
 800c53a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	785b      	ldrb	r3, [r3, #1]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d16b      	bne.n	800c620 <USB_EPStartXfer+0x5e6>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c552:	b29b      	uxth	r3, r3
 800c554:	461a      	mov	r2, r3
 800c556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c558:	4413      	add	r3, r2
 800c55a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	00da      	lsls	r2, r3, #3
 800c562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c564:	4413      	add	r3, r2
 800c566:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c56a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29b      	uxth	r3, r3
 800c572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c576:	b29a      	uxth	r2, r3
 800c578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c57a:	801a      	strh	r2, [r3, #0]
 800c57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10a      	bne.n	800c59a <USB_EPStartXfer+0x560>
 800c584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	b29b      	uxth	r3, r3
 800c58a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c58e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c592:	b29a      	uxth	r2, r3
 800c594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c596:	801a      	strh	r2, [r3, #0]
 800c598:	e05b      	b.n	800c652 <USB_EPStartXfer+0x618>
 800c59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c59e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5a0:	d81c      	bhi.n	800c5dc <USB_EPStartXfer+0x5a2>
 800c5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5a6:	085b      	lsrs	r3, r3, #1
 800c5a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d004      	beq.n	800c5c2 <USB_EPStartXfer+0x588>
 800c5b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5bc:	3301      	adds	r3, #1
 800c5be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	029b      	lsls	r3, r3, #10
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d8:	801a      	strh	r2, [r3, #0]
 800c5da:	e03a      	b.n	800c652 <USB_EPStartXfer+0x618>
 800c5dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5e0:	095b      	lsrs	r3, r3, #5
 800c5e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5ea:	f003 031f 	and.w	r3, r3, #31
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d104      	bne.n	800c5fc <USB_EPStartXfer+0x5c2>
 800c5f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	b29a      	uxth	r2, r3
 800c602:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c606:	b29b      	uxth	r3, r3
 800c608:	029b      	lsls	r3, r3, #10
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	4313      	orrs	r3, r2
 800c60e:	b29b      	uxth	r3, r3
 800c610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c618:	b29a      	uxth	r2, r3
 800c61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61c:	801a      	strh	r2, [r3, #0]
 800c61e:	e018      	b.n	800c652 <USB_EPStartXfer+0x618>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d114      	bne.n	800c652 <USB_EPStartXfer+0x618>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c62e:	b29b      	uxth	r3, r3
 800c630:	461a      	mov	r2, r3
 800c632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c634:	4413      	add	r3, r2
 800c636:	643b      	str	r3, [r7, #64]	@ 0x40
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	00da      	lsls	r2, r3, #3
 800c63e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c640:	4413      	add	r3, r2
 800c642:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c650:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	895b      	ldrh	r3, [r3, #10]
 800c656:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	6959      	ldr	r1, [r3, #20]
 800c65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c662:	b29b      	uxth	r3, r3
 800c664:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fbca 	bl	800ce02 <USB_WritePMA>
 800c66e:	e193      	b.n	800c998 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	6a1b      	ldr	r3, [r3, #32]
 800c674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	881b      	ldrh	r3, [r3, #0]
 800c684:	b29b      	uxth	r3, r3
 800c686:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c68a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c68e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	441a      	add	r2, r3
 800c69c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c6a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6c4:	4413      	add	r3, r2
 800c6c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	00da      	lsls	r2, r3, #3
 800c6ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	891b      	ldrh	r3, [r3, #8]
 800c6e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6959      	ldr	r1, [r3, #20]
 800c6ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fb82 	bl	800ce02 <USB_WritePMA>
 800c6fe:	e14b      	b.n	800c998 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	6a1a      	ldr	r2, [r3, #32]
 800c704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c708:	1ad2      	subs	r2, r2, r3
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 809a 	beq.w	800c85a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	673b      	str	r3, [r7, #112]	@ 0x70
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	785b      	ldrb	r3, [r3, #1]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d16b      	bne.n	800c80a <USB_EPStartXfer+0x7d0>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	461a      	mov	r2, r3
 800c740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c742:	4413      	add	r3, r2
 800c744:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	00da      	lsls	r2, r3, #3
 800c74c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c74e:	4413      	add	r3, r2
 800c750:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c754:	667b      	str	r3, [r7, #100]	@ 0x64
 800c756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c760:	b29a      	uxth	r2, r3
 800c762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c764:	801a      	strh	r2, [r3, #0]
 800c766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <USB_EPStartXfer+0x74a>
 800c76e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	b29b      	uxth	r3, r3
 800c774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c780:	801a      	strh	r2, [r3, #0]
 800c782:	e05b      	b.n	800c83c <USB_EPStartXfer+0x802>
 800c784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c788:	2b3e      	cmp	r3, #62	@ 0x3e
 800c78a:	d81c      	bhi.n	800c7c6 <USB_EPStartXfer+0x78c>
 800c78c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c790:	085b      	lsrs	r3, r3, #1
 800c792:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d004      	beq.n	800c7ac <USB_EPStartXfer+0x772>
 800c7a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	029b      	lsls	r3, r3, #10
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7c2:	801a      	strh	r2, [r3, #0]
 800c7c4:	e03a      	b.n	800c83c <USB_EPStartXfer+0x802>
 800c7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7ca:	095b      	lsrs	r3, r3, #5
 800c7cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7d4:	f003 031f 	and.w	r3, r3, #31
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d104      	bne.n	800c7e6 <USB_EPStartXfer+0x7ac>
 800c7dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	029b      	lsls	r3, r3, #10
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c802:	b29a      	uxth	r2, r3
 800c804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c806:	801a      	strh	r2, [r3, #0]
 800c808:	e018      	b.n	800c83c <USB_EPStartXfer+0x802>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d114      	bne.n	800c83c <USB_EPStartXfer+0x802>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c818:	b29b      	uxth	r3, r3
 800c81a:	461a      	mov	r2, r3
 800c81c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c81e:	4413      	add	r3, r2
 800c820:	673b      	str	r3, [r7, #112]	@ 0x70
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	00da      	lsls	r2, r3, #3
 800c828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c82a:	4413      	add	r3, r2
 800c82c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c830:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c836:	b29a      	uxth	r2, r3
 800c838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c83a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	895b      	ldrh	r3, [r3, #10]
 800c840:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	6959      	ldr	r1, [r3, #20]
 800c848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fad5 	bl	800ce02 <USB_WritePMA>
 800c858:	e09e      	b.n	800c998 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	785b      	ldrb	r3, [r3, #1]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d16b      	bne.n	800c93a <USB_EPStartXfer+0x900>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	461a      	mov	r2, r3
 800c870:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c872:	4413      	add	r3, r2
 800c874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	00da      	lsls	r2, r3, #3
 800c87c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c87e:	4413      	add	r3, r2
 800c880:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c884:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c888:	881b      	ldrh	r3, [r3, #0]
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c890:	b29a      	uxth	r2, r3
 800c892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c894:	801a      	strh	r2, [r3, #0]
 800c896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10a      	bne.n	800c8b4 <USB_EPStartXfer+0x87a>
 800c89e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8b0:	801a      	strh	r2, [r3, #0]
 800c8b2:	e063      	b.n	800c97c <USB_EPStartXfer+0x942>
 800c8b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8ba:	d81c      	bhi.n	800c8f6 <USB_EPStartXfer+0x8bc>
 800c8bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8c0:	085b      	lsrs	r3, r3, #1
 800c8c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d004      	beq.n	800c8dc <USB_EPStartXfer+0x8a2>
 800c8d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	029b      	lsls	r3, r3, #10
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8f2:	801a      	strh	r2, [r3, #0]
 800c8f4:	e042      	b.n	800c97c <USB_EPStartXfer+0x942>
 800c8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8fa:	095b      	lsrs	r3, r3, #5
 800c8fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c904:	f003 031f 	and.w	r3, r3, #31
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d104      	bne.n	800c916 <USB_EPStartXfer+0x8dc>
 800c90c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c910:	3b01      	subs	r3, #1
 800c912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c920:	b29b      	uxth	r3, r3
 800c922:	029b      	lsls	r3, r3, #10
 800c924:	b29b      	uxth	r3, r3
 800c926:	4313      	orrs	r3, r2
 800c928:	b29b      	uxth	r3, r3
 800c92a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c92e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c932:	b29a      	uxth	r2, r3
 800c934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c936:	801a      	strh	r2, [r3, #0]
 800c938:	e020      	b.n	800c97c <USB_EPStartXfer+0x942>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	785b      	ldrb	r3, [r3, #1]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d11c      	bne.n	800c97c <USB_EPStartXfer+0x942>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c94e:	b29b      	uxth	r3, r3
 800c950:	461a      	mov	r2, r3
 800c952:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c956:	4413      	add	r3, r2
 800c958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	00da      	lsls	r2, r3, #3
 800c962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c966:	4413      	add	r3, r2
 800c968:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c96c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c974:	b29a      	uxth	r2, r3
 800c976:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c97a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	891b      	ldrh	r3, [r3, #8]
 800c980:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	6959      	ldr	r1, [r3, #20]
 800c988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fa35 	bl	800ce02 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	881b      	ldrh	r3, [r3, #0]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9ae:	817b      	strh	r3, [r7, #10]
 800c9b0:	897b      	ldrh	r3, [r7, #10]
 800c9b2:	f083 0310 	eor.w	r3, r3, #16
 800c9b6:	817b      	strh	r3, [r7, #10]
 800c9b8:	897b      	ldrh	r3, [r7, #10]
 800c9ba:	f083 0320 	eor.w	r3, r3, #32
 800c9be:	817b      	strh	r3, [r7, #10]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	441a      	add	r2, r3
 800c9ca:	897b      	ldrh	r3, [r7, #10]
 800c9cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	8013      	strh	r3, [r2, #0]
 800c9e0:	e0d5      	b.n	800cb8e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	7b1b      	ldrb	r3, [r3, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d156      	bne.n	800ca98 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	699b      	ldr	r3, [r3, #24]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d122      	bne.n	800ca38 <USB_EPStartXfer+0x9fe>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	78db      	ldrb	r3, [r3, #3]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d11e      	bne.n	800ca38 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca10:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	441a      	add	r2, r3
 800ca1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ca22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	8013      	strh	r3, [r2, #0]
 800ca36:	e01d      	b.n	800ca74 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ca4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca4e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	441a      	add	r2, r3
 800ca5c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ca60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	699a      	ldr	r2, [r3, #24]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d907      	bls.n	800ca90 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	699a      	ldr	r2, [r3, #24]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	1ad2      	subs	r2, r2, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	619a      	str	r2, [r3, #24]
 800ca8e:	e054      	b.n	800cb3a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2200      	movs	r2, #0
 800ca94:	619a      	str	r2, [r3, #24]
 800ca96:	e050      	b.n	800cb3a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	78db      	ldrb	r3, [r3, #3]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d142      	bne.n	800cb26 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d048      	beq.n	800cb3a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cab8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cabc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <USB_EPStartXfer+0xa96>
 800cac4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10b      	bne.n	800cae8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cad0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d12e      	bne.n	800cb3a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cadc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d128      	bne.n	800cb3a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4413      	add	r3, r2
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cafa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cafe:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	441a      	add	r2, r3
 800cb0c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800cb10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	8013      	strh	r3, [r2, #0]
 800cb24:	e009      	b.n	800cb3a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	78db      	ldrb	r3, [r3, #3]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d103      	bne.n	800cb36 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2200      	movs	r2, #0
 800cb32:	619a      	str	r2, [r3, #24]
 800cb34:	e001      	b.n	800cb3a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e02a      	b.n	800cb90 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cb54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cb58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cb5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cb60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cb64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cb68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	441a      	add	r2, r3
 800cb76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cb7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	37b0      	adds	r7, #176	@ 0xb0
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	785b      	ldrb	r3, [r3, #1]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d020      	beq.n	800cbec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	4413      	add	r3, r2
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbc0:	81bb      	strh	r3, [r7, #12]
 800cbc2:	89bb      	ldrh	r3, [r7, #12]
 800cbc4:	f083 0310 	eor.w	r3, r3, #16
 800cbc8:	81bb      	strh	r3, [r7, #12]
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	441a      	add	r2, r3
 800cbd4:	89bb      	ldrh	r3, [r7, #12]
 800cbd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	8013      	strh	r3, [r2, #0]
 800cbea:	e01f      	b.n	800cc2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc02:	81fb      	strh	r3, [r7, #14]
 800cc04:	89fb      	ldrh	r3, [r7, #14]
 800cc06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc0a:	81fb      	strh	r3, [r7, #14]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	441a      	add	r2, r3
 800cc16:	89fb      	ldrh	r3, [r7, #14]
 800cc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b087      	sub	sp, #28
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d04c      	beq.n	800cce6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	823b      	strh	r3, [r7, #16]
 800cc5a:	8a3b      	ldrh	r3, [r7, #16]
 800cc5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d01b      	beq.n	800cc9c <USB_EPClearStall+0x62>
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc7a:	81fb      	strh	r3, [r7, #14]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	441a      	add	r2, r3
 800cc86:	89fb      	ldrh	r3, [r7, #14]
 800cc88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	78db      	ldrb	r3, [r3, #3]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d06c      	beq.n	800cd7e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccba:	81bb      	strh	r3, [r7, #12]
 800ccbc:	89bb      	ldrh	r3, [r7, #12]
 800ccbe:	f083 0320 	eor.w	r3, r3, #32
 800ccc2:	81bb      	strh	r3, [r7, #12]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	441a      	add	r2, r3
 800ccce:	89bb      	ldrh	r3, [r7, #12]
 800ccd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8013      	strh	r3, [r2, #0]
 800cce4:	e04b      	b.n	800cd7e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	82fb      	strh	r3, [r7, #22]
 800ccf4:	8afb      	ldrh	r3, [r7, #22]
 800ccf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d01b      	beq.n	800cd36 <USB_EPClearStall+0xfc>
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd14:	82bb      	strh	r3, [r7, #20]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	441a      	add	r2, r3
 800cd20:	8abb      	ldrh	r3, [r7, #20]
 800cd22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd4c:	827b      	strh	r3, [r7, #18]
 800cd4e:	8a7b      	ldrh	r3, [r7, #18]
 800cd50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd54:	827b      	strh	r3, [r7, #18]
 800cd56:	8a7b      	ldrh	r3, [r7, #18]
 800cd58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cd5c:	827b      	strh	r3, [r7, #18]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	441a      	add	r2, r3
 800cd68:	8a7b      	ldrh	r3, [r7, #18]
 800cd6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	371c      	adds	r7, #28
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cd98:	78fb      	ldrb	r3, [r7, #3]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d103      	bne.n	800cda6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2280      	movs	r2, #128	@ 0x80
 800cda2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	370c      	adds	r7, #12
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b085      	sub	sp, #20
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b08b      	sub	sp, #44	@ 0x2c
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	461a      	mov	r2, r3
 800ce10:	460b      	mov	r3, r1
 800ce12:	80fb      	strh	r3, [r7, #6]
 800ce14:	4613      	mov	r3, r2
 800ce16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce18:	88bb      	ldrh	r3, [r7, #4]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	085b      	lsrs	r3, r3, #1
 800ce1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce28:	88fa      	ldrh	r2, [r7, #6]
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce38:	e01c      	b.n	800ce74 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	3301      	adds	r3, #1
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	b21b      	sxth	r3, r3
 800ce48:	021b      	lsls	r3, r3, #8
 800ce4a:	b21a      	sxth	r2, r3
 800ce4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	b21b      	sxth	r3, r3
 800ce54:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	8a7a      	ldrh	r2, [r7, #18]
 800ce5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	3302      	adds	r3, #2
 800ce60:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	3301      	adds	r3, #1
 800ce66:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	3b01      	subs	r3, #1
 800ce72:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1df      	bne.n	800ce3a <USB_WritePMA+0x38>
  }
}
 800ce7a:	bf00      	nop
 800ce7c:	bf00      	nop
 800ce7e:	372c      	adds	r7, #44	@ 0x2c
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b08b      	sub	sp, #44	@ 0x2c
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	4611      	mov	r1, r2
 800ce94:	461a      	mov	r2, r3
 800ce96:	460b      	mov	r3, r1
 800ce98:	80fb      	strh	r3, [r7, #6]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ce9e:	88bb      	ldrh	r3, [r7, #4]
 800cea0:	085b      	lsrs	r3, r3, #1
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ceae:	88fa      	ldrh	r2, [r7, #6]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ceb8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cebe:	e018      	b.n	800cef2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cec8:	6a3b      	ldr	r3, [r7, #32]
 800ceca:	3302      	adds	r3, #2
 800cecc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	3301      	adds	r3, #1
 800ceda:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	0a1b      	lsrs	r3, r3, #8
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	3301      	adds	r3, #1
 800ceea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceee:	3b01      	subs	r3, #1
 800cef0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e3      	bne.n	800cec0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cef8:	88bb      	ldrh	r3, [r7, #4]
 800cefa:	f003 0301 	and.w	r3, r3, #1
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d007      	beq.n	800cf14 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	881b      	ldrh	r3, [r3, #0]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	701a      	strb	r2, [r3, #0]
  }
}
 800cf14:	bf00      	nop
 800cf16:	372c      	adds	r7, #44	@ 0x2c
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800cf2c:	2010      	movs	r0, #16
 800cf2e:	f001 fe3d 	bl	800ebac <USBD_static_malloc>
 800cf32:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d105      	bne.n	800cf46 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf42:	2302      	movs	r3, #2
 800cf44:	e01b      	b.n	800cf7e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	7c1b      	ldrb	r3, [r3, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d103      	bne.n	800cf5e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2207      	movs	r2, #7
 800cf5a:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800cf5c:	e002      	b.n	800cf64 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800cf64:	2304      	movs	r3, #4
 800cf66:	2203      	movs	r2, #3
 800cf68:	2181      	movs	r1, #129	@ 0x81
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f001 fd0d 	bl	800e98a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b082      	sub	sp, #8
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	460b      	mov	r3, r1
 800cf90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800cf92:	2181      	movs	r1, #129	@ 0x81
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 fd1e 	bl	800e9d6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d009      	beq.n	800cfc4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fe06 	bl	800ebc8 <USBD_static_free>
    pdev->pClassData = NULL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cfe0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e0e8      	b.n	800d1c6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d046      	beq.n	800d08e <USBD_HID_Setup+0xbe>
 800d000:	2b20      	cmp	r3, #32
 800d002:	f040 80d8 	bne.w	800d1b6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	785b      	ldrb	r3, [r3, #1]
 800d00a:	3b02      	subs	r3, #2
 800d00c:	2b09      	cmp	r3, #9
 800d00e:	d836      	bhi.n	800d07e <USBD_HID_Setup+0xae>
 800d010:	a201      	add	r2, pc, #4	@ (adr r2, 800d018 <USBD_HID_Setup+0x48>)
 800d012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d016:	bf00      	nop
 800d018:	0800d06f 	.word	0x0800d06f
 800d01c:	0800d04f 	.word	0x0800d04f
 800d020:	0800d07f 	.word	0x0800d07f
 800d024:	0800d07f 	.word	0x0800d07f
 800d028:	0800d07f 	.word	0x0800d07f
 800d02c:	0800d07f 	.word	0x0800d07f
 800d030:	0800d07f 	.word	0x0800d07f
 800d034:	0800d07f 	.word	0x0800d07f
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d041 	.word	0x0800d041
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	885b      	ldrh	r3, [r3, #2]
 800d044:	b2db      	uxtb	r3, r3
 800d046:	461a      	mov	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	601a      	str	r2, [r3, #0]
          break;
 800d04c:	e01e      	b.n	800d08c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2201      	movs	r2, #1
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f001 f9b0 	bl	800e3ba <USBD_CtlSendData>
          break;
 800d05a:	e017      	b.n	800d08c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	885b      	ldrh	r3, [r3, #2]
 800d060:	0a1b      	lsrs	r3, r3, #8
 800d062:	b29b      	uxth	r3, r3
 800d064:	b2db      	uxtb	r3, r3
 800d066:	461a      	mov	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	605a      	str	r2, [r3, #4]
          break;
 800d06c:	e00e      	b.n	800d08c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3304      	adds	r3, #4
 800d072:	2201      	movs	r2, #1
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 f99f 	bl	800e3ba <USBD_CtlSendData>
          break;
 800d07c:	e006      	b.n	800d08c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f001 f929 	bl	800e2d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800d086:	2303      	movs	r3, #3
 800d088:	75fb      	strb	r3, [r7, #23]
          break;
 800d08a:	bf00      	nop
      }
      break;
 800d08c:	e09a      	b.n	800d1c4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	785b      	ldrb	r3, [r3, #1]
 800d092:	2b0b      	cmp	r3, #11
 800d094:	f200 8086 	bhi.w	800d1a4 <USBD_HID_Setup+0x1d4>
 800d098:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a0 <USBD_HID_Setup+0xd0>)
 800d09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d09e:	bf00      	nop
 800d0a0:	0800d0d1 	.word	0x0800d0d1
 800d0a4:	0800d1b3 	.word	0x0800d1b3
 800d0a8:	0800d1a5 	.word	0x0800d1a5
 800d0ac:	0800d1a5 	.word	0x0800d1a5
 800d0b0:	0800d1a5 	.word	0x0800d1a5
 800d0b4:	0800d1a5 	.word	0x0800d1a5
 800d0b8:	0800d0fb 	.word	0x0800d0fb
 800d0bc:	0800d1a5 	.word	0x0800d1a5
 800d0c0:	0800d1a5 	.word	0x0800d1a5
 800d0c4:	0800d1a5 	.word	0x0800d1a5
 800d0c8:	0800d153 	.word	0x0800d153
 800d0cc:	0800d17d 	.word	0x0800d17d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d107      	bne.n	800d0ec <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d0dc:	f107 030a 	add.w	r3, r7, #10
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 f968 	bl	800e3ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0ea:	e063      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f001 f8f2 	bl	800e2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	75fb      	strb	r3, [r7, #23]
          break;
 800d0f8:	e05c      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	885b      	ldrh	r3, [r3, #2]
 800d0fe:	0a1b      	lsrs	r3, r3, #8
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b22      	cmp	r3, #34	@ 0x22
 800d104:	d108      	bne.n	800d118 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	88db      	ldrh	r3, [r3, #6]
 800d10a:	2b4a      	cmp	r3, #74	@ 0x4a
 800d10c:	bf28      	it	cs
 800d10e:	234a      	movcs	r3, #74	@ 0x4a
 800d110:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800d112:	4b2f      	ldr	r3, [pc, #188]	@ (800d1d0 <USBD_HID_Setup+0x200>)
 800d114:	613b      	str	r3, [r7, #16]
 800d116:	e015      	b.n	800d144 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	885b      	ldrh	r3, [r3, #2]
 800d11c:	0a1b      	lsrs	r3, r3, #8
 800d11e:	b29b      	uxth	r3, r3
 800d120:	2b21      	cmp	r3, #33	@ 0x21
 800d122:	d108      	bne.n	800d136 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800d124:	4b2b      	ldr	r3, [pc, #172]	@ (800d1d4 <USBD_HID_Setup+0x204>)
 800d126:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	88db      	ldrh	r3, [r3, #6]
 800d12c:	2b09      	cmp	r3, #9
 800d12e:	bf28      	it	cs
 800d130:	2309      	movcs	r3, #9
 800d132:	82bb      	strh	r3, [r7, #20]
 800d134:	e006      	b.n	800d144 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 f8cd 	bl	800e2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d13e:	2303      	movs	r3, #3
 800d140:	75fb      	strb	r3, [r7, #23]
            break;
 800d142:	e037      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800d144:	8abb      	ldrh	r3, [r7, #20]
 800d146:	461a      	mov	r2, r3
 800d148:	6939      	ldr	r1, [r7, #16]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 f935 	bl	800e3ba <USBD_CtlSendData>
          break;
 800d150:	e030      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d107      	bne.n	800d16e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3308      	adds	r3, #8
 800d162:	2201      	movs	r2, #1
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 f927 	bl	800e3ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d16c:	e022      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 f8b1 	bl	800e2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d176:	2303      	movs	r3, #3
 800d178:	75fb      	strb	r3, [r7, #23]
          break;
 800d17a:	e01b      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b03      	cmp	r3, #3
 800d186:	d106      	bne.n	800d196 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	885b      	ldrh	r3, [r3, #2]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	461a      	mov	r2, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d194:	e00e      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 f89d 	bl	800e2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1a2:	e007      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 f896 	bl	800e2d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	75fb      	strb	r3, [r7, #23]
          break;
 800d1b0:	e000      	b.n	800d1b4 <USBD_HID_Setup+0x1e4>
          break;
 800d1b2:	bf00      	nop
      }
      break;
 800d1b4:	e006      	b.n	800d1c4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 f88d 	bl	800e2d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800d1c2:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	200000cc 	.word	0x200000cc
 800d1d4:	200000b4 	.word	0x200000b4

0800d1d8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1ec:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d101      	bne.n	800d1f8 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e013      	b.n	800d220 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b03      	cmp	r3, #3
 800d202:	d10c      	bne.n	800d21e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	7b1b      	ldrb	r3, [r3, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d108      	bne.n	800d21e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2201      	movs	r2, #1
 800d210:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	2181      	movs	r1, #129	@ 0x81
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f001 fc84 	bl	800eb26 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2222      	movs	r2, #34	@ 0x22
 800d234:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800d236:	4b03      	ldr	r3, [pc, #12]	@ (800d244 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800d238:	4618      	mov	r0, r3
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr
 800d244:	20000048 	.word	0x20000048

0800d248 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2222      	movs	r2, #34	@ 0x22
 800d254:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800d256:	4b03      	ldr	r3, [pc, #12]	@ (800d264 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800d258:	4618      	mov	r0, r3
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	2000006c 	.word	0x2000006c

0800d268 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2222      	movs	r2, #34	@ 0x22
 800d274:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800d276:	4b03      	ldr	r3, [pc, #12]	@ (800d284 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800d278:	4618      	mov	r0, r3
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	20000090 	.word	0x20000090

0800d288 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d29a:	2200      	movs	r2, #0
 800d29c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	220a      	movs	r2, #10
 800d2b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800d2ba:	4b03      	ldr	r3, [pc, #12]	@ (800d2c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	200000c0 	.word	0x200000c0

0800d2cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d101      	bne.n	800d2e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e01f      	b.n	800d324 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	79fa      	ldrb	r2, [r7, #7]
 800d316:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f001 facd 	bl	800e8b8 <USBD_LL_Init>
 800d31e:	4603      	mov	r3, r0
 800d320:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d322:	7dfb      	ldrb	r3, [r7, #23]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d336:	2300      	movs	r3, #0
 800d338:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d340:	2303      	movs	r3, #3
 800d342:	e016      	b.n	800d372 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d360:	f107 020e 	add.w	r2, r7, #14
 800d364:	4610      	mov	r0, r2
 800d366:	4798      	blx	r3
 800d368:	4602      	mov	r2, r0
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f001 fae6 	bl	800e954 <USBD_LL_Start>
 800d388:	4603      	mov	r3, r0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d392:	b480      	push	{r7}
 800d394:	b083      	sub	sp, #12
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d009      	beq.n	800d3d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	78fa      	ldrb	r2, [r7, #3]
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	4798      	blx	r3
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d007      	beq.n	800d406 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	78fa      	ldrb	r2, [r7, #3]
 800d400:	4611      	mov	r1, r2
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	4798      	blx	r3
  }

  return USBD_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 ff1e 	bl	800e264 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d436:	461a      	mov	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d444:	f003 031f 	and.w	r3, r3, #31
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d01a      	beq.n	800d482 <USBD_LL_SetupStage+0x72>
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d822      	bhi.n	800d496 <USBD_LL_SetupStage+0x86>
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <USBD_LL_SetupStage+0x4a>
 800d454:	2b01      	cmp	r3, #1
 800d456:	d00a      	beq.n	800d46e <USBD_LL_SetupStage+0x5e>
 800d458:	e01d      	b.n	800d496 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f9f0 	bl	800d848 <USBD_StdDevReq>
 800d468:	4603      	mov	r3, r0
 800d46a:	73fb      	strb	r3, [r7, #15]
      break;
 800d46c:	e020      	b.n	800d4b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fa54 	bl	800d924 <USBD_StdItfReq>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73fb      	strb	r3, [r7, #15]
      break;
 800d480:	e016      	b.n	800d4b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d488:	4619      	mov	r1, r3
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fa93 	bl	800d9b6 <USBD_StdEPReq>
 800d490:	4603      	mov	r3, r0
 800d492:	73fb      	strb	r3, [r7, #15]
      break;
 800d494:	e00c      	b.n	800d4b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d49c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f001 fab5 	bl	800ea14 <USBD_LL_StallEP>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ae:	bf00      	nop
  }

  return ret;
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b086      	sub	sp, #24
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	607a      	str	r2, [r7, #4]
 800d4c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d4c8:	7afb      	ldrb	r3, [r7, #11]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d138      	bne.n	800d540 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d4d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	d14a      	bne.n	800d576 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	689a      	ldr	r2, [r3, #8]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d913      	bls.n	800d514 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	689a      	ldr	r2, [r3, #8]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	1ad2      	subs	r2, r2, r3
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	68da      	ldr	r2, [r3, #12]
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	4293      	cmp	r3, r2
 800d504:	bf28      	it	cs
 800d506:	4613      	movcs	r3, r2
 800d508:	461a      	mov	r2, r3
 800d50a:	6879      	ldr	r1, [r7, #4]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f000 ff80 	bl	800e412 <USBD_CtlContinueRx>
 800d512:	e030      	b.n	800d576 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d10b      	bne.n	800d538 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 ff7b 	bl	800e434 <USBD_CtlSendStatus>
 800d53e:	e01a      	b.n	800d576 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b03      	cmp	r3, #3
 800d54a:	d114      	bne.n	800d576 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00e      	beq.n	800d576 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d55e:	699b      	ldr	r3, [r3, #24]
 800d560:	7afa      	ldrb	r2, [r7, #11]
 800d562:	4611      	mov	r1, r2
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	4798      	blx	r3
 800d568:	4603      	mov	r3, r0
 800d56a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d572:	7dfb      	ldrb	r3, [r7, #23]
 800d574:	e000      	b.n	800d578 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	460b      	mov	r3, r1
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d58e:	7afb      	ldrb	r3, [r7, #11]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d16b      	bne.n	800d66c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3314      	adds	r3, #20
 800d598:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d156      	bne.n	800d652 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	689a      	ldr	r2, [r3, #8]
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d914      	bls.n	800d5da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	1ad2      	subs	r2, r2, r3
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f000 ff12 	bl	800e3f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f001 fac8 	bl	800eb68 <USBD_LL_PrepareReceive>
 800d5d8:	e03b      	b.n	800d652 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	68da      	ldr	r2, [r3, #12]
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d11c      	bne.n	800d620 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d316      	bcc.n	800d620 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d20f      	bcs.n	800d620 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d600:	2200      	movs	r2, #0
 800d602:	2100      	movs	r1, #0
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fef3 	bl	800e3f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d612:	2300      	movs	r3, #0
 800d614:	2200      	movs	r2, #0
 800d616:	2100      	movs	r1, #0
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f001 faa5 	bl	800eb68 <USBD_LL_PrepareReceive>
 800d61e:	e018      	b.n	800d652 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b03      	cmp	r3, #3
 800d62a:	d10b      	bne.n	800d644 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d644:	2180      	movs	r1, #128	@ 0x80
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f001 f9e4 	bl	800ea14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 ff04 	bl	800e45a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d122      	bne.n	800d6a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fe98 	bl	800d392 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d66a:	e01a      	b.n	800d6a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b03      	cmp	r3, #3
 800d676:	d114      	bne.n	800d6a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00e      	beq.n	800d6a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	7afa      	ldrb	r2, [r7, #11]
 800d68e:	4611      	mov	r1, r2
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	4798      	blx	r3
 800d694:	4603      	mov	r3, r0
 800d696:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d698:	7dfb      	ldrb	r3, [r7, #23]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	e000      	b.n	800d6a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	e02f      	b.n	800d740 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00f      	beq.n	800d70a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d009      	beq.n	800d70a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	6852      	ldr	r2, [r2, #4]
 800d702:	b2d2      	uxtb	r2, r2
 800d704:	4611      	mov	r1, r2
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d70a:	2340      	movs	r3, #64	@ 0x40
 800d70c:	2200      	movs	r2, #0
 800d70e:	2100      	movs	r1, #0
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f001 f93a 	bl	800e98a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2240      	movs	r2, #64	@ 0x40
 800d722:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d726:	2340      	movs	r3, #64	@ 0x40
 800d728:	2200      	movs	r2, #0
 800d72a:	2180      	movs	r1, #128	@ 0x80
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f001 f92c 	bl	800e98a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2240      	movs	r2, #64	@ 0x40
 800d73c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	460b      	mov	r3, r1
 800d752:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d776:	b2da      	uxtb	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2204      	movs	r2, #4
 800d782:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b04      	cmp	r3, #4
 800d7a6:	d106      	bne.n	800d7b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e012      	b.n	800d800 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d10b      	bne.n	800d7fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7f8:	69db      	ldr	r3, [r3, #28]
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	3301      	adds	r3, #1
 800d81e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d826:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d82a:	021b      	lsls	r3, r3, #8
 800d82c:	b21a      	sxth	r2, r3
 800d82e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d832:	4313      	orrs	r3, r2
 800d834:	b21b      	sxth	r3, r3
 800d836:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d838:	89fb      	ldrh	r3, [r7, #14]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	371c      	adds	r7, #28
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
	...

0800d848 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d85e:	2b40      	cmp	r3, #64	@ 0x40
 800d860:	d005      	beq.n	800d86e <USBD_StdDevReq+0x26>
 800d862:	2b40      	cmp	r3, #64	@ 0x40
 800d864:	d853      	bhi.n	800d90e <USBD_StdDevReq+0xc6>
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00b      	beq.n	800d882 <USBD_StdDevReq+0x3a>
 800d86a:	2b20      	cmp	r3, #32
 800d86c:	d14f      	bne.n	800d90e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	4798      	blx	r3
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]
      break;
 800d880:	e04a      	b.n	800d918 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	785b      	ldrb	r3, [r3, #1]
 800d886:	2b09      	cmp	r3, #9
 800d888:	d83b      	bhi.n	800d902 <USBD_StdDevReq+0xba>
 800d88a:	a201      	add	r2, pc, #4	@ (adr r2, 800d890 <USBD_StdDevReq+0x48>)
 800d88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d890:	0800d8e5 	.word	0x0800d8e5
 800d894:	0800d8f9 	.word	0x0800d8f9
 800d898:	0800d903 	.word	0x0800d903
 800d89c:	0800d8ef 	.word	0x0800d8ef
 800d8a0:	0800d903 	.word	0x0800d903
 800d8a4:	0800d8c3 	.word	0x0800d8c3
 800d8a8:	0800d8b9 	.word	0x0800d8b9
 800d8ac:	0800d903 	.word	0x0800d903
 800d8b0:	0800d8db 	.word	0x0800d8db
 800d8b4:	0800d8cd 	.word	0x0800d8cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f9de 	bl	800dc7c <USBD_GetDescriptor>
          break;
 800d8c0:	e024      	b.n	800d90c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fb43 	bl	800df50 <USBD_SetAddress>
          break;
 800d8ca:	e01f      	b.n	800d90c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 fb82 	bl	800dfd8 <USBD_SetConfig>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
          break;
 800d8d8:	e018      	b.n	800d90c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fc21 	bl	800e124 <USBD_GetConfig>
          break;
 800d8e2:	e013      	b.n	800d90c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d8e4:	6839      	ldr	r1, [r7, #0]
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fc52 	bl	800e190 <USBD_GetStatus>
          break;
 800d8ec:	e00e      	b.n	800d90c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fc81 	bl	800e1f8 <USBD_SetFeature>
          break;
 800d8f6:	e009      	b.n	800d90c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fc90 	bl	800e220 <USBD_ClrFeature>
          break;
 800d900:	e004      	b.n	800d90c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d902:	6839      	ldr	r1, [r7, #0]
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fce7 	bl	800e2d8 <USBD_CtlError>
          break;
 800d90a:	bf00      	nop
      }
      break;
 800d90c:	e004      	b.n	800d918 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fce1 	bl	800e2d8 <USBD_CtlError>
      break;
 800d916:	bf00      	nop
  }

  return ret;
 800d918:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop

0800d924 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d93a:	2b40      	cmp	r3, #64	@ 0x40
 800d93c:	d005      	beq.n	800d94a <USBD_StdItfReq+0x26>
 800d93e:	2b40      	cmp	r3, #64	@ 0x40
 800d940:	d82f      	bhi.n	800d9a2 <USBD_StdItfReq+0x7e>
 800d942:	2b00      	cmp	r3, #0
 800d944:	d001      	beq.n	800d94a <USBD_StdItfReq+0x26>
 800d946:	2b20      	cmp	r3, #32
 800d948:	d12b      	bne.n	800d9a2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d950:	b2db      	uxtb	r3, r3
 800d952:	3b01      	subs	r3, #1
 800d954:	2b02      	cmp	r3, #2
 800d956:	d81d      	bhi.n	800d994 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	889b      	ldrh	r3, [r3, #4]
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d813      	bhi.n	800d98a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	4798      	blx	r3
 800d970:	4603      	mov	r3, r0
 800d972:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	88db      	ldrh	r3, [r3, #6]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d110      	bne.n	800d99e <USBD_StdItfReq+0x7a>
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10d      	bne.n	800d99e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 fd56 	bl	800e434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d988:	e009      	b.n	800d99e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fca3 	bl	800e2d8 <USBD_CtlError>
          break;
 800d992:	e004      	b.n	800d99e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fc9e 	bl	800e2d8 <USBD_CtlError>
          break;
 800d99c:	e000      	b.n	800d9a0 <USBD_StdItfReq+0x7c>
          break;
 800d99e:	bf00      	nop
      }
      break;
 800d9a0:	e004      	b.n	800d9ac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fc97 	bl	800e2d8 <USBD_CtlError>
      break;
 800d9aa:	bf00      	nop
  }

  return ret;
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	889b      	ldrh	r3, [r3, #4]
 800d9c8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d9d2:	2b40      	cmp	r3, #64	@ 0x40
 800d9d4:	d007      	beq.n	800d9e6 <USBD_StdEPReq+0x30>
 800d9d6:	2b40      	cmp	r3, #64	@ 0x40
 800d9d8:	f200 8145 	bhi.w	800dc66 <USBD_StdEPReq+0x2b0>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00c      	beq.n	800d9fa <USBD_StdEPReq+0x44>
 800d9e0:	2b20      	cmp	r3, #32
 800d9e2:	f040 8140 	bne.w	800dc66 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	4798      	blx	r3
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f8:	e13a      	b.n	800dc70 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	785b      	ldrb	r3, [r3, #1]
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d007      	beq.n	800da12 <USBD_StdEPReq+0x5c>
 800da02:	2b03      	cmp	r3, #3
 800da04:	f300 8129 	bgt.w	800dc5a <USBD_StdEPReq+0x2a4>
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d07f      	beq.n	800db0c <USBD_StdEPReq+0x156>
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d03c      	beq.n	800da8a <USBD_StdEPReq+0xd4>
 800da10:	e123      	b.n	800dc5a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d002      	beq.n	800da24 <USBD_StdEPReq+0x6e>
 800da1e:	2b03      	cmp	r3, #3
 800da20:	d016      	beq.n	800da50 <USBD_StdEPReq+0x9a>
 800da22:	e02c      	b.n	800da7e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da24:	7bbb      	ldrb	r3, [r7, #14]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00d      	beq.n	800da46 <USBD_StdEPReq+0x90>
 800da2a:	7bbb      	ldrb	r3, [r7, #14]
 800da2c:	2b80      	cmp	r3, #128	@ 0x80
 800da2e:	d00a      	beq.n	800da46 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 ffed 	bl	800ea14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da3a:	2180      	movs	r1, #128	@ 0x80
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 ffe9 	bl	800ea14 <USBD_LL_StallEP>
 800da42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da44:	e020      	b.n	800da88 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fc45 	bl	800e2d8 <USBD_CtlError>
              break;
 800da4e:	e01b      	b.n	800da88 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	885b      	ldrh	r3, [r3, #2]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10e      	bne.n	800da76 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da58:	7bbb      	ldrb	r3, [r7, #14]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00b      	beq.n	800da76 <USBD_StdEPReq+0xc0>
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	2b80      	cmp	r3, #128	@ 0x80
 800da62:	d008      	beq.n	800da76 <USBD_StdEPReq+0xc0>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	88db      	ldrh	r3, [r3, #6]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d104      	bne.n	800da76 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
 800da6e:	4619      	mov	r1, r3
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 ffcf 	bl	800ea14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fcdc 	bl	800e434 <USBD_CtlSendStatus>

              break;
 800da7c:	e004      	b.n	800da88 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fc29 	bl	800e2d8 <USBD_CtlError>
              break;
 800da86:	bf00      	nop
          }
          break;
 800da88:	e0ec      	b.n	800dc64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da90:	b2db      	uxtb	r3, r3
 800da92:	2b02      	cmp	r3, #2
 800da94:	d002      	beq.n	800da9c <USBD_StdEPReq+0xe6>
 800da96:	2b03      	cmp	r3, #3
 800da98:	d016      	beq.n	800dac8 <USBD_StdEPReq+0x112>
 800da9a:	e030      	b.n	800dafe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da9c:	7bbb      	ldrb	r3, [r7, #14]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00d      	beq.n	800dabe <USBD_StdEPReq+0x108>
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
 800daa4:	2b80      	cmp	r3, #128	@ 0x80
 800daa6:	d00a      	beq.n	800dabe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
 800daaa:	4619      	mov	r1, r3
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 ffb1 	bl	800ea14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dab2:	2180      	movs	r1, #128	@ 0x80
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 ffad 	bl	800ea14 <USBD_LL_StallEP>
 800daba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dabc:	e025      	b.n	800db0a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fc09 	bl	800e2d8 <USBD_CtlError>
              break;
 800dac6:	e020      	b.n	800db0a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	885b      	ldrh	r3, [r3, #2]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d11b      	bne.n	800db08 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
 800dad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d004      	beq.n	800dae4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dada:	7bbb      	ldrb	r3, [r7, #14]
 800dadc:	4619      	mov	r1, r3
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 ffb7 	bl	800ea52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fca5 	bl	800e434 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	4798      	blx	r3
 800daf8:	4603      	mov	r3, r0
 800dafa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dafc:	e004      	b.n	800db08 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fbe9 	bl	800e2d8 <USBD_CtlError>
              break;
 800db06:	e000      	b.n	800db0a <USBD_StdEPReq+0x154>
              break;
 800db08:	bf00      	nop
          }
          break;
 800db0a:	e0ab      	b.n	800dc64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b02      	cmp	r3, #2
 800db16:	d002      	beq.n	800db1e <USBD_StdEPReq+0x168>
 800db18:	2b03      	cmp	r3, #3
 800db1a:	d032      	beq.n	800db82 <USBD_StdEPReq+0x1cc>
 800db1c:	e097      	b.n	800dc4e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db1e:	7bbb      	ldrb	r3, [r7, #14]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d007      	beq.n	800db34 <USBD_StdEPReq+0x17e>
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	2b80      	cmp	r3, #128	@ 0x80
 800db28:	d004      	beq.n	800db34 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800db2a:	6839      	ldr	r1, [r7, #0]
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 fbd3 	bl	800e2d8 <USBD_CtlError>
                break;
 800db32:	e091      	b.n	800dc58 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	da0b      	bge.n	800db54 <USBD_StdEPReq+0x19e>
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db42:	4613      	mov	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	4413      	add	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	3310      	adds	r3, #16
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	4413      	add	r3, r2
 800db50:	3304      	adds	r3, #4
 800db52:	e00b      	b.n	800db6c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db54:	7bbb      	ldrb	r3, [r7, #14]
 800db56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	4413      	add	r3, r2
 800db6a:	3304      	adds	r3, #4
 800db6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2200      	movs	r2, #0
 800db72:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2202      	movs	r2, #2
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fc1d 	bl	800e3ba <USBD_CtlSendData>
              break;
 800db80:	e06a      	b.n	800dc58 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db86:	2b00      	cmp	r3, #0
 800db88:	da11      	bge.n	800dbae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db8a:	7bbb      	ldrb	r3, [r7, #14]
 800db8c:	f003 020f 	and.w	r2, r3, #15
 800db90:	6879      	ldr	r1, [r7, #4]
 800db92:	4613      	mov	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	4413      	add	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	440b      	add	r3, r1
 800db9c:	3324      	adds	r3, #36	@ 0x24
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d117      	bne.n	800dbd4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fb96 	bl	800e2d8 <USBD_CtlError>
                  break;
 800dbac:	e054      	b.n	800dc58 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dbae:	7bbb      	ldrb	r3, [r7, #14]
 800dbb0:	f003 020f 	and.w	r2, r3, #15
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	440b      	add	r3, r1
 800dbc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d104      	bne.n	800dbd4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dbca:	6839      	ldr	r1, [r7, #0]
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fb83 	bl	800e2d8 <USBD_CtlError>
                  break;
 800dbd2:	e041      	b.n	800dc58 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	da0b      	bge.n	800dbf4 <USBD_StdEPReq+0x23e>
 800dbdc:	7bbb      	ldrb	r3, [r7, #14]
 800dbde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4413      	add	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	3310      	adds	r3, #16
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	4413      	add	r3, r2
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	e00b      	b.n	800dc0c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbf4:	7bbb      	ldrb	r3, [r7, #14]
 800dbf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4413      	add	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	4413      	add	r3, r2
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc0e:	7bbb      	ldrb	r3, [r7, #14]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <USBD_StdEPReq+0x264>
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
 800dc16:	2b80      	cmp	r3, #128	@ 0x80
 800dc18:	d103      	bne.n	800dc22 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	e00e      	b.n	800dc40 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	4619      	mov	r1, r3
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 ff32 	bl	800ea90 <USBD_LL_IsStallEP>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d003      	beq.n	800dc3a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2201      	movs	r2, #1
 800dc36:	601a      	str	r2, [r3, #0]
 800dc38:	e002      	b.n	800dc40 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2202      	movs	r2, #2
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fbb7 	bl	800e3ba <USBD_CtlSendData>
              break;
 800dc4c:	e004      	b.n	800dc58 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fb41 	bl	800e2d8 <USBD_CtlError>
              break;
 800dc56:	bf00      	nop
          }
          break;
 800dc58:	e004      	b.n	800dc64 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dc5a:	6839      	ldr	r1, [r7, #0]
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 fb3b 	bl	800e2d8 <USBD_CtlError>
          break;
 800dc62:	bf00      	nop
      }
      break;
 800dc64:	e004      	b.n	800dc70 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fb35 	bl	800e2d8 <USBD_CtlError>
      break;
 800dc6e:	bf00      	nop
  }

  return ret;
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
	...

0800dc7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	885b      	ldrh	r3, [r3, #2]
 800dc96:	0a1b      	lsrs	r3, r3, #8
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	2b06      	cmp	r3, #6
 800dc9e:	f200 8128 	bhi.w	800def2 <USBD_GetDescriptor+0x276>
 800dca2:	a201      	add	r2, pc, #4	@ (adr r2, 800dca8 <USBD_GetDescriptor+0x2c>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dcc5 	.word	0x0800dcc5
 800dcac:	0800dcdd 	.word	0x0800dcdd
 800dcb0:	0800dd1d 	.word	0x0800dd1d
 800dcb4:	0800def3 	.word	0x0800def3
 800dcb8:	0800def3 	.word	0x0800def3
 800dcbc:	0800de93 	.word	0x0800de93
 800dcc0:	0800debf 	.word	0x0800debf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	7c12      	ldrb	r2, [r2, #16]
 800dcd0:	f107 0108 	add.w	r1, r7, #8
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	4798      	blx	r3
 800dcd8:	60f8      	str	r0, [r7, #12]
      break;
 800dcda:	e112      	b.n	800df02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	7c1b      	ldrb	r3, [r3, #16]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10d      	bne.n	800dd00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcec:	f107 0208 	add.w	r2, r7, #8
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	4798      	blx	r3
 800dcf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dcfe:	e100      	b.n	800df02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd08:	f107 0208 	add.w	r2, r7, #8
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	4798      	blx	r3
 800dd10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	3301      	adds	r3, #1
 800dd16:	2202      	movs	r2, #2
 800dd18:	701a      	strb	r2, [r3, #0]
      break;
 800dd1a:	e0f2      	b.n	800df02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	885b      	ldrh	r3, [r3, #2]
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b05      	cmp	r3, #5
 800dd24:	f200 80ac 	bhi.w	800de80 <USBD_GetDescriptor+0x204>
 800dd28:	a201      	add	r2, pc, #4	@ (adr r2, 800dd30 <USBD_GetDescriptor+0xb4>)
 800dd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2e:	bf00      	nop
 800dd30:	0800dd49 	.word	0x0800dd49
 800dd34:	0800dd7d 	.word	0x0800dd7d
 800dd38:	0800ddb1 	.word	0x0800ddb1
 800dd3c:	0800dde5 	.word	0x0800dde5
 800dd40:	0800de19 	.word	0x0800de19
 800dd44:	0800de4d 	.word	0x0800de4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00b      	beq.n	800dd6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	7c12      	ldrb	r2, [r2, #16]
 800dd60:	f107 0108 	add.w	r1, r7, #8
 800dd64:	4610      	mov	r0, r2
 800dd66:	4798      	blx	r3
 800dd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd6a:	e091      	b.n	800de90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fab2 	bl	800e2d8 <USBD_CtlError>
            err++;
 800dd74:	7afb      	ldrb	r3, [r7, #11]
 800dd76:	3301      	adds	r3, #1
 800dd78:	72fb      	strb	r3, [r7, #11]
          break;
 800dd7a:	e089      	b.n	800de90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00b      	beq.n	800dda0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	7c12      	ldrb	r2, [r2, #16]
 800dd94:	f107 0108 	add.w	r1, r7, #8
 800dd98:	4610      	mov	r0, r2
 800dd9a:	4798      	blx	r3
 800dd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd9e:	e077      	b.n	800de90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fa98 	bl	800e2d8 <USBD_CtlError>
            err++;
 800dda8:	7afb      	ldrb	r3, [r7, #11]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	72fb      	strb	r3, [r7, #11]
          break;
 800ddae:	e06f      	b.n	800de90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00b      	beq.n	800ddd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	7c12      	ldrb	r2, [r2, #16]
 800ddc8:	f107 0108 	add.w	r1, r7, #8
 800ddcc:	4610      	mov	r0, r2
 800ddce:	4798      	blx	r3
 800ddd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddd2:	e05d      	b.n	800de90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddd4:	6839      	ldr	r1, [r7, #0]
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fa7e 	bl	800e2d8 <USBD_CtlError>
            err++;
 800dddc:	7afb      	ldrb	r3, [r7, #11]
 800ddde:	3301      	adds	r3, #1
 800dde0:	72fb      	strb	r3, [r7, #11]
          break;
 800dde2:	e055      	b.n	800de90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00b      	beq.n	800de08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	7c12      	ldrb	r2, [r2, #16]
 800ddfc:	f107 0108 	add.w	r1, r7, #8
 800de00:	4610      	mov	r0, r2
 800de02:	4798      	blx	r3
 800de04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de06:	e043      	b.n	800de90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fa64 	bl	800e2d8 <USBD_CtlError>
            err++;
 800de10:	7afb      	ldrb	r3, [r7, #11]
 800de12:	3301      	adds	r3, #1
 800de14:	72fb      	strb	r3, [r7, #11]
          break;
 800de16:	e03b      	b.n	800de90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00b      	beq.n	800de3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	7c12      	ldrb	r2, [r2, #16]
 800de30:	f107 0108 	add.w	r1, r7, #8
 800de34:	4610      	mov	r0, r2
 800de36:	4798      	blx	r3
 800de38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de3a:	e029      	b.n	800de90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fa4a 	bl	800e2d8 <USBD_CtlError>
            err++;
 800de44:	7afb      	ldrb	r3, [r7, #11]
 800de46:	3301      	adds	r3, #1
 800de48:	72fb      	strb	r3, [r7, #11]
          break;
 800de4a:	e021      	b.n	800de90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de52:	699b      	ldr	r3, [r3, #24]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de5e:	699b      	ldr	r3, [r3, #24]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	7c12      	ldrb	r2, [r2, #16]
 800de64:	f107 0108 	add.w	r1, r7, #8
 800de68:	4610      	mov	r0, r2
 800de6a:	4798      	blx	r3
 800de6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de6e:	e00f      	b.n	800de90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fa30 	bl	800e2d8 <USBD_CtlError>
            err++;
 800de78:	7afb      	ldrb	r3, [r7, #11]
 800de7a:	3301      	adds	r3, #1
 800de7c:	72fb      	strb	r3, [r7, #11]
          break;
 800de7e:	e007      	b.n	800de90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fa28 	bl	800e2d8 <USBD_CtlError>
          err++;
 800de88:	7afb      	ldrb	r3, [r7, #11]
 800de8a:	3301      	adds	r3, #1
 800de8c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800de8e:	bf00      	nop
      }
      break;
 800de90:	e037      	b.n	800df02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7c1b      	ldrb	r3, [r3, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d109      	bne.n	800deae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dea2:	f107 0208 	add.w	r2, r7, #8
 800dea6:	4610      	mov	r0, r2
 800dea8:	4798      	blx	r3
 800deaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800deac:	e029      	b.n	800df02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800deae:	6839      	ldr	r1, [r7, #0]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fa11 	bl	800e2d8 <USBD_CtlError>
        err++;
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	3301      	adds	r3, #1
 800deba:	72fb      	strb	r3, [r7, #11]
      break;
 800debc:	e021      	b.n	800df02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7c1b      	ldrb	r3, [r3, #16]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10d      	bne.n	800dee2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800decc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dece:	f107 0208 	add.w	r2, r7, #8
 800ded2:	4610      	mov	r0, r2
 800ded4:	4798      	blx	r3
 800ded6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3301      	adds	r3, #1
 800dedc:	2207      	movs	r2, #7
 800dede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dee0:	e00f      	b.n	800df02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 f9f7 	bl	800e2d8 <USBD_CtlError>
        err++;
 800deea:	7afb      	ldrb	r3, [r7, #11]
 800deec:	3301      	adds	r3, #1
 800deee:	72fb      	strb	r3, [r7, #11]
      break;
 800def0:	e007      	b.n	800df02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f9ef 	bl	800e2d8 <USBD_CtlError>
      err++;
 800defa:	7afb      	ldrb	r3, [r7, #11]
 800defc:	3301      	adds	r3, #1
 800defe:	72fb      	strb	r3, [r7, #11]
      break;
 800df00:	bf00      	nop
  }

  if (err != 0U)
 800df02:	7afb      	ldrb	r3, [r7, #11]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d11e      	bne.n	800df46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	88db      	ldrh	r3, [r3, #6]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d016      	beq.n	800df3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800df10:	893b      	ldrh	r3, [r7, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00e      	beq.n	800df34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	88da      	ldrh	r2, [r3, #6]
 800df1a:	893b      	ldrh	r3, [r7, #8]
 800df1c:	4293      	cmp	r3, r2
 800df1e:	bf28      	it	cs
 800df20:	4613      	movcs	r3, r2
 800df22:	b29b      	uxth	r3, r3
 800df24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df26:	893b      	ldrh	r3, [r7, #8]
 800df28:	461a      	mov	r2, r3
 800df2a:	68f9      	ldr	r1, [r7, #12]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fa44 	bl	800e3ba <USBD_CtlSendData>
 800df32:	e009      	b.n	800df48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df34:	6839      	ldr	r1, [r7, #0]
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 f9ce 	bl	800e2d8 <USBD_CtlError>
 800df3c:	e004      	b.n	800df48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fa78 	bl	800e434 <USBD_CtlSendStatus>
 800df44:	e000      	b.n	800df48 <USBD_GetDescriptor+0x2cc>
    return;
 800df46:	bf00      	nop
  }
}
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop

0800df50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	889b      	ldrh	r3, [r3, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d131      	bne.n	800dfc6 <USBD_SetAddress+0x76>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	88db      	ldrh	r3, [r3, #6]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d12d      	bne.n	800dfc6 <USBD_SetAddress+0x76>
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	885b      	ldrh	r3, [r3, #2]
 800df6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800df70:	d829      	bhi.n	800dfc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	885b      	ldrh	r3, [r3, #2]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b03      	cmp	r3, #3
 800df88:	d104      	bne.n	800df94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 f9a3 	bl	800e2d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df92:	e01d      	b.n	800dfd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7bfa      	ldrb	r2, [r7, #15]
 800df98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df9c:	7bfb      	ldrb	r3, [r7, #15]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fda1 	bl	800eae8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fa44 	bl	800e434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d004      	beq.n	800dfbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfba:	e009      	b.n	800dfd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfc4:	e004      	b.n	800dfd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dfc6:	6839      	ldr	r1, [r7, #0]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f985 	bl	800e2d8 <USBD_CtlError>
  }
}
 800dfce:	bf00      	nop
 800dfd0:	bf00      	nop
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	885b      	ldrh	r3, [r3, #2]
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	4b4c      	ldr	r3, [pc, #304]	@ (800e120 <USBD_SetConfig+0x148>)
 800dfee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dff0:	4b4b      	ldr	r3, [pc, #300]	@ (800e120 <USBD_SetConfig+0x148>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d905      	bls.n	800e004 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 f96c 	bl	800e2d8 <USBD_CtlError>
    return USBD_FAIL;
 800e000:	2303      	movs	r3, #3
 800e002:	e088      	b.n	800e116 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d002      	beq.n	800e016 <USBD_SetConfig+0x3e>
 800e010:	2b03      	cmp	r3, #3
 800e012:	d025      	beq.n	800e060 <USBD_SetConfig+0x88>
 800e014:	e071      	b.n	800e0fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e016:	4b42      	ldr	r3, [pc, #264]	@ (800e120 <USBD_SetConfig+0x148>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d01c      	beq.n	800e058 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e01e:	4b40      	ldr	r3, [pc, #256]	@ (800e120 <USBD_SetConfig+0x148>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e028:	4b3d      	ldr	r3, [pc, #244]	@ (800e120 <USBD_SetConfig+0x148>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff f9ba 	bl	800d3a8 <USBD_SetClassConfig>
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e038:	7bfb      	ldrb	r3, [r7, #15]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d004      	beq.n	800e048 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 f949 	bl	800e2d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e046:	e065      	b.n	800e114 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f9f3 	bl	800e434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2203      	movs	r2, #3
 800e052:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e056:	e05d      	b.n	800e114 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 f9eb 	bl	800e434 <USBD_CtlSendStatus>
      break;
 800e05e:	e059      	b.n	800e114 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e060:	4b2f      	ldr	r3, [pc, #188]	@ (800e120 <USBD_SetConfig+0x148>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d112      	bne.n	800e08e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2202      	movs	r2, #2
 800e06c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e070:	4b2b      	ldr	r3, [pc, #172]	@ (800e120 <USBD_SetConfig+0x148>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	461a      	mov	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e07a:	4b29      	ldr	r3, [pc, #164]	@ (800e120 <USBD_SetConfig+0x148>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff f9ad 	bl	800d3e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f9d4 	bl	800e434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e08c:	e042      	b.n	800e114 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e08e:	4b24      	ldr	r3, [pc, #144]	@ (800e120 <USBD_SetConfig+0x148>)
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d02a      	beq.n	800e0f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff f99b 	bl	800d3e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800e120 <USBD_SetConfig+0x148>)
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e120 <USBD_SetConfig+0x148>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7ff f974 	bl	800d3a8 <USBD_SetClassConfig>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00f      	beq.n	800e0ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f903 	bl	800e2d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7ff f980 	bl	800d3e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e0e8:	e014      	b.n	800e114 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f9a2 	bl	800e434 <USBD_CtlSendStatus>
      break;
 800e0f0:	e010      	b.n	800e114 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f99e 	bl	800e434 <USBD_CtlSendStatus>
      break;
 800e0f8:	e00c      	b.n	800e114 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 f8eb 	bl	800e2d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e102:	4b07      	ldr	r3, [pc, #28]	@ (800e120 <USBD_SetConfig+0x148>)
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	4619      	mov	r1, r3
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff f969 	bl	800d3e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e10e:	2303      	movs	r3, #3
 800e110:	73fb      	strb	r3, [r7, #15]
      break;
 800e112:	bf00      	nop
  }

  return ret;
 800e114:	7bfb      	ldrb	r3, [r7, #15]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20002548 	.word	0x20002548

0800e124 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	88db      	ldrh	r3, [r3, #6]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d004      	beq.n	800e140 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 f8cd 	bl	800e2d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e13e:	e023      	b.n	800e188 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b02      	cmp	r3, #2
 800e14a:	dc02      	bgt.n	800e152 <USBD_GetConfig+0x2e>
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	dc03      	bgt.n	800e158 <USBD_GetConfig+0x34>
 800e150:	e015      	b.n	800e17e <USBD_GetConfig+0x5a>
 800e152:	2b03      	cmp	r3, #3
 800e154:	d00b      	beq.n	800e16e <USBD_GetConfig+0x4a>
 800e156:	e012      	b.n	800e17e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	3308      	adds	r3, #8
 800e162:	2201      	movs	r2, #1
 800e164:	4619      	mov	r1, r3
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f927 	bl	800e3ba <USBD_CtlSendData>
        break;
 800e16c:	e00c      	b.n	800e188 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	3304      	adds	r3, #4
 800e172:	2201      	movs	r2, #1
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f91f 	bl	800e3ba <USBD_CtlSendData>
        break;
 800e17c:	e004      	b.n	800e188 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 f8a9 	bl	800e2d8 <USBD_CtlError>
        break;
 800e186:	bf00      	nop
}
 800e188:	bf00      	nop
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d81e      	bhi.n	800e1e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	88db      	ldrh	r3, [r3, #6]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d004      	beq.n	800e1ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f890 	bl	800e2d8 <USBD_CtlError>
        break;
 800e1b8:	e01a      	b.n	800e1f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	f043 0202 	orr.w	r2, r3, #2
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	330c      	adds	r3, #12
 800e1da:	2202      	movs	r2, #2
 800e1dc:	4619      	mov	r1, r3
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f8eb 	bl	800e3ba <USBD_CtlSendData>
      break;
 800e1e4:	e004      	b.n	800e1f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 f875 	bl	800e2d8 <USBD_CtlError>
      break;
 800e1ee:	bf00      	nop
  }
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	885b      	ldrh	r3, [r3, #2]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d106      	bne.n	800e218 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f90e 	bl	800e434 <USBD_CtlSendStatus>
  }
}
 800e218:	bf00      	nop
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e230:	b2db      	uxtb	r3, r3
 800e232:	3b01      	subs	r3, #1
 800e234:	2b02      	cmp	r3, #2
 800e236:	d80b      	bhi.n	800e250 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	885b      	ldrh	r3, [r3, #2]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d10c      	bne.n	800e25a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f8f3 	bl	800e434 <USBD_CtlSendStatus>
      }
      break;
 800e24e:	e004      	b.n	800e25a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f840 	bl	800e2d8 <USBD_CtlError>
      break;
 800e258:	e000      	b.n	800e25c <USBD_ClrFeature+0x3c>
      break;
 800e25a:	bf00      	nop
  }
}
 800e25c:	bf00      	nop
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	781a      	ldrb	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3301      	adds	r3, #1
 800e27e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	781a      	ldrb	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3301      	adds	r3, #1
 800e28c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f7ff faba 	bl	800d808 <SWAPBYTE>
 800e294:	4603      	mov	r3, r0
 800e296:	461a      	mov	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff faad 	bl	800d808 <SWAPBYTE>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f7ff faa0 	bl	800d808 <SWAPBYTE>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	80da      	strh	r2, [r3, #6]
}
 800e2d0:	bf00      	nop
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2e2:	2180      	movs	r1, #128	@ 0x80
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 fb95 	bl	800ea14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fb91 	bl	800ea14 <USBD_LL_StallEP>
}
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b086      	sub	sp, #24
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	60f8      	str	r0, [r7, #12]
 800e302:	60b9      	str	r1, [r7, #8]
 800e304:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e306:	2300      	movs	r3, #0
 800e308:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d036      	beq.n	800e37e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e314:	6938      	ldr	r0, [r7, #16]
 800e316:	f000 f836 	bl	800e386 <USBD_GetLen>
 800e31a:	4603      	mov	r3, r0
 800e31c:	3301      	adds	r3, #1
 800e31e:	b29b      	uxth	r3, r3
 800e320:	005b      	lsls	r3, r3, #1
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	4413      	add	r3, r2
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	7812      	ldrb	r2, [r2, #0]
 800e332:	701a      	strb	r2, [r3, #0]
  idx++;
 800e334:	7dfb      	ldrb	r3, [r7, #23]
 800e336:	3301      	adds	r3, #1
 800e338:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e33a:	7dfb      	ldrb	r3, [r7, #23]
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	4413      	add	r3, r2
 800e340:	2203      	movs	r2, #3
 800e342:	701a      	strb	r2, [r3, #0]
  idx++;
 800e344:	7dfb      	ldrb	r3, [r7, #23]
 800e346:	3301      	adds	r3, #1
 800e348:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e34a:	e013      	b.n	800e374 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e34c:	7dfb      	ldrb	r3, [r7, #23]
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	4413      	add	r3, r2
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	7812      	ldrb	r2, [r2, #0]
 800e356:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	3301      	adds	r3, #1
 800e35c:	613b      	str	r3, [r7, #16]
    idx++;
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	3301      	adds	r3, #1
 800e362:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e364:	7dfb      	ldrb	r3, [r7, #23]
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	4413      	add	r3, r2
 800e36a:	2200      	movs	r2, #0
 800e36c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e36e:	7dfb      	ldrb	r3, [r7, #23]
 800e370:	3301      	adds	r3, #1
 800e372:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1e7      	bne.n	800e34c <USBD_GetString+0x52>
 800e37c:	e000      	b.n	800e380 <USBD_GetString+0x86>
    return;
 800e37e:	bf00      	nop
  }
}
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e386:	b480      	push	{r7}
 800e388:	b085      	sub	sp, #20
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e38e:	2300      	movs	r3, #0
 800e390:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e396:	e005      	b.n	800e3a4 <USBD_GetLen+0x1e>
  {
    len++;
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	3301      	adds	r3, #1
 800e39c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1f5      	bne.n	800e398 <USBD_GetLen+0x12>
  }

  return len;
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3714      	adds	r7, #20
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2202      	movs	r2, #2
 800e3ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	2100      	movs	r1, #0
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f000 fba0 	bl	800eb26 <USBD_LL_Transmit>

  return USBD_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	2100      	movs	r1, #0
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f000 fb8f 	bl	800eb26 <USBD_LL_Transmit>

  return USBD_OK;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	60f8      	str	r0, [r7, #12]
 800e41a:	60b9      	str	r1, [r7, #8]
 800e41c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	2100      	movs	r1, #0
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f000 fb9f 	bl	800eb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2204      	movs	r2, #4
 800e440:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e444:	2300      	movs	r3, #0
 800e446:	2200      	movs	r2, #0
 800e448:	2100      	movs	r1, #0
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fb6b 	bl	800eb26 <USBD_LL_Transmit>

  return USBD_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3708      	adds	r7, #8
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b082      	sub	sp, #8
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2205      	movs	r2, #5
 800e466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e46a:	2300      	movs	r3, #0
 800e46c:	2200      	movs	r2, #0
 800e46e:	2100      	movs	r1, #0
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fb79 	bl	800eb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800e484:	2200      	movs	r2, #0
 800e486:	490e      	ldr	r1, [pc, #56]	@ (800e4c0 <MX_USB_Device_Init+0x40>)
 800e488:	480e      	ldr	r0, [pc, #56]	@ (800e4c4 <MX_USB_Device_Init+0x44>)
 800e48a:	f7fe ff1f 	bl	800d2cc <USBD_Init>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e494:	f7f2 ffc5 	bl	8001422 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800e498:	490b      	ldr	r1, [pc, #44]	@ (800e4c8 <MX_USB_Device_Init+0x48>)
 800e49a:	480a      	ldr	r0, [pc, #40]	@ (800e4c4 <MX_USB_Device_Init+0x44>)
 800e49c:	f7fe ff46 	bl	800d32c <USBD_RegisterClass>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e4a6:	f7f2 ffbc 	bl	8001422 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e4aa:	4806      	ldr	r0, [pc, #24]	@ (800e4c4 <MX_USB_Device_Init+0x44>)
 800e4ac:	f7fe ff65 	bl	800d37a <USBD_Start>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800e4b6:	f7f2 ffb4 	bl	8001422 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e4ba:	bf00      	nop
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	20000118 	.word	0x20000118
 800e4c4:	2000254c 	.word	0x2000254c
 800e4c8:	20000010 	.word	0x20000010

0800e4cc <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	6039      	str	r1, [r7, #0]
 800e4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2212      	movs	r2, #18
 800e4dc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800e4de:	4b03      	ldr	r3, [pc, #12]	@ (800e4ec <USBD_HID_DeviceDescriptor+0x20>)
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr
 800e4ec:	20000134 	.word	0x20000134

0800e4f0 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	6039      	str	r1, [r7, #0]
 800e4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2204      	movs	r2, #4
 800e500:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e502:	4b03      	ldr	r3, [pc, #12]	@ (800e510 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800e504:	4618      	mov	r0, r3
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	20000148 	.word	0x20000148

0800e514 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	4603      	mov	r3, r0
 800e51c:	6039      	str	r1, [r7, #0]
 800e51e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e520:	79fb      	ldrb	r3, [r7, #7]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d105      	bne.n	800e532 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	4907      	ldr	r1, [pc, #28]	@ (800e548 <USBD_HID_ProductStrDescriptor+0x34>)
 800e52a:	4808      	ldr	r0, [pc, #32]	@ (800e54c <USBD_HID_ProductStrDescriptor+0x38>)
 800e52c:	f7ff fee5 	bl	800e2fa <USBD_GetString>
 800e530:	e004      	b.n	800e53c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	4904      	ldr	r1, [pc, #16]	@ (800e548 <USBD_HID_ProductStrDescriptor+0x34>)
 800e536:	4805      	ldr	r0, [pc, #20]	@ (800e54c <USBD_HID_ProductStrDescriptor+0x38>)
 800e538:	f7ff fedf 	bl	800e2fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800e53c:	4b02      	ldr	r3, [pc, #8]	@ (800e548 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	2000281c 	.word	0x2000281c
 800e54c:	08010e04 	.word	0x08010e04

0800e550 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	4904      	ldr	r1, [pc, #16]	@ (800e570 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800e560:	4804      	ldr	r0, [pc, #16]	@ (800e574 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800e562:	f7ff feca 	bl	800e2fa <USBD_GetString>
  return USBD_StrDesc;
 800e566:	4b02      	ldr	r3, [pc, #8]	@ (800e570 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	2000281c 	.word	0x2000281c
 800e574:	08010e1c 	.word	0x08010e1c

0800e578 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	6039      	str	r1, [r7, #0]
 800e582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	221a      	movs	r2, #26
 800e588:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e58a:	f000 f843 	bl	800e614 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e58e:	4b02      	ldr	r3, [pc, #8]	@ (800e598 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	2000014c 	.word	0x2000014c

0800e59c <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	6039      	str	r1, [r7, #0]
 800e5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d105      	bne.n	800e5ba <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	4907      	ldr	r1, [pc, #28]	@ (800e5d0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800e5b2:	4808      	ldr	r0, [pc, #32]	@ (800e5d4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800e5b4:	f7ff fea1 	bl	800e2fa <USBD_GetString>
 800e5b8:	e004      	b.n	800e5c4 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	4904      	ldr	r1, [pc, #16]	@ (800e5d0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800e5be:	4805      	ldr	r0, [pc, #20]	@ (800e5d4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800e5c0:	f7ff fe9b 	bl	800e2fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5c4:	4b02      	ldr	r3, [pc, #8]	@ (800e5d0 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	2000281c 	.word	0x2000281c
 800e5d4:	08010e30 	.word	0x08010e30

0800e5d8 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	6039      	str	r1, [r7, #0]
 800e5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5e4:	79fb      	ldrb	r3, [r7, #7]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d105      	bne.n	800e5f6 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	4907      	ldr	r1, [pc, #28]	@ (800e60c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800e5ee:	4808      	ldr	r0, [pc, #32]	@ (800e610 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800e5f0:	f7ff fe83 	bl	800e2fa <USBD_GetString>
 800e5f4:	e004      	b.n	800e600 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	4904      	ldr	r1, [pc, #16]	@ (800e60c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800e5fa:	4805      	ldr	r0, [pc, #20]	@ (800e610 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800e5fc:	f7ff fe7d 	bl	800e2fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800e600:	4b02      	ldr	r3, [pc, #8]	@ (800e60c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	2000281c 	.word	0x2000281c
 800e610:	08010e3c 	.word	0x08010e3c

0800e614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e61a:	4b0f      	ldr	r3, [pc, #60]	@ (800e658 <Get_SerialNum+0x44>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e620:	4b0e      	ldr	r3, [pc, #56]	@ (800e65c <Get_SerialNum+0x48>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e626:	4b0e      	ldr	r3, [pc, #56]	@ (800e660 <Get_SerialNum+0x4c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4413      	add	r3, r2
 800e632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d009      	beq.n	800e64e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e63a:	2208      	movs	r2, #8
 800e63c:	4909      	ldr	r1, [pc, #36]	@ (800e664 <Get_SerialNum+0x50>)
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f000 f814 	bl	800e66c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e644:	2204      	movs	r2, #4
 800e646:	4908      	ldr	r1, [pc, #32]	@ (800e668 <Get_SerialNum+0x54>)
 800e648:	68b8      	ldr	r0, [r7, #8]
 800e64a:	f000 f80f 	bl	800e66c <IntToUnicode>
  }
}
 800e64e:	bf00      	nop
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	1fff7590 	.word	0x1fff7590
 800e65c:	1fff7594 	.word	0x1fff7594
 800e660:	1fff7598 	.word	0x1fff7598
 800e664:	2000014e 	.word	0x2000014e
 800e668:	2000015e 	.word	0x2000015e

0800e66c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b087      	sub	sp, #28
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	4613      	mov	r3, r2
 800e678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e67e:	2300      	movs	r3, #0
 800e680:	75fb      	strb	r3, [r7, #23]
 800e682:	e027      	b.n	800e6d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	0f1b      	lsrs	r3, r3, #28
 800e688:	2b09      	cmp	r3, #9
 800e68a:	d80b      	bhi.n	800e6a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	0f1b      	lsrs	r3, r3, #28
 800e690:	b2da      	uxtb	r2, r3
 800e692:	7dfb      	ldrb	r3, [r7, #23]
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	4619      	mov	r1, r3
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	440b      	add	r3, r1
 800e69c:	3230      	adds	r2, #48	@ 0x30
 800e69e:	b2d2      	uxtb	r2, r2
 800e6a0:	701a      	strb	r2, [r3, #0]
 800e6a2:	e00a      	b.n	800e6ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	0f1b      	lsrs	r3, r3, #28
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	7dfb      	ldrb	r3, [r7, #23]
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	440b      	add	r3, r1
 800e6b4:	3237      	adds	r2, #55	@ 0x37
 800e6b6:	b2d2      	uxtb	r2, r2
 800e6b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	011b      	lsls	r3, r3, #4
 800e6be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	005b      	lsls	r3, r3, #1
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	75fb      	strb	r3, [r7, #23]
 800e6d4:	7dfa      	ldrb	r2, [r7, #23]
 800e6d6:	79fb      	ldrb	r3, [r7, #7]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d3d3      	bcc.n	800e684 <IntToUnicode+0x18>
  }
}
 800e6dc:	bf00      	nop
 800e6de:	bf00      	nop
 800e6e0:	371c      	adds	r7, #28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
	...

0800e6ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b094      	sub	sp, #80	@ 0x50
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e6f4:	f107 030c 	add.w	r3, r7, #12
 800e6f8:	2244      	movs	r2, #68	@ 0x44
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 fbe2 	bl	800eec6 <memset>
  if(pcdHandle->Instance==USB)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a15      	ldr	r2, [pc, #84]	@ (800e75c <HAL_PCD_MspInit+0x70>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d122      	bne.n	800e752 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e70c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e710:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e712:	2300      	movs	r3, #0
 800e714:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e716:	f107 030c 	add.w	r3, r7, #12
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f9 fff4 	bl	8008708 <HAL_RCCEx_PeriphCLKConfig>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e726:	f7f2 fe7c 	bl	8001422 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e72a:	4b0d      	ldr	r3, [pc, #52]	@ (800e760 <HAL_PCD_MspInit+0x74>)
 800e72c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e72e:	4a0c      	ldr	r2, [pc, #48]	@ (800e760 <HAL_PCD_MspInit+0x74>)
 800e730:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e734:	6593      	str	r3, [r2, #88]	@ 0x58
 800e736:	4b0a      	ldr	r3, [pc, #40]	@ (800e760 <HAL_PCD_MspInit+0x74>)
 800e738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e73a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e73e:	60bb      	str	r3, [r7, #8]
 800e740:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e742:	2200      	movs	r2, #0
 800e744:	2100      	movs	r1, #0
 800e746:	2014      	movs	r0, #20
 800e748:	f7f6 facd 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e74c:	2014      	movs	r0, #20
 800e74e:	f7f6 fae4 	bl	8004d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e752:	bf00      	nop
 800e754:	3750      	adds	r7, #80	@ 0x50
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	40005c00 	.word	0x40005c00
 800e760:	40021000 	.word	0x40021000

0800e764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e778:	4619      	mov	r1, r3
 800e77a:	4610      	mov	r0, r2
 800e77c:	f7fe fe48 	bl	800d410 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e79a:	78fa      	ldrb	r2, [r7, #3]
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	440b      	add	r3, r1
 800e7a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	f7fe fe82 	bl	800d4ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e7b6:	bf00      	nop
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e7d0:	78fa      	ldrb	r2, [r7, #3]
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	440b      	add	r3, r1
 800e7de:	3324      	adds	r3, #36	@ 0x24
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	f7fe fecb 	bl	800d580 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e800:	4618      	mov	r0, r3
 800e802:	f7fe ffdf 	bl	800d7c4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e806:	bf00      	nop
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e816:	2301      	movs	r3, #1
 800e818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	795b      	ldrb	r3, [r3, #5]
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d001      	beq.n	800e826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e822:	f7f2 fdfe 	bl	8001422 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e82c:	7bfa      	ldrb	r2, [r7, #15]
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7fe ff89 	bl	800d748 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fe ff35 	bl	800d6ac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fe ff84 	bl	800d768 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7a5b      	ldrb	r3, [r3, #9]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d005      	beq.n	800e874 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e868:	4b04      	ldr	r3, [pc, #16]	@ (800e87c <HAL_PCD_SuspendCallback+0x30>)
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	4a03      	ldr	r2, [pc, #12]	@ (800e87c <HAL_PCD_SuspendCallback+0x30>)
 800e86e:	f043 0306 	orr.w	r3, r3, #6
 800e872:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e874:	bf00      	nop
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	e000ed00 	.word	0xe000ed00

0800e880 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	7a5b      	ldrb	r3, [r3, #9]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d007      	beq.n	800e8a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e890:	4b08      	ldr	r3, [pc, #32]	@ (800e8b4 <HAL_PCD_ResumeCallback+0x34>)
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	4a07      	ldr	r2, [pc, #28]	@ (800e8b4 <HAL_PCD_ResumeCallback+0x34>)
 800e896:	f023 0306 	bic.w	r3, r3, #6
 800e89a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e89c:	f000 f99e 	bl	800ebdc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe ff74 	bl	800d794 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	e000ed00 	.word	0xe000ed00

0800e8b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e8c0:	4a22      	ldr	r2, [pc, #136]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a20      	ldr	r2, [pc, #128]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e8d0:	4b1e      	ldr	r3, [pc, #120]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800e950 <USBD_LL_Init+0x98>)
 800e8d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e8d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8d8:	2208      	movs	r2, #8
 800e8da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e8dc:	4b1b      	ldr	r3, [pc, #108]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8de:	2202      	movs	r2, #2
 800e8e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e8e8:	4b18      	ldr	r3, [pc, #96]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e8ee:	4b17      	ldr	r3, [pc, #92]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e8f4:	4b15      	ldr	r3, [pc, #84]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e8fa:	4b14      	ldr	r3, [pc, #80]	@ (800e94c <USBD_LL_Init+0x94>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e900:	4812      	ldr	r0, [pc, #72]	@ (800e94c <USBD_LL_Init+0x94>)
 800e902:	f7f7 fc29 	bl	8006158 <HAL_PCD_Init>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d001      	beq.n	800e910 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e90c:	f7f2 fd89 	bl	8001422 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e916:	2318      	movs	r3, #24
 800e918:	2200      	movs	r2, #0
 800e91a:	2100      	movs	r1, #0
 800e91c:	f7f9 f898 	bl	8007a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e926:	2358      	movs	r3, #88	@ 0x58
 800e928:	2200      	movs	r2, #0
 800e92a:	2180      	movs	r1, #128	@ 0x80
 800e92c:	f7f9 f890 	bl	8007a50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e936:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e93a:	2200      	movs	r2, #0
 800e93c:	2181      	movs	r1, #129	@ 0x81
 800e93e:	f7f9 f887 	bl	8007a50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	20002a1c 	.word	0x20002a1c
 800e950:	40005c00 	.word	0x40005c00

0800e954 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e960:	2300      	movs	r3, #0
 800e962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7f7 fcc2 	bl	80062f4 <HAL_PCD_Start>
 800e970:	4603      	mov	r3, r0
 800e972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	4618      	mov	r0, r3
 800e978:	f000 f936 	bl	800ebe8 <USBD_Get_USB_Status>
 800e97c:	4603      	mov	r3, r0
 800e97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e980:	7bbb      	ldrb	r3, [r7, #14]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3710      	adds	r7, #16
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b084      	sub	sp, #16
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	4608      	mov	r0, r1
 800e994:	4611      	mov	r1, r2
 800e996:	461a      	mov	r2, r3
 800e998:	4603      	mov	r3, r0
 800e99a:	70fb      	strb	r3, [r7, #3]
 800e99c:	460b      	mov	r3, r1
 800e99e:	70bb      	strb	r3, [r7, #2]
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e9b2:	78bb      	ldrb	r3, [r7, #2]
 800e9b4:	883a      	ldrh	r2, [r7, #0]
 800e9b6:	78f9      	ldrb	r1, [r7, #3]
 800e9b8:	f7f7 fe09 	bl	80065ce <HAL_PCD_EP_Open>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9c0:	7bfb      	ldrb	r3, [r7, #15]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 f910 	bl	800ebe8 <USBD_Get_USB_Status>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b084      	sub	sp, #16
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	460b      	mov	r3, r1
 800e9e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e9f0:	78fa      	ldrb	r2, [r7, #3]
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7f7 fe49 	bl	800668c <HAL_PCD_EP_Close>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 f8f1 	bl	800ebe8 <USBD_Get_USB_Status>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea2e:	78fa      	ldrb	r2, [r7, #3]
 800ea30:	4611      	mov	r1, r2
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f7 feda 	bl	80067ec <HAL_PCD_EP_SetStall>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 f8d2 	bl	800ebe8 <USBD_Get_USB_Status>
 800ea44:	4603      	mov	r3, r0
 800ea46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea62:	2300      	movs	r3, #0
 800ea64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea6c:	78fa      	ldrb	r2, [r7, #3]
 800ea6e:	4611      	mov	r1, r2
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7f7 ff0d 	bl	8006890 <HAL_PCD_EP_ClrStall>
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 f8b3 	bl	800ebe8 <USBD_Get_USB_Status>
 800ea82:	4603      	mov	r3, r0
 800ea84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800eaa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eaa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	da0b      	bge.n	800eac4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eaac:	78fb      	ldrb	r3, [r7, #3]
 800eaae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eab2:	68f9      	ldr	r1, [r7, #12]
 800eab4:	4613      	mov	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4413      	add	r3, r2
 800eaba:	00db      	lsls	r3, r3, #3
 800eabc:	440b      	add	r3, r1
 800eabe:	3312      	adds	r3, #18
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	e00b      	b.n	800eadc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eaca:	68f9      	ldr	r1, [r7, #12]
 800eacc:	4613      	mov	r3, r2
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	440b      	add	r3, r1
 800ead6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800eada:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800eb02:	78fa      	ldrb	r2, [r7, #3]
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7f7 fd3d 	bl	8006586 <HAL_PCD_SetAddress>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb10:	7bfb      	ldrb	r3, [r7, #15]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 f868 	bl	800ebe8 <USBD_Get_USB_Status>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b086      	sub	sp, #24
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	60f8      	str	r0, [r7, #12]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
 800eb32:	460b      	mov	r3, r1
 800eb34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb36:	2300      	movs	r3, #0
 800eb38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800eb44:	7af9      	ldrb	r1, [r7, #11]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	f7f7 fe18 	bl	800677e <HAL_PCD_EP_Transmit>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb52:	7dfb      	ldrb	r3, [r7, #23]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 f847 	bl	800ebe8 <USBD_Get_USB_Status>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	607a      	str	r2, [r7, #4]
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	460b      	mov	r3, r1
 800eb76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800eb86:	7af9      	ldrb	r1, [r7, #11]
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	f7f7 fdc6 	bl	800671c <HAL_PCD_EP_Receive>
 800eb90:	4603      	mov	r3, r0
 800eb92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb94:	7dfb      	ldrb	r3, [r7, #23]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 f826 	bl	800ebe8 <USBD_Get_USB_Status>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eba0:	7dbb      	ldrb	r3, [r7, #22]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3718      	adds	r7, #24
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
	...

0800ebac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ebb4:	4b03      	ldr	r3, [pc, #12]	@ (800ebc4 <USBD_static_malloc+0x18>)
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	20002cf8 	.word	0x20002cf8

0800ebc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]

}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ebe0:	f7f2 fbd4 	bl	800138c <SystemClock_Config>
}
 800ebe4:	bf00      	nop
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ebf6:	79fb      	ldrb	r3, [r7, #7]
 800ebf8:	2b03      	cmp	r3, #3
 800ebfa:	d817      	bhi.n	800ec2c <USBD_Get_USB_Status+0x44>
 800ebfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ec04 <USBD_Get_USB_Status+0x1c>)
 800ebfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec02:	bf00      	nop
 800ec04:	0800ec15 	.word	0x0800ec15
 800ec08:	0800ec1b 	.word	0x0800ec1b
 800ec0c:	0800ec21 	.word	0x0800ec21
 800ec10:	0800ec27 	.word	0x0800ec27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
    break;
 800ec18:	e00b      	b.n	800ec32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1e:	e008      	b.n	800ec32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec20:	2301      	movs	r3, #1
 800ec22:	73fb      	strb	r3, [r7, #15]
    break;
 800ec24:	e005      	b.n	800ec32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec26:	2303      	movs	r3, #3
 800ec28:	73fb      	strb	r3, [r7, #15]
    break;
 800ec2a:	e002      	b.n	800ec32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec30:	bf00      	nop
  }
  return usb_status;
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <rand>:
 800ec40:	4b16      	ldr	r3, [pc, #88]	@ (800ec9c <rand+0x5c>)
 800ec42:	b510      	push	{r4, lr}
 800ec44:	681c      	ldr	r4, [r3, #0]
 800ec46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ec48:	b9b3      	cbnz	r3, 800ec78 <rand+0x38>
 800ec4a:	2018      	movs	r0, #24
 800ec4c:	f000 fa2e 	bl	800f0ac <malloc>
 800ec50:	4602      	mov	r2, r0
 800ec52:	6320      	str	r0, [r4, #48]	@ 0x30
 800ec54:	b920      	cbnz	r0, 800ec60 <rand+0x20>
 800ec56:	4b12      	ldr	r3, [pc, #72]	@ (800eca0 <rand+0x60>)
 800ec58:	4812      	ldr	r0, [pc, #72]	@ (800eca4 <rand+0x64>)
 800ec5a:	2152      	movs	r1, #82	@ 0x52
 800ec5c:	f000 f9be 	bl	800efdc <__assert_func>
 800ec60:	4911      	ldr	r1, [pc, #68]	@ (800eca8 <rand+0x68>)
 800ec62:	4b12      	ldr	r3, [pc, #72]	@ (800ecac <rand+0x6c>)
 800ec64:	e9c0 1300 	strd	r1, r3, [r0]
 800ec68:	4b11      	ldr	r3, [pc, #68]	@ (800ecb0 <rand+0x70>)
 800ec6a:	6083      	str	r3, [r0, #8]
 800ec6c:	230b      	movs	r3, #11
 800ec6e:	8183      	strh	r3, [r0, #12]
 800ec70:	2100      	movs	r1, #0
 800ec72:	2001      	movs	r0, #1
 800ec74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ec78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec7a:	480e      	ldr	r0, [pc, #56]	@ (800ecb4 <rand+0x74>)
 800ec7c:	690b      	ldr	r3, [r1, #16]
 800ec7e:	694c      	ldr	r4, [r1, #20]
 800ec80:	4a0d      	ldr	r2, [pc, #52]	@ (800ecb8 <rand+0x78>)
 800ec82:	4358      	muls	r0, r3
 800ec84:	fb02 0004 	mla	r0, r2, r4, r0
 800ec88:	fba3 3202 	umull	r3, r2, r3, r2
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	eb40 0002 	adc.w	r0, r0, r2
 800ec92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ec96:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ec9a:	bd10      	pop	{r4, pc}
 800ec9c:	20000174 	.word	0x20000174
 800eca0:	08010e94 	.word	0x08010e94
 800eca4:	08010eab 	.word	0x08010eab
 800eca8:	abcd330e 	.word	0xabcd330e
 800ecac:	e66d1234 	.word	0xe66d1234
 800ecb0:	0005deec 	.word	0x0005deec
 800ecb4:	5851f42d 	.word	0x5851f42d
 800ecb8:	4c957f2d 	.word	0x4c957f2d

0800ecbc <std>:
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	b510      	push	{r4, lr}
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecca:	6083      	str	r3, [r0, #8]
 800eccc:	8181      	strh	r1, [r0, #12]
 800ecce:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecd0:	81c2      	strh	r2, [r0, #14]
 800ecd2:	6183      	str	r3, [r0, #24]
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	2208      	movs	r2, #8
 800ecd8:	305c      	adds	r0, #92	@ 0x5c
 800ecda:	f000 f8f4 	bl	800eec6 <memset>
 800ecde:	4b0d      	ldr	r3, [pc, #52]	@ (800ed14 <std+0x58>)
 800ece0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ece2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed18 <std+0x5c>)
 800ece4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ece6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed1c <std+0x60>)
 800ece8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecea:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <std+0x64>)
 800ecec:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecee:	4b0d      	ldr	r3, [pc, #52]	@ (800ed24 <std+0x68>)
 800ecf0:	6224      	str	r4, [r4, #32]
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	d006      	beq.n	800ed04 <std+0x48>
 800ecf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecfa:	4294      	cmp	r4, r2
 800ecfc:	d002      	beq.n	800ed04 <std+0x48>
 800ecfe:	33d0      	adds	r3, #208	@ 0xd0
 800ed00:	429c      	cmp	r4, r3
 800ed02:	d105      	bne.n	800ed10 <std+0x54>
 800ed04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed0c:	f000 b954 	b.w	800efb8 <__retarget_lock_init_recursive>
 800ed10:	bd10      	pop	{r4, pc}
 800ed12:	bf00      	nop
 800ed14:	0800ee41 	.word	0x0800ee41
 800ed18:	0800ee63 	.word	0x0800ee63
 800ed1c:	0800ee9b 	.word	0x0800ee9b
 800ed20:	0800eebf 	.word	0x0800eebf
 800ed24:	20002d0c 	.word	0x20002d0c

0800ed28 <stdio_exit_handler>:
 800ed28:	4a02      	ldr	r2, [pc, #8]	@ (800ed34 <stdio_exit_handler+0xc>)
 800ed2a:	4903      	ldr	r1, [pc, #12]	@ (800ed38 <stdio_exit_handler+0x10>)
 800ed2c:	4803      	ldr	r0, [pc, #12]	@ (800ed3c <stdio_exit_handler+0x14>)
 800ed2e:	f000 b869 	b.w	800ee04 <_fwalk_sglue>
 800ed32:	bf00      	nop
 800ed34:	20000168 	.word	0x20000168
 800ed38:	0800f639 	.word	0x0800f639
 800ed3c:	20000178 	.word	0x20000178

0800ed40 <cleanup_stdio>:
 800ed40:	6841      	ldr	r1, [r0, #4]
 800ed42:	4b0c      	ldr	r3, [pc, #48]	@ (800ed74 <cleanup_stdio+0x34>)
 800ed44:	4299      	cmp	r1, r3
 800ed46:	b510      	push	{r4, lr}
 800ed48:	4604      	mov	r4, r0
 800ed4a:	d001      	beq.n	800ed50 <cleanup_stdio+0x10>
 800ed4c:	f000 fc74 	bl	800f638 <_fflush_r>
 800ed50:	68a1      	ldr	r1, [r4, #8]
 800ed52:	4b09      	ldr	r3, [pc, #36]	@ (800ed78 <cleanup_stdio+0x38>)
 800ed54:	4299      	cmp	r1, r3
 800ed56:	d002      	beq.n	800ed5e <cleanup_stdio+0x1e>
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 fc6d 	bl	800f638 <_fflush_r>
 800ed5e:	68e1      	ldr	r1, [r4, #12]
 800ed60:	4b06      	ldr	r3, [pc, #24]	@ (800ed7c <cleanup_stdio+0x3c>)
 800ed62:	4299      	cmp	r1, r3
 800ed64:	d004      	beq.n	800ed70 <cleanup_stdio+0x30>
 800ed66:	4620      	mov	r0, r4
 800ed68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed6c:	f000 bc64 	b.w	800f638 <_fflush_r>
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	bf00      	nop
 800ed74:	20002d0c 	.word	0x20002d0c
 800ed78:	20002d74 	.word	0x20002d74
 800ed7c:	20002ddc 	.word	0x20002ddc

0800ed80 <global_stdio_init.part.0>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	4b0b      	ldr	r3, [pc, #44]	@ (800edb0 <global_stdio_init.part.0+0x30>)
 800ed84:	4c0b      	ldr	r4, [pc, #44]	@ (800edb4 <global_stdio_init.part.0+0x34>)
 800ed86:	4a0c      	ldr	r2, [pc, #48]	@ (800edb8 <global_stdio_init.part.0+0x38>)
 800ed88:	601a      	str	r2, [r3, #0]
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2104      	movs	r1, #4
 800ed90:	f7ff ff94 	bl	800ecbc <std>
 800ed94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed98:	2201      	movs	r2, #1
 800ed9a:	2109      	movs	r1, #9
 800ed9c:	f7ff ff8e 	bl	800ecbc <std>
 800eda0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eda4:	2202      	movs	r2, #2
 800eda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edaa:	2112      	movs	r1, #18
 800edac:	f7ff bf86 	b.w	800ecbc <std>
 800edb0:	20002e44 	.word	0x20002e44
 800edb4:	20002d0c 	.word	0x20002d0c
 800edb8:	0800ed29 	.word	0x0800ed29

0800edbc <__sfp_lock_acquire>:
 800edbc:	4801      	ldr	r0, [pc, #4]	@ (800edc4 <__sfp_lock_acquire+0x8>)
 800edbe:	f000 b8fc 	b.w	800efba <__retarget_lock_acquire_recursive>
 800edc2:	bf00      	nop
 800edc4:	20002e4d 	.word	0x20002e4d

0800edc8 <__sfp_lock_release>:
 800edc8:	4801      	ldr	r0, [pc, #4]	@ (800edd0 <__sfp_lock_release+0x8>)
 800edca:	f000 b8f7 	b.w	800efbc <__retarget_lock_release_recursive>
 800edce:	bf00      	nop
 800edd0:	20002e4d 	.word	0x20002e4d

0800edd4 <__sinit>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	4604      	mov	r4, r0
 800edd8:	f7ff fff0 	bl	800edbc <__sfp_lock_acquire>
 800eddc:	6a23      	ldr	r3, [r4, #32]
 800edde:	b11b      	cbz	r3, 800ede8 <__sinit+0x14>
 800ede0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede4:	f7ff bff0 	b.w	800edc8 <__sfp_lock_release>
 800ede8:	4b04      	ldr	r3, [pc, #16]	@ (800edfc <__sinit+0x28>)
 800edea:	6223      	str	r3, [r4, #32]
 800edec:	4b04      	ldr	r3, [pc, #16]	@ (800ee00 <__sinit+0x2c>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1f5      	bne.n	800ede0 <__sinit+0xc>
 800edf4:	f7ff ffc4 	bl	800ed80 <global_stdio_init.part.0>
 800edf8:	e7f2      	b.n	800ede0 <__sinit+0xc>
 800edfa:	bf00      	nop
 800edfc:	0800ed41 	.word	0x0800ed41
 800ee00:	20002e44 	.word	0x20002e44

0800ee04 <_fwalk_sglue>:
 800ee04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee08:	4607      	mov	r7, r0
 800ee0a:	4688      	mov	r8, r1
 800ee0c:	4614      	mov	r4, r2
 800ee0e:	2600      	movs	r6, #0
 800ee10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee14:	f1b9 0901 	subs.w	r9, r9, #1
 800ee18:	d505      	bpl.n	800ee26 <_fwalk_sglue+0x22>
 800ee1a:	6824      	ldr	r4, [r4, #0]
 800ee1c:	2c00      	cmp	r4, #0
 800ee1e:	d1f7      	bne.n	800ee10 <_fwalk_sglue+0xc>
 800ee20:	4630      	mov	r0, r6
 800ee22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d907      	bls.n	800ee3c <_fwalk_sglue+0x38>
 800ee2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee30:	3301      	adds	r3, #1
 800ee32:	d003      	beq.n	800ee3c <_fwalk_sglue+0x38>
 800ee34:	4629      	mov	r1, r5
 800ee36:	4638      	mov	r0, r7
 800ee38:	47c0      	blx	r8
 800ee3a:	4306      	orrs	r6, r0
 800ee3c:	3568      	adds	r5, #104	@ 0x68
 800ee3e:	e7e9      	b.n	800ee14 <_fwalk_sglue+0x10>

0800ee40 <__sread>:
 800ee40:	b510      	push	{r4, lr}
 800ee42:	460c      	mov	r4, r1
 800ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee48:	f000 f868 	bl	800ef1c <_read_r>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	bfab      	itete	ge
 800ee50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee52:	89a3      	ldrhlt	r3, [r4, #12]
 800ee54:	181b      	addge	r3, r3, r0
 800ee56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee5a:	bfac      	ite	ge
 800ee5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee5e:	81a3      	strhlt	r3, [r4, #12]
 800ee60:	bd10      	pop	{r4, pc}

0800ee62 <__swrite>:
 800ee62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee66:	461f      	mov	r7, r3
 800ee68:	898b      	ldrh	r3, [r1, #12]
 800ee6a:	05db      	lsls	r3, r3, #23
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	4616      	mov	r6, r2
 800ee72:	d505      	bpl.n	800ee80 <__swrite+0x1e>
 800ee74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee78:	2302      	movs	r3, #2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f000 f83c 	bl	800eef8 <_lseek_r>
 800ee80:	89a3      	ldrh	r3, [r4, #12]
 800ee82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	463b      	mov	r3, r7
 800ee90:	4628      	mov	r0, r5
 800ee92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee96:	f000 b853 	b.w	800ef40 <_write_r>

0800ee9a <__sseek>:
 800ee9a:	b510      	push	{r4, lr}
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea2:	f000 f829 	bl	800eef8 <_lseek_r>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	bf15      	itete	ne
 800eeac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eeae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eeb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eeb6:	81a3      	strheq	r3, [r4, #12]
 800eeb8:	bf18      	it	ne
 800eeba:	81a3      	strhne	r3, [r4, #12]
 800eebc:	bd10      	pop	{r4, pc}

0800eebe <__sclose>:
 800eebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec2:	f000 b809 	b.w	800eed8 <_close_r>

0800eec6 <memset>:
 800eec6:	4402      	add	r2, r0
 800eec8:	4603      	mov	r3, r0
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d100      	bne.n	800eed0 <memset+0xa>
 800eece:	4770      	bx	lr
 800eed0:	f803 1b01 	strb.w	r1, [r3], #1
 800eed4:	e7f9      	b.n	800eeca <memset+0x4>
	...

0800eed8 <_close_r>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	4d06      	ldr	r5, [pc, #24]	@ (800eef4 <_close_r+0x1c>)
 800eedc:	2300      	movs	r3, #0
 800eede:	4604      	mov	r4, r0
 800eee0:	4608      	mov	r0, r1
 800eee2:	602b      	str	r3, [r5, #0]
 800eee4:	f7f3 ff4e 	bl	8002d84 <_close>
 800eee8:	1c43      	adds	r3, r0, #1
 800eeea:	d102      	bne.n	800eef2 <_close_r+0x1a>
 800eeec:	682b      	ldr	r3, [r5, #0]
 800eeee:	b103      	cbz	r3, 800eef2 <_close_r+0x1a>
 800eef0:	6023      	str	r3, [r4, #0]
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
 800eef4:	20002e48 	.word	0x20002e48

0800eef8 <_lseek_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4d07      	ldr	r5, [pc, #28]	@ (800ef18 <_lseek_r+0x20>)
 800eefc:	4604      	mov	r4, r0
 800eefe:	4608      	mov	r0, r1
 800ef00:	4611      	mov	r1, r2
 800ef02:	2200      	movs	r2, #0
 800ef04:	602a      	str	r2, [r5, #0]
 800ef06:	461a      	mov	r2, r3
 800ef08:	f7f3 ff63 	bl	8002dd2 <_lseek>
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	d102      	bne.n	800ef16 <_lseek_r+0x1e>
 800ef10:	682b      	ldr	r3, [r5, #0]
 800ef12:	b103      	cbz	r3, 800ef16 <_lseek_r+0x1e>
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	20002e48 	.word	0x20002e48

0800ef1c <_read_r>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	4d07      	ldr	r5, [pc, #28]	@ (800ef3c <_read_r+0x20>)
 800ef20:	4604      	mov	r4, r0
 800ef22:	4608      	mov	r0, r1
 800ef24:	4611      	mov	r1, r2
 800ef26:	2200      	movs	r2, #0
 800ef28:	602a      	str	r2, [r5, #0]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f7f3 fef1 	bl	8002d12 <_read>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d102      	bne.n	800ef3a <_read_r+0x1e>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	b103      	cbz	r3, 800ef3a <_read_r+0x1e>
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	20002e48 	.word	0x20002e48

0800ef40 <_write_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	@ (800ef60 <_write_r+0x20>)
 800ef44:	4604      	mov	r4, r0
 800ef46:	4608      	mov	r0, r1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	602a      	str	r2, [r5, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f7f3 fefc 	bl	8002d4c <_write>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_write_r+0x1e>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_write_r+0x1e>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	20002e48 	.word	0x20002e48

0800ef64 <__errno>:
 800ef64:	4b01      	ldr	r3, [pc, #4]	@ (800ef6c <__errno+0x8>)
 800ef66:	6818      	ldr	r0, [r3, #0]
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	20000174 	.word	0x20000174

0800ef70 <__libc_init_array>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	4d0d      	ldr	r5, [pc, #52]	@ (800efa8 <__libc_init_array+0x38>)
 800ef74:	4c0d      	ldr	r4, [pc, #52]	@ (800efac <__libc_init_array+0x3c>)
 800ef76:	1b64      	subs	r4, r4, r5
 800ef78:	10a4      	asrs	r4, r4, #2
 800ef7a:	2600      	movs	r6, #0
 800ef7c:	42a6      	cmp	r6, r4
 800ef7e:	d109      	bne.n	800ef94 <__libc_init_array+0x24>
 800ef80:	4d0b      	ldr	r5, [pc, #44]	@ (800efb0 <__libc_init_array+0x40>)
 800ef82:	4c0c      	ldr	r4, [pc, #48]	@ (800efb4 <__libc_init_array+0x44>)
 800ef84:	f001 ff32 	bl	8010dec <_init>
 800ef88:	1b64      	subs	r4, r4, r5
 800ef8a:	10a4      	asrs	r4, r4, #2
 800ef8c:	2600      	movs	r6, #0
 800ef8e:	42a6      	cmp	r6, r4
 800ef90:	d105      	bne.n	800ef9e <__libc_init_array+0x2e>
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef98:	4798      	blx	r3
 800ef9a:	3601      	adds	r6, #1
 800ef9c:	e7ee      	b.n	800ef7c <__libc_init_array+0xc>
 800ef9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800efa2:	4798      	blx	r3
 800efa4:	3601      	adds	r6, #1
 800efa6:	e7f2      	b.n	800ef8e <__libc_init_array+0x1e>
 800efa8:	08011364 	.word	0x08011364
 800efac:	08011364 	.word	0x08011364
 800efb0:	08011364 	.word	0x08011364
 800efb4:	08011368 	.word	0x08011368

0800efb8 <__retarget_lock_init_recursive>:
 800efb8:	4770      	bx	lr

0800efba <__retarget_lock_acquire_recursive>:
 800efba:	4770      	bx	lr

0800efbc <__retarget_lock_release_recursive>:
 800efbc:	4770      	bx	lr

0800efbe <memcpy>:
 800efbe:	440a      	add	r2, r1
 800efc0:	4291      	cmp	r1, r2
 800efc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800efc6:	d100      	bne.n	800efca <memcpy+0xc>
 800efc8:	4770      	bx	lr
 800efca:	b510      	push	{r4, lr}
 800efcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efd4:	4291      	cmp	r1, r2
 800efd6:	d1f9      	bne.n	800efcc <memcpy+0xe>
 800efd8:	bd10      	pop	{r4, pc}
	...

0800efdc <__assert_func>:
 800efdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efde:	4614      	mov	r4, r2
 800efe0:	461a      	mov	r2, r3
 800efe2:	4b09      	ldr	r3, [pc, #36]	@ (800f008 <__assert_func+0x2c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4605      	mov	r5, r0
 800efe8:	68d8      	ldr	r0, [r3, #12]
 800efea:	b14c      	cbz	r4, 800f000 <__assert_func+0x24>
 800efec:	4b07      	ldr	r3, [pc, #28]	@ (800f00c <__assert_func+0x30>)
 800efee:	9100      	str	r1, [sp, #0]
 800eff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eff4:	4906      	ldr	r1, [pc, #24]	@ (800f010 <__assert_func+0x34>)
 800eff6:	462b      	mov	r3, r5
 800eff8:	f000 fb46 	bl	800f688 <fiprintf>
 800effc:	f000 fb66 	bl	800f6cc <abort>
 800f000:	4b04      	ldr	r3, [pc, #16]	@ (800f014 <__assert_func+0x38>)
 800f002:	461c      	mov	r4, r3
 800f004:	e7f3      	b.n	800efee <__assert_func+0x12>
 800f006:	bf00      	nop
 800f008:	20000174 	.word	0x20000174
 800f00c:	08010f03 	.word	0x08010f03
 800f010:	08010f10 	.word	0x08010f10
 800f014:	08010f3e 	.word	0x08010f3e

0800f018 <_free_r>:
 800f018:	b538      	push	{r3, r4, r5, lr}
 800f01a:	4605      	mov	r5, r0
 800f01c:	2900      	cmp	r1, #0
 800f01e:	d041      	beq.n	800f0a4 <_free_r+0x8c>
 800f020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f024:	1f0c      	subs	r4, r1, #4
 800f026:	2b00      	cmp	r3, #0
 800f028:	bfb8      	it	lt
 800f02a:	18e4      	addlt	r4, r4, r3
 800f02c:	f000 f8e8 	bl	800f200 <__malloc_lock>
 800f030:	4a1d      	ldr	r2, [pc, #116]	@ (800f0a8 <_free_r+0x90>)
 800f032:	6813      	ldr	r3, [r2, #0]
 800f034:	b933      	cbnz	r3, 800f044 <_free_r+0x2c>
 800f036:	6063      	str	r3, [r4, #4]
 800f038:	6014      	str	r4, [r2, #0]
 800f03a:	4628      	mov	r0, r5
 800f03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f040:	f000 b8e4 	b.w	800f20c <__malloc_unlock>
 800f044:	42a3      	cmp	r3, r4
 800f046:	d908      	bls.n	800f05a <_free_r+0x42>
 800f048:	6820      	ldr	r0, [r4, #0]
 800f04a:	1821      	adds	r1, r4, r0
 800f04c:	428b      	cmp	r3, r1
 800f04e:	bf01      	itttt	eq
 800f050:	6819      	ldreq	r1, [r3, #0]
 800f052:	685b      	ldreq	r3, [r3, #4]
 800f054:	1809      	addeq	r1, r1, r0
 800f056:	6021      	streq	r1, [r4, #0]
 800f058:	e7ed      	b.n	800f036 <_free_r+0x1e>
 800f05a:	461a      	mov	r2, r3
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	b10b      	cbz	r3, 800f064 <_free_r+0x4c>
 800f060:	42a3      	cmp	r3, r4
 800f062:	d9fa      	bls.n	800f05a <_free_r+0x42>
 800f064:	6811      	ldr	r1, [r2, #0]
 800f066:	1850      	adds	r0, r2, r1
 800f068:	42a0      	cmp	r0, r4
 800f06a:	d10b      	bne.n	800f084 <_free_r+0x6c>
 800f06c:	6820      	ldr	r0, [r4, #0]
 800f06e:	4401      	add	r1, r0
 800f070:	1850      	adds	r0, r2, r1
 800f072:	4283      	cmp	r3, r0
 800f074:	6011      	str	r1, [r2, #0]
 800f076:	d1e0      	bne.n	800f03a <_free_r+0x22>
 800f078:	6818      	ldr	r0, [r3, #0]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	6053      	str	r3, [r2, #4]
 800f07e:	4408      	add	r0, r1
 800f080:	6010      	str	r0, [r2, #0]
 800f082:	e7da      	b.n	800f03a <_free_r+0x22>
 800f084:	d902      	bls.n	800f08c <_free_r+0x74>
 800f086:	230c      	movs	r3, #12
 800f088:	602b      	str	r3, [r5, #0]
 800f08a:	e7d6      	b.n	800f03a <_free_r+0x22>
 800f08c:	6820      	ldr	r0, [r4, #0]
 800f08e:	1821      	adds	r1, r4, r0
 800f090:	428b      	cmp	r3, r1
 800f092:	bf04      	itt	eq
 800f094:	6819      	ldreq	r1, [r3, #0]
 800f096:	685b      	ldreq	r3, [r3, #4]
 800f098:	6063      	str	r3, [r4, #4]
 800f09a:	bf04      	itt	eq
 800f09c:	1809      	addeq	r1, r1, r0
 800f09e:	6021      	streq	r1, [r4, #0]
 800f0a0:	6054      	str	r4, [r2, #4]
 800f0a2:	e7ca      	b.n	800f03a <_free_r+0x22>
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20002e54 	.word	0x20002e54

0800f0ac <malloc>:
 800f0ac:	4b02      	ldr	r3, [pc, #8]	@ (800f0b8 <malloc+0xc>)
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	6818      	ldr	r0, [r3, #0]
 800f0b2:	f000 b825 	b.w	800f100 <_malloc_r>
 800f0b6:	bf00      	nop
 800f0b8:	20000174 	.word	0x20000174

0800f0bc <sbrk_aligned>:
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	4e0f      	ldr	r6, [pc, #60]	@ (800f0fc <sbrk_aligned+0x40>)
 800f0c0:	460c      	mov	r4, r1
 800f0c2:	6831      	ldr	r1, [r6, #0]
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	b911      	cbnz	r1, 800f0ce <sbrk_aligned+0x12>
 800f0c8:	f000 faf0 	bl	800f6ac <_sbrk_r>
 800f0cc:	6030      	str	r0, [r6, #0]
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	f000 faeb 	bl	800f6ac <_sbrk_r>
 800f0d6:	1c43      	adds	r3, r0, #1
 800f0d8:	d103      	bne.n	800f0e2 <sbrk_aligned+0x26>
 800f0da:	f04f 34ff 	mov.w	r4, #4294967295
 800f0de:	4620      	mov	r0, r4
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
 800f0e2:	1cc4      	adds	r4, r0, #3
 800f0e4:	f024 0403 	bic.w	r4, r4, #3
 800f0e8:	42a0      	cmp	r0, r4
 800f0ea:	d0f8      	beq.n	800f0de <sbrk_aligned+0x22>
 800f0ec:	1a21      	subs	r1, r4, r0
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 fadc 	bl	800f6ac <_sbrk_r>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d1f2      	bne.n	800f0de <sbrk_aligned+0x22>
 800f0f8:	e7ef      	b.n	800f0da <sbrk_aligned+0x1e>
 800f0fa:	bf00      	nop
 800f0fc:	20002e50 	.word	0x20002e50

0800f100 <_malloc_r>:
 800f100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f104:	1ccd      	adds	r5, r1, #3
 800f106:	f025 0503 	bic.w	r5, r5, #3
 800f10a:	3508      	adds	r5, #8
 800f10c:	2d0c      	cmp	r5, #12
 800f10e:	bf38      	it	cc
 800f110:	250c      	movcc	r5, #12
 800f112:	2d00      	cmp	r5, #0
 800f114:	4606      	mov	r6, r0
 800f116:	db01      	blt.n	800f11c <_malloc_r+0x1c>
 800f118:	42a9      	cmp	r1, r5
 800f11a:	d904      	bls.n	800f126 <_malloc_r+0x26>
 800f11c:	230c      	movs	r3, #12
 800f11e:	6033      	str	r3, [r6, #0]
 800f120:	2000      	movs	r0, #0
 800f122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f1fc <_malloc_r+0xfc>
 800f12a:	f000 f869 	bl	800f200 <__malloc_lock>
 800f12e:	f8d8 3000 	ldr.w	r3, [r8]
 800f132:	461c      	mov	r4, r3
 800f134:	bb44      	cbnz	r4, 800f188 <_malloc_r+0x88>
 800f136:	4629      	mov	r1, r5
 800f138:	4630      	mov	r0, r6
 800f13a:	f7ff ffbf 	bl	800f0bc <sbrk_aligned>
 800f13e:	1c43      	adds	r3, r0, #1
 800f140:	4604      	mov	r4, r0
 800f142:	d158      	bne.n	800f1f6 <_malloc_r+0xf6>
 800f144:	f8d8 4000 	ldr.w	r4, [r8]
 800f148:	4627      	mov	r7, r4
 800f14a:	2f00      	cmp	r7, #0
 800f14c:	d143      	bne.n	800f1d6 <_malloc_r+0xd6>
 800f14e:	2c00      	cmp	r4, #0
 800f150:	d04b      	beq.n	800f1ea <_malloc_r+0xea>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	4639      	mov	r1, r7
 800f156:	4630      	mov	r0, r6
 800f158:	eb04 0903 	add.w	r9, r4, r3
 800f15c:	f000 faa6 	bl	800f6ac <_sbrk_r>
 800f160:	4581      	cmp	r9, r0
 800f162:	d142      	bne.n	800f1ea <_malloc_r+0xea>
 800f164:	6821      	ldr	r1, [r4, #0]
 800f166:	1a6d      	subs	r5, r5, r1
 800f168:	4629      	mov	r1, r5
 800f16a:	4630      	mov	r0, r6
 800f16c:	f7ff ffa6 	bl	800f0bc <sbrk_aligned>
 800f170:	3001      	adds	r0, #1
 800f172:	d03a      	beq.n	800f1ea <_malloc_r+0xea>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	442b      	add	r3, r5
 800f178:	6023      	str	r3, [r4, #0]
 800f17a:	f8d8 3000 	ldr.w	r3, [r8]
 800f17e:	685a      	ldr	r2, [r3, #4]
 800f180:	bb62      	cbnz	r2, 800f1dc <_malloc_r+0xdc>
 800f182:	f8c8 7000 	str.w	r7, [r8]
 800f186:	e00f      	b.n	800f1a8 <_malloc_r+0xa8>
 800f188:	6822      	ldr	r2, [r4, #0]
 800f18a:	1b52      	subs	r2, r2, r5
 800f18c:	d420      	bmi.n	800f1d0 <_malloc_r+0xd0>
 800f18e:	2a0b      	cmp	r2, #11
 800f190:	d917      	bls.n	800f1c2 <_malloc_r+0xc2>
 800f192:	1961      	adds	r1, r4, r5
 800f194:	42a3      	cmp	r3, r4
 800f196:	6025      	str	r5, [r4, #0]
 800f198:	bf18      	it	ne
 800f19a:	6059      	strne	r1, [r3, #4]
 800f19c:	6863      	ldr	r3, [r4, #4]
 800f19e:	bf08      	it	eq
 800f1a0:	f8c8 1000 	streq.w	r1, [r8]
 800f1a4:	5162      	str	r2, [r4, r5]
 800f1a6:	604b      	str	r3, [r1, #4]
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	f000 f82f 	bl	800f20c <__malloc_unlock>
 800f1ae:	f104 000b 	add.w	r0, r4, #11
 800f1b2:	1d23      	adds	r3, r4, #4
 800f1b4:	f020 0007 	bic.w	r0, r0, #7
 800f1b8:	1ac2      	subs	r2, r0, r3
 800f1ba:	bf1c      	itt	ne
 800f1bc:	1a1b      	subne	r3, r3, r0
 800f1be:	50a3      	strne	r3, [r4, r2]
 800f1c0:	e7af      	b.n	800f122 <_malloc_r+0x22>
 800f1c2:	6862      	ldr	r2, [r4, #4]
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	bf0c      	ite	eq
 800f1c8:	f8c8 2000 	streq.w	r2, [r8]
 800f1cc:	605a      	strne	r2, [r3, #4]
 800f1ce:	e7eb      	b.n	800f1a8 <_malloc_r+0xa8>
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	6864      	ldr	r4, [r4, #4]
 800f1d4:	e7ae      	b.n	800f134 <_malloc_r+0x34>
 800f1d6:	463c      	mov	r4, r7
 800f1d8:	687f      	ldr	r7, [r7, #4]
 800f1da:	e7b6      	b.n	800f14a <_malloc_r+0x4a>
 800f1dc:	461a      	mov	r2, r3
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	d1fb      	bne.n	800f1dc <_malloc_r+0xdc>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	6053      	str	r3, [r2, #4]
 800f1e8:	e7de      	b.n	800f1a8 <_malloc_r+0xa8>
 800f1ea:	230c      	movs	r3, #12
 800f1ec:	6033      	str	r3, [r6, #0]
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f000 f80c 	bl	800f20c <__malloc_unlock>
 800f1f4:	e794      	b.n	800f120 <_malloc_r+0x20>
 800f1f6:	6005      	str	r5, [r0, #0]
 800f1f8:	e7d6      	b.n	800f1a8 <_malloc_r+0xa8>
 800f1fa:	bf00      	nop
 800f1fc:	20002e54 	.word	0x20002e54

0800f200 <__malloc_lock>:
 800f200:	4801      	ldr	r0, [pc, #4]	@ (800f208 <__malloc_lock+0x8>)
 800f202:	f7ff beda 	b.w	800efba <__retarget_lock_acquire_recursive>
 800f206:	bf00      	nop
 800f208:	20002e4c 	.word	0x20002e4c

0800f20c <__malloc_unlock>:
 800f20c:	4801      	ldr	r0, [pc, #4]	@ (800f214 <__malloc_unlock+0x8>)
 800f20e:	f7ff bed5 	b.w	800efbc <__retarget_lock_release_recursive>
 800f212:	bf00      	nop
 800f214:	20002e4c 	.word	0x20002e4c

0800f218 <_printf_common>:
 800f218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f21c:	4616      	mov	r6, r2
 800f21e:	4698      	mov	r8, r3
 800f220:	688a      	ldr	r2, [r1, #8]
 800f222:	690b      	ldr	r3, [r1, #16]
 800f224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f228:	4293      	cmp	r3, r2
 800f22a:	bfb8      	it	lt
 800f22c:	4613      	movlt	r3, r2
 800f22e:	6033      	str	r3, [r6, #0]
 800f230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f234:	4607      	mov	r7, r0
 800f236:	460c      	mov	r4, r1
 800f238:	b10a      	cbz	r2, 800f23e <_printf_common+0x26>
 800f23a:	3301      	adds	r3, #1
 800f23c:	6033      	str	r3, [r6, #0]
 800f23e:	6823      	ldr	r3, [r4, #0]
 800f240:	0699      	lsls	r1, r3, #26
 800f242:	bf42      	ittt	mi
 800f244:	6833      	ldrmi	r3, [r6, #0]
 800f246:	3302      	addmi	r3, #2
 800f248:	6033      	strmi	r3, [r6, #0]
 800f24a:	6825      	ldr	r5, [r4, #0]
 800f24c:	f015 0506 	ands.w	r5, r5, #6
 800f250:	d106      	bne.n	800f260 <_printf_common+0x48>
 800f252:	f104 0a19 	add.w	sl, r4, #25
 800f256:	68e3      	ldr	r3, [r4, #12]
 800f258:	6832      	ldr	r2, [r6, #0]
 800f25a:	1a9b      	subs	r3, r3, r2
 800f25c:	42ab      	cmp	r3, r5
 800f25e:	dc26      	bgt.n	800f2ae <_printf_common+0x96>
 800f260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f264:	6822      	ldr	r2, [r4, #0]
 800f266:	3b00      	subs	r3, #0
 800f268:	bf18      	it	ne
 800f26a:	2301      	movne	r3, #1
 800f26c:	0692      	lsls	r2, r2, #26
 800f26e:	d42b      	bmi.n	800f2c8 <_printf_common+0xb0>
 800f270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f274:	4641      	mov	r1, r8
 800f276:	4638      	mov	r0, r7
 800f278:	47c8      	blx	r9
 800f27a:	3001      	adds	r0, #1
 800f27c:	d01e      	beq.n	800f2bc <_printf_common+0xa4>
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	6922      	ldr	r2, [r4, #16]
 800f282:	f003 0306 	and.w	r3, r3, #6
 800f286:	2b04      	cmp	r3, #4
 800f288:	bf02      	ittt	eq
 800f28a:	68e5      	ldreq	r5, [r4, #12]
 800f28c:	6833      	ldreq	r3, [r6, #0]
 800f28e:	1aed      	subeq	r5, r5, r3
 800f290:	68a3      	ldr	r3, [r4, #8]
 800f292:	bf0c      	ite	eq
 800f294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f298:	2500      	movne	r5, #0
 800f29a:	4293      	cmp	r3, r2
 800f29c:	bfc4      	itt	gt
 800f29e:	1a9b      	subgt	r3, r3, r2
 800f2a0:	18ed      	addgt	r5, r5, r3
 800f2a2:	2600      	movs	r6, #0
 800f2a4:	341a      	adds	r4, #26
 800f2a6:	42b5      	cmp	r5, r6
 800f2a8:	d11a      	bne.n	800f2e0 <_printf_common+0xc8>
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	e008      	b.n	800f2c0 <_printf_common+0xa8>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	4652      	mov	r2, sl
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	4638      	mov	r0, r7
 800f2b6:	47c8      	blx	r9
 800f2b8:	3001      	adds	r0, #1
 800f2ba:	d103      	bne.n	800f2c4 <_printf_common+0xac>
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c4:	3501      	adds	r5, #1
 800f2c6:	e7c6      	b.n	800f256 <_printf_common+0x3e>
 800f2c8:	18e1      	adds	r1, r4, r3
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	2030      	movs	r0, #48	@ 0x30
 800f2ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f2d2:	4422      	add	r2, r4
 800f2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f2d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f2dc:	3302      	adds	r3, #2
 800f2de:	e7c7      	b.n	800f270 <_printf_common+0x58>
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	4641      	mov	r1, r8
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	47c8      	blx	r9
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	d0e6      	beq.n	800f2bc <_printf_common+0xa4>
 800f2ee:	3601      	adds	r6, #1
 800f2f0:	e7d9      	b.n	800f2a6 <_printf_common+0x8e>
	...

0800f2f4 <_printf_i>:
 800f2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2f8:	7e0f      	ldrb	r7, [r1, #24]
 800f2fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2fc:	2f78      	cmp	r7, #120	@ 0x78
 800f2fe:	4691      	mov	r9, r2
 800f300:	4680      	mov	r8, r0
 800f302:	460c      	mov	r4, r1
 800f304:	469a      	mov	sl, r3
 800f306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f30a:	d807      	bhi.n	800f31c <_printf_i+0x28>
 800f30c:	2f62      	cmp	r7, #98	@ 0x62
 800f30e:	d80a      	bhi.n	800f326 <_printf_i+0x32>
 800f310:	2f00      	cmp	r7, #0
 800f312:	f000 80d1 	beq.w	800f4b8 <_printf_i+0x1c4>
 800f316:	2f58      	cmp	r7, #88	@ 0x58
 800f318:	f000 80b8 	beq.w	800f48c <_printf_i+0x198>
 800f31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f324:	e03a      	b.n	800f39c <_printf_i+0xa8>
 800f326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f32a:	2b15      	cmp	r3, #21
 800f32c:	d8f6      	bhi.n	800f31c <_printf_i+0x28>
 800f32e:	a101      	add	r1, pc, #4	@ (adr r1, 800f334 <_printf_i+0x40>)
 800f330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f334:	0800f38d 	.word	0x0800f38d
 800f338:	0800f3a1 	.word	0x0800f3a1
 800f33c:	0800f31d 	.word	0x0800f31d
 800f340:	0800f31d 	.word	0x0800f31d
 800f344:	0800f31d 	.word	0x0800f31d
 800f348:	0800f31d 	.word	0x0800f31d
 800f34c:	0800f3a1 	.word	0x0800f3a1
 800f350:	0800f31d 	.word	0x0800f31d
 800f354:	0800f31d 	.word	0x0800f31d
 800f358:	0800f31d 	.word	0x0800f31d
 800f35c:	0800f31d 	.word	0x0800f31d
 800f360:	0800f49f 	.word	0x0800f49f
 800f364:	0800f3cb 	.word	0x0800f3cb
 800f368:	0800f459 	.word	0x0800f459
 800f36c:	0800f31d 	.word	0x0800f31d
 800f370:	0800f31d 	.word	0x0800f31d
 800f374:	0800f4c1 	.word	0x0800f4c1
 800f378:	0800f31d 	.word	0x0800f31d
 800f37c:	0800f3cb 	.word	0x0800f3cb
 800f380:	0800f31d 	.word	0x0800f31d
 800f384:	0800f31d 	.word	0x0800f31d
 800f388:	0800f461 	.word	0x0800f461
 800f38c:	6833      	ldr	r3, [r6, #0]
 800f38e:	1d1a      	adds	r2, r3, #4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	6032      	str	r2, [r6, #0]
 800f394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f39c:	2301      	movs	r3, #1
 800f39e:	e09c      	b.n	800f4da <_printf_i+0x1e6>
 800f3a0:	6833      	ldr	r3, [r6, #0]
 800f3a2:	6820      	ldr	r0, [r4, #0]
 800f3a4:	1d19      	adds	r1, r3, #4
 800f3a6:	6031      	str	r1, [r6, #0]
 800f3a8:	0606      	lsls	r6, r0, #24
 800f3aa:	d501      	bpl.n	800f3b0 <_printf_i+0xbc>
 800f3ac:	681d      	ldr	r5, [r3, #0]
 800f3ae:	e003      	b.n	800f3b8 <_printf_i+0xc4>
 800f3b0:	0645      	lsls	r5, r0, #25
 800f3b2:	d5fb      	bpl.n	800f3ac <_printf_i+0xb8>
 800f3b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f3b8:	2d00      	cmp	r5, #0
 800f3ba:	da03      	bge.n	800f3c4 <_printf_i+0xd0>
 800f3bc:	232d      	movs	r3, #45	@ 0x2d
 800f3be:	426d      	negs	r5, r5
 800f3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3c4:	4858      	ldr	r0, [pc, #352]	@ (800f528 <_printf_i+0x234>)
 800f3c6:	230a      	movs	r3, #10
 800f3c8:	e011      	b.n	800f3ee <_printf_i+0xfa>
 800f3ca:	6821      	ldr	r1, [r4, #0]
 800f3cc:	6833      	ldr	r3, [r6, #0]
 800f3ce:	0608      	lsls	r0, r1, #24
 800f3d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f3d4:	d402      	bmi.n	800f3dc <_printf_i+0xe8>
 800f3d6:	0649      	lsls	r1, r1, #25
 800f3d8:	bf48      	it	mi
 800f3da:	b2ad      	uxthmi	r5, r5
 800f3dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f3de:	4852      	ldr	r0, [pc, #328]	@ (800f528 <_printf_i+0x234>)
 800f3e0:	6033      	str	r3, [r6, #0]
 800f3e2:	bf14      	ite	ne
 800f3e4:	230a      	movne	r3, #10
 800f3e6:	2308      	moveq	r3, #8
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f3ee:	6866      	ldr	r6, [r4, #4]
 800f3f0:	60a6      	str	r6, [r4, #8]
 800f3f2:	2e00      	cmp	r6, #0
 800f3f4:	db05      	blt.n	800f402 <_printf_i+0x10e>
 800f3f6:	6821      	ldr	r1, [r4, #0]
 800f3f8:	432e      	orrs	r6, r5
 800f3fa:	f021 0104 	bic.w	r1, r1, #4
 800f3fe:	6021      	str	r1, [r4, #0]
 800f400:	d04b      	beq.n	800f49a <_printf_i+0x1a6>
 800f402:	4616      	mov	r6, r2
 800f404:	fbb5 f1f3 	udiv	r1, r5, r3
 800f408:	fb03 5711 	mls	r7, r3, r1, r5
 800f40c:	5dc7      	ldrb	r7, [r0, r7]
 800f40e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f412:	462f      	mov	r7, r5
 800f414:	42bb      	cmp	r3, r7
 800f416:	460d      	mov	r5, r1
 800f418:	d9f4      	bls.n	800f404 <_printf_i+0x110>
 800f41a:	2b08      	cmp	r3, #8
 800f41c:	d10b      	bne.n	800f436 <_printf_i+0x142>
 800f41e:	6823      	ldr	r3, [r4, #0]
 800f420:	07df      	lsls	r7, r3, #31
 800f422:	d508      	bpl.n	800f436 <_printf_i+0x142>
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	6861      	ldr	r1, [r4, #4]
 800f428:	4299      	cmp	r1, r3
 800f42a:	bfde      	ittt	le
 800f42c:	2330      	movle	r3, #48	@ 0x30
 800f42e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f432:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f436:	1b92      	subs	r2, r2, r6
 800f438:	6122      	str	r2, [r4, #16]
 800f43a:	f8cd a000 	str.w	sl, [sp]
 800f43e:	464b      	mov	r3, r9
 800f440:	aa03      	add	r2, sp, #12
 800f442:	4621      	mov	r1, r4
 800f444:	4640      	mov	r0, r8
 800f446:	f7ff fee7 	bl	800f218 <_printf_common>
 800f44a:	3001      	adds	r0, #1
 800f44c:	d14a      	bne.n	800f4e4 <_printf_i+0x1f0>
 800f44e:	f04f 30ff 	mov.w	r0, #4294967295
 800f452:	b004      	add	sp, #16
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	f043 0320 	orr.w	r3, r3, #32
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	4832      	ldr	r0, [pc, #200]	@ (800f52c <_printf_i+0x238>)
 800f462:	2778      	movs	r7, #120	@ 0x78
 800f464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	6831      	ldr	r1, [r6, #0]
 800f46c:	061f      	lsls	r7, r3, #24
 800f46e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f472:	d402      	bmi.n	800f47a <_printf_i+0x186>
 800f474:	065f      	lsls	r7, r3, #25
 800f476:	bf48      	it	mi
 800f478:	b2ad      	uxthmi	r5, r5
 800f47a:	6031      	str	r1, [r6, #0]
 800f47c:	07d9      	lsls	r1, r3, #31
 800f47e:	bf44      	itt	mi
 800f480:	f043 0320 	orrmi.w	r3, r3, #32
 800f484:	6023      	strmi	r3, [r4, #0]
 800f486:	b11d      	cbz	r5, 800f490 <_printf_i+0x19c>
 800f488:	2310      	movs	r3, #16
 800f48a:	e7ad      	b.n	800f3e8 <_printf_i+0xf4>
 800f48c:	4826      	ldr	r0, [pc, #152]	@ (800f528 <_printf_i+0x234>)
 800f48e:	e7e9      	b.n	800f464 <_printf_i+0x170>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	f023 0320 	bic.w	r3, r3, #32
 800f496:	6023      	str	r3, [r4, #0]
 800f498:	e7f6      	b.n	800f488 <_printf_i+0x194>
 800f49a:	4616      	mov	r6, r2
 800f49c:	e7bd      	b.n	800f41a <_printf_i+0x126>
 800f49e:	6833      	ldr	r3, [r6, #0]
 800f4a0:	6825      	ldr	r5, [r4, #0]
 800f4a2:	6961      	ldr	r1, [r4, #20]
 800f4a4:	1d18      	adds	r0, r3, #4
 800f4a6:	6030      	str	r0, [r6, #0]
 800f4a8:	062e      	lsls	r6, r5, #24
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	d501      	bpl.n	800f4b2 <_printf_i+0x1be>
 800f4ae:	6019      	str	r1, [r3, #0]
 800f4b0:	e002      	b.n	800f4b8 <_printf_i+0x1c4>
 800f4b2:	0668      	lsls	r0, r5, #25
 800f4b4:	d5fb      	bpl.n	800f4ae <_printf_i+0x1ba>
 800f4b6:	8019      	strh	r1, [r3, #0]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	6123      	str	r3, [r4, #16]
 800f4bc:	4616      	mov	r6, r2
 800f4be:	e7bc      	b.n	800f43a <_printf_i+0x146>
 800f4c0:	6833      	ldr	r3, [r6, #0]
 800f4c2:	1d1a      	adds	r2, r3, #4
 800f4c4:	6032      	str	r2, [r6, #0]
 800f4c6:	681e      	ldr	r6, [r3, #0]
 800f4c8:	6862      	ldr	r2, [r4, #4]
 800f4ca:	2100      	movs	r1, #0
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f7f0 fea7 	bl	8000220 <memchr>
 800f4d2:	b108      	cbz	r0, 800f4d8 <_printf_i+0x1e4>
 800f4d4:	1b80      	subs	r0, r0, r6
 800f4d6:	6060      	str	r0, [r4, #4]
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	6123      	str	r3, [r4, #16]
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4e2:	e7aa      	b.n	800f43a <_printf_i+0x146>
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	4632      	mov	r2, r6
 800f4e8:	4649      	mov	r1, r9
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	47d0      	blx	sl
 800f4ee:	3001      	adds	r0, #1
 800f4f0:	d0ad      	beq.n	800f44e <_printf_i+0x15a>
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	079b      	lsls	r3, r3, #30
 800f4f6:	d413      	bmi.n	800f520 <_printf_i+0x22c>
 800f4f8:	68e0      	ldr	r0, [r4, #12]
 800f4fa:	9b03      	ldr	r3, [sp, #12]
 800f4fc:	4298      	cmp	r0, r3
 800f4fe:	bfb8      	it	lt
 800f500:	4618      	movlt	r0, r3
 800f502:	e7a6      	b.n	800f452 <_printf_i+0x15e>
 800f504:	2301      	movs	r3, #1
 800f506:	4632      	mov	r2, r6
 800f508:	4649      	mov	r1, r9
 800f50a:	4640      	mov	r0, r8
 800f50c:	47d0      	blx	sl
 800f50e:	3001      	adds	r0, #1
 800f510:	d09d      	beq.n	800f44e <_printf_i+0x15a>
 800f512:	3501      	adds	r5, #1
 800f514:	68e3      	ldr	r3, [r4, #12]
 800f516:	9903      	ldr	r1, [sp, #12]
 800f518:	1a5b      	subs	r3, r3, r1
 800f51a:	42ab      	cmp	r3, r5
 800f51c:	dcf2      	bgt.n	800f504 <_printf_i+0x210>
 800f51e:	e7eb      	b.n	800f4f8 <_printf_i+0x204>
 800f520:	2500      	movs	r5, #0
 800f522:	f104 0619 	add.w	r6, r4, #25
 800f526:	e7f5      	b.n	800f514 <_printf_i+0x220>
 800f528:	08010f3f 	.word	0x08010f3f
 800f52c:	08010f50 	.word	0x08010f50

0800f530 <__sflush_r>:
 800f530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f538:	0716      	lsls	r6, r2, #28
 800f53a:	4605      	mov	r5, r0
 800f53c:	460c      	mov	r4, r1
 800f53e:	d454      	bmi.n	800f5ea <__sflush_r+0xba>
 800f540:	684b      	ldr	r3, [r1, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	dc02      	bgt.n	800f54c <__sflush_r+0x1c>
 800f546:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f548:	2b00      	cmp	r3, #0
 800f54a:	dd48      	ble.n	800f5de <__sflush_r+0xae>
 800f54c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f54e:	2e00      	cmp	r6, #0
 800f550:	d045      	beq.n	800f5de <__sflush_r+0xae>
 800f552:	2300      	movs	r3, #0
 800f554:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f558:	682f      	ldr	r7, [r5, #0]
 800f55a:	6a21      	ldr	r1, [r4, #32]
 800f55c:	602b      	str	r3, [r5, #0]
 800f55e:	d030      	beq.n	800f5c2 <__sflush_r+0x92>
 800f560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	0759      	lsls	r1, r3, #29
 800f566:	d505      	bpl.n	800f574 <__sflush_r+0x44>
 800f568:	6863      	ldr	r3, [r4, #4]
 800f56a:	1ad2      	subs	r2, r2, r3
 800f56c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f56e:	b10b      	cbz	r3, 800f574 <__sflush_r+0x44>
 800f570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f572:	1ad2      	subs	r2, r2, r3
 800f574:	2300      	movs	r3, #0
 800f576:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f578:	6a21      	ldr	r1, [r4, #32]
 800f57a:	4628      	mov	r0, r5
 800f57c:	47b0      	blx	r6
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	d106      	bne.n	800f592 <__sflush_r+0x62>
 800f584:	6829      	ldr	r1, [r5, #0]
 800f586:	291d      	cmp	r1, #29
 800f588:	d82b      	bhi.n	800f5e2 <__sflush_r+0xb2>
 800f58a:	4a2a      	ldr	r2, [pc, #168]	@ (800f634 <__sflush_r+0x104>)
 800f58c:	40ca      	lsrs	r2, r1
 800f58e:	07d6      	lsls	r6, r2, #31
 800f590:	d527      	bpl.n	800f5e2 <__sflush_r+0xb2>
 800f592:	2200      	movs	r2, #0
 800f594:	6062      	str	r2, [r4, #4]
 800f596:	04d9      	lsls	r1, r3, #19
 800f598:	6922      	ldr	r2, [r4, #16]
 800f59a:	6022      	str	r2, [r4, #0]
 800f59c:	d504      	bpl.n	800f5a8 <__sflush_r+0x78>
 800f59e:	1c42      	adds	r2, r0, #1
 800f5a0:	d101      	bne.n	800f5a6 <__sflush_r+0x76>
 800f5a2:	682b      	ldr	r3, [r5, #0]
 800f5a4:	b903      	cbnz	r3, 800f5a8 <__sflush_r+0x78>
 800f5a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5aa:	602f      	str	r7, [r5, #0]
 800f5ac:	b1b9      	cbz	r1, 800f5de <__sflush_r+0xae>
 800f5ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5b2:	4299      	cmp	r1, r3
 800f5b4:	d002      	beq.n	800f5bc <__sflush_r+0x8c>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f7ff fd2e 	bl	800f018 <_free_r>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5c0:	e00d      	b.n	800f5de <__sflush_r+0xae>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	47b0      	blx	r6
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	1c50      	adds	r0, r2, #1
 800f5cc:	d1c9      	bne.n	800f562 <__sflush_r+0x32>
 800f5ce:	682b      	ldr	r3, [r5, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d0c6      	beq.n	800f562 <__sflush_r+0x32>
 800f5d4:	2b1d      	cmp	r3, #29
 800f5d6:	d001      	beq.n	800f5dc <__sflush_r+0xac>
 800f5d8:	2b16      	cmp	r3, #22
 800f5da:	d11e      	bne.n	800f61a <__sflush_r+0xea>
 800f5dc:	602f      	str	r7, [r5, #0]
 800f5de:	2000      	movs	r0, #0
 800f5e0:	e022      	b.n	800f628 <__sflush_r+0xf8>
 800f5e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5e6:	b21b      	sxth	r3, r3
 800f5e8:	e01b      	b.n	800f622 <__sflush_r+0xf2>
 800f5ea:	690f      	ldr	r7, [r1, #16]
 800f5ec:	2f00      	cmp	r7, #0
 800f5ee:	d0f6      	beq.n	800f5de <__sflush_r+0xae>
 800f5f0:	0793      	lsls	r3, r2, #30
 800f5f2:	680e      	ldr	r6, [r1, #0]
 800f5f4:	bf08      	it	eq
 800f5f6:	694b      	ldreq	r3, [r1, #20]
 800f5f8:	600f      	str	r7, [r1, #0]
 800f5fa:	bf18      	it	ne
 800f5fc:	2300      	movne	r3, #0
 800f5fe:	eba6 0807 	sub.w	r8, r6, r7
 800f602:	608b      	str	r3, [r1, #8]
 800f604:	f1b8 0f00 	cmp.w	r8, #0
 800f608:	dde9      	ble.n	800f5de <__sflush_r+0xae>
 800f60a:	6a21      	ldr	r1, [r4, #32]
 800f60c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f60e:	4643      	mov	r3, r8
 800f610:	463a      	mov	r2, r7
 800f612:	4628      	mov	r0, r5
 800f614:	47b0      	blx	r6
 800f616:	2800      	cmp	r0, #0
 800f618:	dc08      	bgt.n	800f62c <__sflush_r+0xfc>
 800f61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f61e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f622:	81a3      	strh	r3, [r4, #12]
 800f624:	f04f 30ff 	mov.w	r0, #4294967295
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	4407      	add	r7, r0
 800f62e:	eba8 0800 	sub.w	r8, r8, r0
 800f632:	e7e7      	b.n	800f604 <__sflush_r+0xd4>
 800f634:	20400001 	.word	0x20400001

0800f638 <_fflush_r>:
 800f638:	b538      	push	{r3, r4, r5, lr}
 800f63a:	690b      	ldr	r3, [r1, #16]
 800f63c:	4605      	mov	r5, r0
 800f63e:	460c      	mov	r4, r1
 800f640:	b913      	cbnz	r3, 800f648 <_fflush_r+0x10>
 800f642:	2500      	movs	r5, #0
 800f644:	4628      	mov	r0, r5
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	b118      	cbz	r0, 800f652 <_fflush_r+0x1a>
 800f64a:	6a03      	ldr	r3, [r0, #32]
 800f64c:	b90b      	cbnz	r3, 800f652 <_fflush_r+0x1a>
 800f64e:	f7ff fbc1 	bl	800edd4 <__sinit>
 800f652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d0f3      	beq.n	800f642 <_fflush_r+0xa>
 800f65a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f65c:	07d0      	lsls	r0, r2, #31
 800f65e:	d404      	bmi.n	800f66a <_fflush_r+0x32>
 800f660:	0599      	lsls	r1, r3, #22
 800f662:	d402      	bmi.n	800f66a <_fflush_r+0x32>
 800f664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f666:	f7ff fca8 	bl	800efba <__retarget_lock_acquire_recursive>
 800f66a:	4628      	mov	r0, r5
 800f66c:	4621      	mov	r1, r4
 800f66e:	f7ff ff5f 	bl	800f530 <__sflush_r>
 800f672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f674:	07da      	lsls	r2, r3, #31
 800f676:	4605      	mov	r5, r0
 800f678:	d4e4      	bmi.n	800f644 <_fflush_r+0xc>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	059b      	lsls	r3, r3, #22
 800f67e:	d4e1      	bmi.n	800f644 <_fflush_r+0xc>
 800f680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f682:	f7ff fc9b 	bl	800efbc <__retarget_lock_release_recursive>
 800f686:	e7dd      	b.n	800f644 <_fflush_r+0xc>

0800f688 <fiprintf>:
 800f688:	b40e      	push	{r1, r2, r3}
 800f68a:	b503      	push	{r0, r1, lr}
 800f68c:	4601      	mov	r1, r0
 800f68e:	ab03      	add	r3, sp, #12
 800f690:	4805      	ldr	r0, [pc, #20]	@ (800f6a8 <fiprintf+0x20>)
 800f692:	f853 2b04 	ldr.w	r2, [r3], #4
 800f696:	6800      	ldr	r0, [r0, #0]
 800f698:	9301      	str	r3, [sp, #4]
 800f69a:	f000 f847 	bl	800f72c <_vfiprintf_r>
 800f69e:	b002      	add	sp, #8
 800f6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6a4:	b003      	add	sp, #12
 800f6a6:	4770      	bx	lr
 800f6a8:	20000174 	.word	0x20000174

0800f6ac <_sbrk_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d06      	ldr	r5, [pc, #24]	@ (800f6c8 <_sbrk_r+0x1c>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	f7f3 fb98 	bl	8002dec <_sbrk>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_sbrk_r+0x1a>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_sbrk_r+0x1a>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	20002e48 	.word	0x20002e48

0800f6cc <abort>:
 800f6cc:	b508      	push	{r3, lr}
 800f6ce:	2006      	movs	r0, #6
 800f6d0:	f000 fa00 	bl	800fad4 <raise>
 800f6d4:	2001      	movs	r0, #1
 800f6d6:	f7f3 fb11 	bl	8002cfc <_exit>

0800f6da <__sfputc_r>:
 800f6da:	6893      	ldr	r3, [r2, #8]
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	b410      	push	{r4}
 800f6e2:	6093      	str	r3, [r2, #8]
 800f6e4:	da08      	bge.n	800f6f8 <__sfputc_r+0x1e>
 800f6e6:	6994      	ldr	r4, [r2, #24]
 800f6e8:	42a3      	cmp	r3, r4
 800f6ea:	db01      	blt.n	800f6f0 <__sfputc_r+0x16>
 800f6ec:	290a      	cmp	r1, #10
 800f6ee:	d103      	bne.n	800f6f8 <__sfputc_r+0x1e>
 800f6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6f4:	f000 b932 	b.w	800f95c <__swbuf_r>
 800f6f8:	6813      	ldr	r3, [r2, #0]
 800f6fa:	1c58      	adds	r0, r3, #1
 800f6fc:	6010      	str	r0, [r2, #0]
 800f6fe:	7019      	strb	r1, [r3, #0]
 800f700:	4608      	mov	r0, r1
 800f702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <__sfputs_r>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	4606      	mov	r6, r0
 800f70c:	460f      	mov	r7, r1
 800f70e:	4614      	mov	r4, r2
 800f710:	18d5      	adds	r5, r2, r3
 800f712:	42ac      	cmp	r4, r5
 800f714:	d101      	bne.n	800f71a <__sfputs_r+0x12>
 800f716:	2000      	movs	r0, #0
 800f718:	e007      	b.n	800f72a <__sfputs_r+0x22>
 800f71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f71e:	463a      	mov	r2, r7
 800f720:	4630      	mov	r0, r6
 800f722:	f7ff ffda 	bl	800f6da <__sfputc_r>
 800f726:	1c43      	adds	r3, r0, #1
 800f728:	d1f3      	bne.n	800f712 <__sfputs_r+0xa>
 800f72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f72c <_vfiprintf_r>:
 800f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f730:	460d      	mov	r5, r1
 800f732:	b09d      	sub	sp, #116	@ 0x74
 800f734:	4614      	mov	r4, r2
 800f736:	4698      	mov	r8, r3
 800f738:	4606      	mov	r6, r0
 800f73a:	b118      	cbz	r0, 800f744 <_vfiprintf_r+0x18>
 800f73c:	6a03      	ldr	r3, [r0, #32]
 800f73e:	b90b      	cbnz	r3, 800f744 <_vfiprintf_r+0x18>
 800f740:	f7ff fb48 	bl	800edd4 <__sinit>
 800f744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f746:	07d9      	lsls	r1, r3, #31
 800f748:	d405      	bmi.n	800f756 <_vfiprintf_r+0x2a>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	059a      	lsls	r2, r3, #22
 800f74e:	d402      	bmi.n	800f756 <_vfiprintf_r+0x2a>
 800f750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f752:	f7ff fc32 	bl	800efba <__retarget_lock_acquire_recursive>
 800f756:	89ab      	ldrh	r3, [r5, #12]
 800f758:	071b      	lsls	r3, r3, #28
 800f75a:	d501      	bpl.n	800f760 <_vfiprintf_r+0x34>
 800f75c:	692b      	ldr	r3, [r5, #16]
 800f75e:	b99b      	cbnz	r3, 800f788 <_vfiprintf_r+0x5c>
 800f760:	4629      	mov	r1, r5
 800f762:	4630      	mov	r0, r6
 800f764:	f000 f938 	bl	800f9d8 <__swsetup_r>
 800f768:	b170      	cbz	r0, 800f788 <_vfiprintf_r+0x5c>
 800f76a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f76c:	07dc      	lsls	r4, r3, #31
 800f76e:	d504      	bpl.n	800f77a <_vfiprintf_r+0x4e>
 800f770:	f04f 30ff 	mov.w	r0, #4294967295
 800f774:	b01d      	add	sp, #116	@ 0x74
 800f776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f77a:	89ab      	ldrh	r3, [r5, #12]
 800f77c:	0598      	lsls	r0, r3, #22
 800f77e:	d4f7      	bmi.n	800f770 <_vfiprintf_r+0x44>
 800f780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f782:	f7ff fc1b 	bl	800efbc <__retarget_lock_release_recursive>
 800f786:	e7f3      	b.n	800f770 <_vfiprintf_r+0x44>
 800f788:	2300      	movs	r3, #0
 800f78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f78c:	2320      	movs	r3, #32
 800f78e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f792:	f8cd 800c 	str.w	r8, [sp, #12]
 800f796:	2330      	movs	r3, #48	@ 0x30
 800f798:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f948 <_vfiprintf_r+0x21c>
 800f79c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7a0:	f04f 0901 	mov.w	r9, #1
 800f7a4:	4623      	mov	r3, r4
 800f7a6:	469a      	mov	sl, r3
 800f7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ac:	b10a      	cbz	r2, 800f7b2 <_vfiprintf_r+0x86>
 800f7ae:	2a25      	cmp	r2, #37	@ 0x25
 800f7b0:	d1f9      	bne.n	800f7a6 <_vfiprintf_r+0x7a>
 800f7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f7b6:	d00b      	beq.n	800f7d0 <_vfiprintf_r+0xa4>
 800f7b8:	465b      	mov	r3, fp
 800f7ba:	4622      	mov	r2, r4
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f7ff ffa2 	bl	800f708 <__sfputs_r>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	f000 80a7 	beq.w	800f918 <_vfiprintf_r+0x1ec>
 800f7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7cc:	445a      	add	r2, fp
 800f7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 809f 	beq.w	800f918 <_vfiprintf_r+0x1ec>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7e4:	f10a 0a01 	add.w	sl, sl, #1
 800f7e8:	9304      	str	r3, [sp, #16]
 800f7ea:	9307      	str	r3, [sp, #28]
 800f7ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f7f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f7f2:	4654      	mov	r4, sl
 800f7f4:	2205      	movs	r2, #5
 800f7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7fa:	4853      	ldr	r0, [pc, #332]	@ (800f948 <_vfiprintf_r+0x21c>)
 800f7fc:	f7f0 fd10 	bl	8000220 <memchr>
 800f800:	9a04      	ldr	r2, [sp, #16]
 800f802:	b9d8      	cbnz	r0, 800f83c <_vfiprintf_r+0x110>
 800f804:	06d1      	lsls	r1, r2, #27
 800f806:	bf44      	itt	mi
 800f808:	2320      	movmi	r3, #32
 800f80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f80e:	0713      	lsls	r3, r2, #28
 800f810:	bf44      	itt	mi
 800f812:	232b      	movmi	r3, #43	@ 0x2b
 800f814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f818:	f89a 3000 	ldrb.w	r3, [sl]
 800f81c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f81e:	d015      	beq.n	800f84c <_vfiprintf_r+0x120>
 800f820:	9a07      	ldr	r2, [sp, #28]
 800f822:	4654      	mov	r4, sl
 800f824:	2000      	movs	r0, #0
 800f826:	f04f 0c0a 	mov.w	ip, #10
 800f82a:	4621      	mov	r1, r4
 800f82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f830:	3b30      	subs	r3, #48	@ 0x30
 800f832:	2b09      	cmp	r3, #9
 800f834:	d94b      	bls.n	800f8ce <_vfiprintf_r+0x1a2>
 800f836:	b1b0      	cbz	r0, 800f866 <_vfiprintf_r+0x13a>
 800f838:	9207      	str	r2, [sp, #28]
 800f83a:	e014      	b.n	800f866 <_vfiprintf_r+0x13a>
 800f83c:	eba0 0308 	sub.w	r3, r0, r8
 800f840:	fa09 f303 	lsl.w	r3, r9, r3
 800f844:	4313      	orrs	r3, r2
 800f846:	9304      	str	r3, [sp, #16]
 800f848:	46a2      	mov	sl, r4
 800f84a:	e7d2      	b.n	800f7f2 <_vfiprintf_r+0xc6>
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	1d19      	adds	r1, r3, #4
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	9103      	str	r1, [sp, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	bfbb      	ittet	lt
 800f858:	425b      	neglt	r3, r3
 800f85a:	f042 0202 	orrlt.w	r2, r2, #2
 800f85e:	9307      	strge	r3, [sp, #28]
 800f860:	9307      	strlt	r3, [sp, #28]
 800f862:	bfb8      	it	lt
 800f864:	9204      	strlt	r2, [sp, #16]
 800f866:	7823      	ldrb	r3, [r4, #0]
 800f868:	2b2e      	cmp	r3, #46	@ 0x2e
 800f86a:	d10a      	bne.n	800f882 <_vfiprintf_r+0x156>
 800f86c:	7863      	ldrb	r3, [r4, #1]
 800f86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f870:	d132      	bne.n	800f8d8 <_vfiprintf_r+0x1ac>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	1d1a      	adds	r2, r3, #4
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	9203      	str	r2, [sp, #12]
 800f87a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f87e:	3402      	adds	r4, #2
 800f880:	9305      	str	r3, [sp, #20]
 800f882:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f958 <_vfiprintf_r+0x22c>
 800f886:	7821      	ldrb	r1, [r4, #0]
 800f888:	2203      	movs	r2, #3
 800f88a:	4650      	mov	r0, sl
 800f88c:	f7f0 fcc8 	bl	8000220 <memchr>
 800f890:	b138      	cbz	r0, 800f8a2 <_vfiprintf_r+0x176>
 800f892:	9b04      	ldr	r3, [sp, #16]
 800f894:	eba0 000a 	sub.w	r0, r0, sl
 800f898:	2240      	movs	r2, #64	@ 0x40
 800f89a:	4082      	lsls	r2, r0
 800f89c:	4313      	orrs	r3, r2
 800f89e:	3401      	adds	r4, #1
 800f8a0:	9304      	str	r3, [sp, #16]
 800f8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a6:	4829      	ldr	r0, [pc, #164]	@ (800f94c <_vfiprintf_r+0x220>)
 800f8a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8ac:	2206      	movs	r2, #6
 800f8ae:	f7f0 fcb7 	bl	8000220 <memchr>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d03f      	beq.n	800f936 <_vfiprintf_r+0x20a>
 800f8b6:	4b26      	ldr	r3, [pc, #152]	@ (800f950 <_vfiprintf_r+0x224>)
 800f8b8:	bb1b      	cbnz	r3, 800f902 <_vfiprintf_r+0x1d6>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	3307      	adds	r3, #7
 800f8be:	f023 0307 	bic.w	r3, r3, #7
 800f8c2:	3308      	adds	r3, #8
 800f8c4:	9303      	str	r3, [sp, #12]
 800f8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8c8:	443b      	add	r3, r7
 800f8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8cc:	e76a      	b.n	800f7a4 <_vfiprintf_r+0x78>
 800f8ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	2001      	movs	r0, #1
 800f8d6:	e7a8      	b.n	800f82a <_vfiprintf_r+0xfe>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	3401      	adds	r4, #1
 800f8dc:	9305      	str	r3, [sp, #20]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	f04f 0c0a 	mov.w	ip, #10
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ea:	3a30      	subs	r2, #48	@ 0x30
 800f8ec:	2a09      	cmp	r2, #9
 800f8ee:	d903      	bls.n	800f8f8 <_vfiprintf_r+0x1cc>
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d0c6      	beq.n	800f882 <_vfiprintf_r+0x156>
 800f8f4:	9105      	str	r1, [sp, #20]
 800f8f6:	e7c4      	b.n	800f882 <_vfiprintf_r+0x156>
 800f8f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	2301      	movs	r3, #1
 800f900:	e7f0      	b.n	800f8e4 <_vfiprintf_r+0x1b8>
 800f902:	ab03      	add	r3, sp, #12
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	462a      	mov	r2, r5
 800f908:	4b12      	ldr	r3, [pc, #72]	@ (800f954 <_vfiprintf_r+0x228>)
 800f90a:	a904      	add	r1, sp, #16
 800f90c:	4630      	mov	r0, r6
 800f90e:	f3af 8000 	nop.w
 800f912:	4607      	mov	r7, r0
 800f914:	1c78      	adds	r0, r7, #1
 800f916:	d1d6      	bne.n	800f8c6 <_vfiprintf_r+0x19a>
 800f918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f91a:	07d9      	lsls	r1, r3, #31
 800f91c:	d405      	bmi.n	800f92a <_vfiprintf_r+0x1fe>
 800f91e:	89ab      	ldrh	r3, [r5, #12]
 800f920:	059a      	lsls	r2, r3, #22
 800f922:	d402      	bmi.n	800f92a <_vfiprintf_r+0x1fe>
 800f924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f926:	f7ff fb49 	bl	800efbc <__retarget_lock_release_recursive>
 800f92a:	89ab      	ldrh	r3, [r5, #12]
 800f92c:	065b      	lsls	r3, r3, #25
 800f92e:	f53f af1f 	bmi.w	800f770 <_vfiprintf_r+0x44>
 800f932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f934:	e71e      	b.n	800f774 <_vfiprintf_r+0x48>
 800f936:	ab03      	add	r3, sp, #12
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	462a      	mov	r2, r5
 800f93c:	4b05      	ldr	r3, [pc, #20]	@ (800f954 <_vfiprintf_r+0x228>)
 800f93e:	a904      	add	r1, sp, #16
 800f940:	4630      	mov	r0, r6
 800f942:	f7ff fcd7 	bl	800f2f4 <_printf_i>
 800f946:	e7e4      	b.n	800f912 <_vfiprintf_r+0x1e6>
 800f948:	08010f61 	.word	0x08010f61
 800f94c:	08010f6b 	.word	0x08010f6b
 800f950:	00000000 	.word	0x00000000
 800f954:	0800f709 	.word	0x0800f709
 800f958:	08010f67 	.word	0x08010f67

0800f95c <__swbuf_r>:
 800f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95e:	460e      	mov	r6, r1
 800f960:	4614      	mov	r4, r2
 800f962:	4605      	mov	r5, r0
 800f964:	b118      	cbz	r0, 800f96e <__swbuf_r+0x12>
 800f966:	6a03      	ldr	r3, [r0, #32]
 800f968:	b90b      	cbnz	r3, 800f96e <__swbuf_r+0x12>
 800f96a:	f7ff fa33 	bl	800edd4 <__sinit>
 800f96e:	69a3      	ldr	r3, [r4, #24]
 800f970:	60a3      	str	r3, [r4, #8]
 800f972:	89a3      	ldrh	r3, [r4, #12]
 800f974:	071a      	lsls	r2, r3, #28
 800f976:	d501      	bpl.n	800f97c <__swbuf_r+0x20>
 800f978:	6923      	ldr	r3, [r4, #16]
 800f97a:	b943      	cbnz	r3, 800f98e <__swbuf_r+0x32>
 800f97c:	4621      	mov	r1, r4
 800f97e:	4628      	mov	r0, r5
 800f980:	f000 f82a 	bl	800f9d8 <__swsetup_r>
 800f984:	b118      	cbz	r0, 800f98e <__swbuf_r+0x32>
 800f986:	f04f 37ff 	mov.w	r7, #4294967295
 800f98a:	4638      	mov	r0, r7
 800f98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f98e:	6823      	ldr	r3, [r4, #0]
 800f990:	6922      	ldr	r2, [r4, #16]
 800f992:	1a98      	subs	r0, r3, r2
 800f994:	6963      	ldr	r3, [r4, #20]
 800f996:	b2f6      	uxtb	r6, r6
 800f998:	4283      	cmp	r3, r0
 800f99a:	4637      	mov	r7, r6
 800f99c:	dc05      	bgt.n	800f9aa <__swbuf_r+0x4e>
 800f99e:	4621      	mov	r1, r4
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f7ff fe49 	bl	800f638 <_fflush_r>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d1ed      	bne.n	800f986 <__swbuf_r+0x2a>
 800f9aa:	68a3      	ldr	r3, [r4, #8]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	60a3      	str	r3, [r4, #8]
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	6022      	str	r2, [r4, #0]
 800f9b6:	701e      	strb	r6, [r3, #0]
 800f9b8:	6962      	ldr	r2, [r4, #20]
 800f9ba:	1c43      	adds	r3, r0, #1
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d004      	beq.n	800f9ca <__swbuf_r+0x6e>
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	07db      	lsls	r3, r3, #31
 800f9c4:	d5e1      	bpl.n	800f98a <__swbuf_r+0x2e>
 800f9c6:	2e0a      	cmp	r6, #10
 800f9c8:	d1df      	bne.n	800f98a <__swbuf_r+0x2e>
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f7ff fe33 	bl	800f638 <_fflush_r>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d0d9      	beq.n	800f98a <__swbuf_r+0x2e>
 800f9d6:	e7d6      	b.n	800f986 <__swbuf_r+0x2a>

0800f9d8 <__swsetup_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4b29      	ldr	r3, [pc, #164]	@ (800fa80 <__swsetup_r+0xa8>)
 800f9dc:	4605      	mov	r5, r0
 800f9de:	6818      	ldr	r0, [r3, #0]
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	b118      	cbz	r0, 800f9ec <__swsetup_r+0x14>
 800f9e4:	6a03      	ldr	r3, [r0, #32]
 800f9e6:	b90b      	cbnz	r3, 800f9ec <__swsetup_r+0x14>
 800f9e8:	f7ff f9f4 	bl	800edd4 <__sinit>
 800f9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9f0:	0719      	lsls	r1, r3, #28
 800f9f2:	d422      	bmi.n	800fa3a <__swsetup_r+0x62>
 800f9f4:	06da      	lsls	r2, r3, #27
 800f9f6:	d407      	bmi.n	800fa08 <__swsetup_r+0x30>
 800f9f8:	2209      	movs	r2, #9
 800f9fa:	602a      	str	r2, [r5, #0]
 800f9fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa00:	81a3      	strh	r3, [r4, #12]
 800fa02:	f04f 30ff 	mov.w	r0, #4294967295
 800fa06:	e033      	b.n	800fa70 <__swsetup_r+0x98>
 800fa08:	0758      	lsls	r0, r3, #29
 800fa0a:	d512      	bpl.n	800fa32 <__swsetup_r+0x5a>
 800fa0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa0e:	b141      	cbz	r1, 800fa22 <__swsetup_r+0x4a>
 800fa10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa14:	4299      	cmp	r1, r3
 800fa16:	d002      	beq.n	800fa1e <__swsetup_r+0x46>
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f7ff fafd 	bl	800f018 <_free_r>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa22:	89a3      	ldrh	r3, [r4, #12]
 800fa24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa28:	81a3      	strh	r3, [r4, #12]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	6063      	str	r3, [r4, #4]
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	89a3      	ldrh	r3, [r4, #12]
 800fa34:	f043 0308 	orr.w	r3, r3, #8
 800fa38:	81a3      	strh	r3, [r4, #12]
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	b94b      	cbnz	r3, 800fa52 <__swsetup_r+0x7a>
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa48:	d003      	beq.n	800fa52 <__swsetup_r+0x7a>
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f000 f883 	bl	800fb58 <__smakebuf_r>
 800fa52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa56:	f013 0201 	ands.w	r2, r3, #1
 800fa5a:	d00a      	beq.n	800fa72 <__swsetup_r+0x9a>
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	60a2      	str	r2, [r4, #8]
 800fa60:	6962      	ldr	r2, [r4, #20]
 800fa62:	4252      	negs	r2, r2
 800fa64:	61a2      	str	r2, [r4, #24]
 800fa66:	6922      	ldr	r2, [r4, #16]
 800fa68:	b942      	cbnz	r2, 800fa7c <__swsetup_r+0xa4>
 800fa6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa6e:	d1c5      	bne.n	800f9fc <__swsetup_r+0x24>
 800fa70:	bd38      	pop	{r3, r4, r5, pc}
 800fa72:	0799      	lsls	r1, r3, #30
 800fa74:	bf58      	it	pl
 800fa76:	6962      	ldrpl	r2, [r4, #20]
 800fa78:	60a2      	str	r2, [r4, #8]
 800fa7a:	e7f4      	b.n	800fa66 <__swsetup_r+0x8e>
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	e7f7      	b.n	800fa70 <__swsetup_r+0x98>
 800fa80:	20000174 	.word	0x20000174

0800fa84 <_raise_r>:
 800fa84:	291f      	cmp	r1, #31
 800fa86:	b538      	push	{r3, r4, r5, lr}
 800fa88:	4605      	mov	r5, r0
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	d904      	bls.n	800fa98 <_raise_r+0x14>
 800fa8e:	2316      	movs	r3, #22
 800fa90:	6003      	str	r3, [r0, #0]
 800fa92:	f04f 30ff 	mov.w	r0, #4294967295
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa9a:	b112      	cbz	r2, 800faa2 <_raise_r+0x1e>
 800fa9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800faa0:	b94b      	cbnz	r3, 800fab6 <_raise_r+0x32>
 800faa2:	4628      	mov	r0, r5
 800faa4:	f000 f830 	bl	800fb08 <_getpid_r>
 800faa8:	4622      	mov	r2, r4
 800faaa:	4601      	mov	r1, r0
 800faac:	4628      	mov	r0, r5
 800faae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fab2:	f000 b817 	b.w	800fae4 <_kill_r>
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d00a      	beq.n	800fad0 <_raise_r+0x4c>
 800faba:	1c59      	adds	r1, r3, #1
 800fabc:	d103      	bne.n	800fac6 <_raise_r+0x42>
 800fabe:	2316      	movs	r3, #22
 800fac0:	6003      	str	r3, [r0, #0]
 800fac2:	2001      	movs	r0, #1
 800fac4:	e7e7      	b.n	800fa96 <_raise_r+0x12>
 800fac6:	2100      	movs	r1, #0
 800fac8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800facc:	4620      	mov	r0, r4
 800face:	4798      	blx	r3
 800fad0:	2000      	movs	r0, #0
 800fad2:	e7e0      	b.n	800fa96 <_raise_r+0x12>

0800fad4 <raise>:
 800fad4:	4b02      	ldr	r3, [pc, #8]	@ (800fae0 <raise+0xc>)
 800fad6:	4601      	mov	r1, r0
 800fad8:	6818      	ldr	r0, [r3, #0]
 800fada:	f7ff bfd3 	b.w	800fa84 <_raise_r>
 800fade:	bf00      	nop
 800fae0:	20000174 	.word	0x20000174

0800fae4 <_kill_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d07      	ldr	r5, [pc, #28]	@ (800fb04 <_kill_r+0x20>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	4611      	mov	r1, r2
 800faf0:	602b      	str	r3, [r5, #0]
 800faf2:	f7f3 f8f3 	bl	8002cdc <_kill>
 800faf6:	1c43      	adds	r3, r0, #1
 800faf8:	d102      	bne.n	800fb00 <_kill_r+0x1c>
 800fafa:	682b      	ldr	r3, [r5, #0]
 800fafc:	b103      	cbz	r3, 800fb00 <_kill_r+0x1c>
 800fafe:	6023      	str	r3, [r4, #0]
 800fb00:	bd38      	pop	{r3, r4, r5, pc}
 800fb02:	bf00      	nop
 800fb04:	20002e48 	.word	0x20002e48

0800fb08 <_getpid_r>:
 800fb08:	f7f3 b8e0 	b.w	8002ccc <_getpid>

0800fb0c <__swhatbuf_r>:
 800fb0c:	b570      	push	{r4, r5, r6, lr}
 800fb0e:	460c      	mov	r4, r1
 800fb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb14:	2900      	cmp	r1, #0
 800fb16:	b096      	sub	sp, #88	@ 0x58
 800fb18:	4615      	mov	r5, r2
 800fb1a:	461e      	mov	r6, r3
 800fb1c:	da0d      	bge.n	800fb3a <__swhatbuf_r+0x2e>
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb24:	f04f 0100 	mov.w	r1, #0
 800fb28:	bf14      	ite	ne
 800fb2a:	2340      	movne	r3, #64	@ 0x40
 800fb2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb30:	2000      	movs	r0, #0
 800fb32:	6031      	str	r1, [r6, #0]
 800fb34:	602b      	str	r3, [r5, #0]
 800fb36:	b016      	add	sp, #88	@ 0x58
 800fb38:	bd70      	pop	{r4, r5, r6, pc}
 800fb3a:	466a      	mov	r2, sp
 800fb3c:	f000 f848 	bl	800fbd0 <_fstat_r>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	dbec      	blt.n	800fb1e <__swhatbuf_r+0x12>
 800fb44:	9901      	ldr	r1, [sp, #4]
 800fb46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb4e:	4259      	negs	r1, r3
 800fb50:	4159      	adcs	r1, r3
 800fb52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb56:	e7eb      	b.n	800fb30 <__swhatbuf_r+0x24>

0800fb58 <__smakebuf_r>:
 800fb58:	898b      	ldrh	r3, [r1, #12]
 800fb5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb5c:	079d      	lsls	r5, r3, #30
 800fb5e:	4606      	mov	r6, r0
 800fb60:	460c      	mov	r4, r1
 800fb62:	d507      	bpl.n	800fb74 <__smakebuf_r+0x1c>
 800fb64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb68:	6023      	str	r3, [r4, #0]
 800fb6a:	6123      	str	r3, [r4, #16]
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	6163      	str	r3, [r4, #20]
 800fb70:	b003      	add	sp, #12
 800fb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb74:	ab01      	add	r3, sp, #4
 800fb76:	466a      	mov	r2, sp
 800fb78:	f7ff ffc8 	bl	800fb0c <__swhatbuf_r>
 800fb7c:	9f00      	ldr	r7, [sp, #0]
 800fb7e:	4605      	mov	r5, r0
 800fb80:	4639      	mov	r1, r7
 800fb82:	4630      	mov	r0, r6
 800fb84:	f7ff fabc 	bl	800f100 <_malloc_r>
 800fb88:	b948      	cbnz	r0, 800fb9e <__smakebuf_r+0x46>
 800fb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb8e:	059a      	lsls	r2, r3, #22
 800fb90:	d4ee      	bmi.n	800fb70 <__smakebuf_r+0x18>
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	f043 0302 	orr.w	r3, r3, #2
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	e7e2      	b.n	800fb64 <__smakebuf_r+0xc>
 800fb9e:	89a3      	ldrh	r3, [r4, #12]
 800fba0:	6020      	str	r0, [r4, #0]
 800fba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	9b01      	ldr	r3, [sp, #4]
 800fbaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbae:	b15b      	cbz	r3, 800fbc8 <__smakebuf_r+0x70>
 800fbb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f000 f81d 	bl	800fbf4 <_isatty_r>
 800fbba:	b128      	cbz	r0, 800fbc8 <__smakebuf_r+0x70>
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	f023 0303 	bic.w	r3, r3, #3
 800fbc2:	f043 0301 	orr.w	r3, r3, #1
 800fbc6:	81a3      	strh	r3, [r4, #12]
 800fbc8:	89a3      	ldrh	r3, [r4, #12]
 800fbca:	431d      	orrs	r5, r3
 800fbcc:	81a5      	strh	r5, [r4, #12]
 800fbce:	e7cf      	b.n	800fb70 <__smakebuf_r+0x18>

0800fbd0 <_fstat_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4d07      	ldr	r5, [pc, #28]	@ (800fbf0 <_fstat_r+0x20>)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	4611      	mov	r1, r2
 800fbdc:	602b      	str	r3, [r5, #0]
 800fbde:	f7f3 f8dd 	bl	8002d9c <_fstat>
 800fbe2:	1c43      	adds	r3, r0, #1
 800fbe4:	d102      	bne.n	800fbec <_fstat_r+0x1c>
 800fbe6:	682b      	ldr	r3, [r5, #0]
 800fbe8:	b103      	cbz	r3, 800fbec <_fstat_r+0x1c>
 800fbea:	6023      	str	r3, [r4, #0]
 800fbec:	bd38      	pop	{r3, r4, r5, pc}
 800fbee:	bf00      	nop
 800fbf0:	20002e48 	.word	0x20002e48

0800fbf4 <_isatty_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d06      	ldr	r5, [pc, #24]	@ (800fc10 <_isatty_r+0x1c>)
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	f7f3 f8dc 	bl	8002dbc <_isatty>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d102      	bne.n	800fc0e <_isatty_r+0x1a>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	b103      	cbz	r3, 800fc0e <_isatty_r+0x1a>
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	20002e48 	.word	0x20002e48

0800fc14 <powf>:
 800fc14:	b508      	push	{r3, lr}
 800fc16:	ed2d 8b04 	vpush	{d8-d9}
 800fc1a:	eeb0 8a60 	vmov.f32	s16, s1
 800fc1e:	eeb0 9a40 	vmov.f32	s18, s0
 800fc22:	f000 f9a5 	bl	800ff70 <__ieee754_powf>
 800fc26:	eeb4 8a48 	vcmp.f32	s16, s16
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	eef0 8a40 	vmov.f32	s17, s0
 800fc32:	d63e      	bvs.n	800fcb2 <powf+0x9e>
 800fc34:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3c:	d112      	bne.n	800fc64 <powf+0x50>
 800fc3e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc46:	d039      	beq.n	800fcbc <powf+0xa8>
 800fc48:	eeb0 0a48 	vmov.f32	s0, s16
 800fc4c:	f000 f8e2 	bl	800fe14 <finitef>
 800fc50:	b378      	cbz	r0, 800fcb2 <powf+0x9e>
 800fc52:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5a:	d52a      	bpl.n	800fcb2 <powf+0x9e>
 800fc5c:	f7ff f982 	bl	800ef64 <__errno>
 800fc60:	2322      	movs	r3, #34	@ 0x22
 800fc62:	e014      	b.n	800fc8e <powf+0x7a>
 800fc64:	f000 f8d6 	bl	800fe14 <finitef>
 800fc68:	b998      	cbnz	r0, 800fc92 <powf+0x7e>
 800fc6a:	eeb0 0a49 	vmov.f32	s0, s18
 800fc6e:	f000 f8d1 	bl	800fe14 <finitef>
 800fc72:	b170      	cbz	r0, 800fc92 <powf+0x7e>
 800fc74:	eeb0 0a48 	vmov.f32	s0, s16
 800fc78:	f000 f8cc 	bl	800fe14 <finitef>
 800fc7c:	b148      	cbz	r0, 800fc92 <powf+0x7e>
 800fc7e:	eef4 8a68 	vcmp.f32	s17, s17
 800fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc86:	d7e9      	bvc.n	800fc5c <powf+0x48>
 800fc88:	f7ff f96c 	bl	800ef64 <__errno>
 800fc8c:	2321      	movs	r3, #33	@ 0x21
 800fc8e:	6003      	str	r3, [r0, #0]
 800fc90:	e00f      	b.n	800fcb2 <powf+0x9e>
 800fc92:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9a:	d10a      	bne.n	800fcb2 <powf+0x9e>
 800fc9c:	eeb0 0a49 	vmov.f32	s0, s18
 800fca0:	f000 f8b8 	bl	800fe14 <finitef>
 800fca4:	b128      	cbz	r0, 800fcb2 <powf+0x9e>
 800fca6:	eeb0 0a48 	vmov.f32	s0, s16
 800fcaa:	f000 f8b3 	bl	800fe14 <finitef>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d1d4      	bne.n	800fc5c <powf+0x48>
 800fcb2:	eeb0 0a68 	vmov.f32	s0, s17
 800fcb6:	ecbd 8b04 	vpop	{d8-d9}
 800fcba:	bd08      	pop	{r3, pc}
 800fcbc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800fcc0:	e7f7      	b.n	800fcb2 <powf+0x9e>
	...

0800fcc4 <sqrtf>:
 800fcc4:	b508      	push	{r3, lr}
 800fcc6:	ed2d 8b02 	vpush	{d8}
 800fcca:	eeb0 8a40 	vmov.f32	s16, s0
 800fcce:	f000 f8ab 	bl	800fe28 <__ieee754_sqrtf>
 800fcd2:	eeb4 8a48 	vcmp.f32	s16, s16
 800fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcda:	d60c      	bvs.n	800fcf6 <sqrtf+0x32>
 800fcdc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fcfc <sqrtf+0x38>
 800fce0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce8:	d505      	bpl.n	800fcf6 <sqrtf+0x32>
 800fcea:	f7ff f93b 	bl	800ef64 <__errno>
 800fcee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fcf2:	2321      	movs	r3, #33	@ 0x21
 800fcf4:	6003      	str	r3, [r0, #0]
 800fcf6:	ecbd 8b02 	vpop	{d8}
 800fcfa:	bd08      	pop	{r3, pc}
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <cosf>:
 800fd00:	ee10 3a10 	vmov	r3, s0
 800fd04:	b507      	push	{r0, r1, r2, lr}
 800fd06:	4a1e      	ldr	r2, [pc, #120]	@ (800fd80 <cosf+0x80>)
 800fd08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d806      	bhi.n	800fd1e <cosf+0x1e>
 800fd10:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800fd84 <cosf+0x84>
 800fd14:	b003      	add	sp, #12
 800fd16:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd1a:	f000 b889 	b.w	800fe30 <__kernel_cosf>
 800fd1e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fd22:	d304      	bcc.n	800fd2e <cosf+0x2e>
 800fd24:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fd28:	b003      	add	sp, #12
 800fd2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd2e:	4668      	mov	r0, sp
 800fd30:	f000 fbec 	bl	801050c <__ieee754_rem_pio2f>
 800fd34:	f000 0003 	and.w	r0, r0, #3
 800fd38:	2801      	cmp	r0, #1
 800fd3a:	d009      	beq.n	800fd50 <cosf+0x50>
 800fd3c:	2802      	cmp	r0, #2
 800fd3e:	d010      	beq.n	800fd62 <cosf+0x62>
 800fd40:	b9b0      	cbnz	r0, 800fd70 <cosf+0x70>
 800fd42:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd46:	ed9d 0a00 	vldr	s0, [sp]
 800fd4a:	f000 f871 	bl	800fe30 <__kernel_cosf>
 800fd4e:	e7eb      	b.n	800fd28 <cosf+0x28>
 800fd50:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd54:	ed9d 0a00 	vldr	s0, [sp]
 800fd58:	f000 f8c2 	bl	800fee0 <__kernel_sinf>
 800fd5c:	eeb1 0a40 	vneg.f32	s0, s0
 800fd60:	e7e2      	b.n	800fd28 <cosf+0x28>
 800fd62:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd66:	ed9d 0a00 	vldr	s0, [sp]
 800fd6a:	f000 f861 	bl	800fe30 <__kernel_cosf>
 800fd6e:	e7f5      	b.n	800fd5c <cosf+0x5c>
 800fd70:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd74:	ed9d 0a00 	vldr	s0, [sp]
 800fd78:	2001      	movs	r0, #1
 800fd7a:	f000 f8b1 	bl	800fee0 <__kernel_sinf>
 800fd7e:	e7d3      	b.n	800fd28 <cosf+0x28>
 800fd80:	3f490fd8 	.word	0x3f490fd8
 800fd84:	00000000 	.word	0x00000000

0800fd88 <sinf>:
 800fd88:	ee10 3a10 	vmov	r3, s0
 800fd8c:	b507      	push	{r0, r1, r2, lr}
 800fd8e:	4a1f      	ldr	r2, [pc, #124]	@ (800fe0c <sinf+0x84>)
 800fd90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d807      	bhi.n	800fda8 <sinf+0x20>
 800fd98:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800fe10 <sinf+0x88>
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	b003      	add	sp, #12
 800fda0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fda4:	f000 b89c 	b.w	800fee0 <__kernel_sinf>
 800fda8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fdac:	d304      	bcc.n	800fdb8 <sinf+0x30>
 800fdae:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fdb2:	b003      	add	sp, #12
 800fdb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdb8:	4668      	mov	r0, sp
 800fdba:	f000 fba7 	bl	801050c <__ieee754_rem_pio2f>
 800fdbe:	f000 0003 	and.w	r0, r0, #3
 800fdc2:	2801      	cmp	r0, #1
 800fdc4:	d00a      	beq.n	800fddc <sinf+0x54>
 800fdc6:	2802      	cmp	r0, #2
 800fdc8:	d00f      	beq.n	800fdea <sinf+0x62>
 800fdca:	b9c0      	cbnz	r0, 800fdfe <sinf+0x76>
 800fdcc:	eddd 0a01 	vldr	s1, [sp, #4]
 800fdd0:	ed9d 0a00 	vldr	s0, [sp]
 800fdd4:	2001      	movs	r0, #1
 800fdd6:	f000 f883 	bl	800fee0 <__kernel_sinf>
 800fdda:	e7ea      	b.n	800fdb2 <sinf+0x2a>
 800fddc:	eddd 0a01 	vldr	s1, [sp, #4]
 800fde0:	ed9d 0a00 	vldr	s0, [sp]
 800fde4:	f000 f824 	bl	800fe30 <__kernel_cosf>
 800fde8:	e7e3      	b.n	800fdb2 <sinf+0x2a>
 800fdea:	eddd 0a01 	vldr	s1, [sp, #4]
 800fdee:	ed9d 0a00 	vldr	s0, [sp]
 800fdf2:	2001      	movs	r0, #1
 800fdf4:	f000 f874 	bl	800fee0 <__kernel_sinf>
 800fdf8:	eeb1 0a40 	vneg.f32	s0, s0
 800fdfc:	e7d9      	b.n	800fdb2 <sinf+0x2a>
 800fdfe:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe02:	ed9d 0a00 	vldr	s0, [sp]
 800fe06:	f000 f813 	bl	800fe30 <__kernel_cosf>
 800fe0a:	e7f5      	b.n	800fdf8 <sinf+0x70>
 800fe0c:	3f490fd8 	.word	0x3f490fd8
 800fe10:	00000000 	.word	0x00000000

0800fe14 <finitef>:
 800fe14:	ee10 3a10 	vmov	r3, s0
 800fe18:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800fe1c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800fe20:	bfac      	ite	ge
 800fe22:	2000      	movge	r0, #0
 800fe24:	2001      	movlt	r0, #1
 800fe26:	4770      	bx	lr

0800fe28 <__ieee754_sqrtf>:
 800fe28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fe2c:	4770      	bx	lr
	...

0800fe30 <__kernel_cosf>:
 800fe30:	ee10 3a10 	vmov	r3, s0
 800fe34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fe38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fe3c:	eef0 6a40 	vmov.f32	s13, s0
 800fe40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fe44:	d204      	bcs.n	800fe50 <__kernel_cosf+0x20>
 800fe46:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fe4a:	ee17 2a90 	vmov	r2, s15
 800fe4e:	b342      	cbz	r2, 800fea2 <__kernel_cosf+0x72>
 800fe50:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fe54:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800fec0 <__kernel_cosf+0x90>
 800fe58:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fec4 <__kernel_cosf+0x94>
 800fe5c:	4a1a      	ldr	r2, [pc, #104]	@ (800fec8 <__kernel_cosf+0x98>)
 800fe5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fe62:	4293      	cmp	r3, r2
 800fe64:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fecc <__kernel_cosf+0x9c>
 800fe68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe6c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800fed0 <__kernel_cosf+0xa0>
 800fe70:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fe74:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fed4 <__kernel_cosf+0xa4>
 800fe78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe7c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fed8 <__kernel_cosf+0xa8>
 800fe80:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fe84:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fe88:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fe8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fe90:	eee7 0a06 	vfma.f32	s1, s14, s12
 800fe94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe98:	d804      	bhi.n	800fea4 <__kernel_cosf+0x74>
 800fe9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fe9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fea2:	4770      	bx	lr
 800fea4:	4a0d      	ldr	r2, [pc, #52]	@ (800fedc <__kernel_cosf+0xac>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	bf9a      	itte	ls
 800feaa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800feae:	ee07 3a10 	vmovls	s14, r3
 800feb2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800feb6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800feba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800febe:	e7ec      	b.n	800fe9a <__kernel_cosf+0x6a>
 800fec0:	ad47d74e 	.word	0xad47d74e
 800fec4:	310f74f6 	.word	0x310f74f6
 800fec8:	3e999999 	.word	0x3e999999
 800fecc:	b493f27c 	.word	0xb493f27c
 800fed0:	37d00d01 	.word	0x37d00d01
 800fed4:	bab60b61 	.word	0xbab60b61
 800fed8:	3d2aaaab 	.word	0x3d2aaaab
 800fedc:	3f480000 	.word	0x3f480000

0800fee0 <__kernel_sinf>:
 800fee0:	ee10 3a10 	vmov	r3, s0
 800fee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fee8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800feec:	d204      	bcs.n	800fef8 <__kernel_sinf+0x18>
 800feee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fef2:	ee17 3a90 	vmov	r3, s15
 800fef6:	b35b      	cbz	r3, 800ff50 <__kernel_sinf+0x70>
 800fef8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fefc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ff54 <__kernel_sinf+0x74>
 800ff00:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ff58 <__kernel_sinf+0x78>
 800ff04:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ff08:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ff5c <__kernel_sinf+0x7c>
 800ff0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ff10:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ff60 <__kernel_sinf+0x80>
 800ff14:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ff18:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ff64 <__kernel_sinf+0x84>
 800ff1c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ff20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ff24:	b930      	cbnz	r0, 800ff34 <__kernel_sinf+0x54>
 800ff26:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ff68 <__kernel_sinf+0x88>
 800ff2a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ff2e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ff32:	4770      	bx	lr
 800ff34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ff38:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ff3c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ff40:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ff44:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ff6c <__kernel_sinf+0x8c>
 800ff48:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ff4c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	2f2ec9d3 	.word	0x2f2ec9d3
 800ff58:	b2d72f34 	.word	0xb2d72f34
 800ff5c:	3638ef1b 	.word	0x3638ef1b
 800ff60:	b9500d01 	.word	0xb9500d01
 800ff64:	3c088889 	.word	0x3c088889
 800ff68:	be2aaaab 	.word	0xbe2aaaab
 800ff6c:	3e2aaaab 	.word	0x3e2aaaab

0800ff70 <__ieee754_powf>:
 800ff70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff74:	ee10 4a90 	vmov	r4, s1
 800ff78:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ff7c:	ed2d 8b02 	vpush	{d8}
 800ff80:	ee10 6a10 	vmov	r6, s0
 800ff84:	eeb0 8a40 	vmov.f32	s16, s0
 800ff88:	eef0 8a60 	vmov.f32	s17, s1
 800ff8c:	d10c      	bne.n	800ffa8 <__ieee754_powf+0x38>
 800ff8e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ff92:	0076      	lsls	r6, r6, #1
 800ff94:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ff98:	f240 8274 	bls.w	8010484 <__ieee754_powf+0x514>
 800ff9c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ffa0:	ecbd 8b02 	vpop	{d8}
 800ffa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ffac:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ffb0:	d802      	bhi.n	800ffb8 <__ieee754_powf+0x48>
 800ffb2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ffb6:	d908      	bls.n	800ffca <__ieee754_powf+0x5a>
 800ffb8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ffbc:	d1ee      	bne.n	800ff9c <__ieee754_powf+0x2c>
 800ffbe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ffc2:	0064      	lsls	r4, r4, #1
 800ffc4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ffc8:	e7e6      	b.n	800ff98 <__ieee754_powf+0x28>
 800ffca:	2e00      	cmp	r6, #0
 800ffcc:	da1f      	bge.n	801000e <__ieee754_powf+0x9e>
 800ffce:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ffd2:	f080 8260 	bcs.w	8010496 <__ieee754_powf+0x526>
 800ffd6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ffda:	d32f      	bcc.n	801003c <__ieee754_powf+0xcc>
 800ffdc:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ffe0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ffe4:	fa49 f503 	asr.w	r5, r9, r3
 800ffe8:	fa05 f303 	lsl.w	r3, r5, r3
 800ffec:	454b      	cmp	r3, r9
 800ffee:	d123      	bne.n	8010038 <__ieee754_powf+0xc8>
 800fff0:	f005 0501 	and.w	r5, r5, #1
 800fff4:	f1c5 0502 	rsb	r5, r5, #2
 800fff8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800fffc:	d11f      	bne.n	801003e <__ieee754_powf+0xce>
 800fffe:	2c00      	cmp	r4, #0
 8010000:	f280 8246 	bge.w	8010490 <__ieee754_powf+0x520>
 8010004:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010008:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801000c:	e7c8      	b.n	800ffa0 <__ieee754_powf+0x30>
 801000e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010012:	d111      	bne.n	8010038 <__ieee754_powf+0xc8>
 8010014:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010018:	f000 8234 	beq.w	8010484 <__ieee754_powf+0x514>
 801001c:	d906      	bls.n	801002c <__ieee754_powf+0xbc>
 801001e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010334 <__ieee754_powf+0x3c4>
 8010022:	2c00      	cmp	r4, #0
 8010024:	bfa8      	it	ge
 8010026:	eeb0 0a68 	vmovge.f32	s0, s17
 801002a:	e7b9      	b.n	800ffa0 <__ieee754_powf+0x30>
 801002c:	2c00      	cmp	r4, #0
 801002e:	f280 822c 	bge.w	801048a <__ieee754_powf+0x51a>
 8010032:	eeb1 0a68 	vneg.f32	s0, s17
 8010036:	e7b3      	b.n	800ffa0 <__ieee754_powf+0x30>
 8010038:	2500      	movs	r5, #0
 801003a:	e7dd      	b.n	800fff8 <__ieee754_powf+0x88>
 801003c:	2500      	movs	r5, #0
 801003e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010042:	d102      	bne.n	801004a <__ieee754_powf+0xda>
 8010044:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010048:	e7aa      	b.n	800ffa0 <__ieee754_powf+0x30>
 801004a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801004e:	f040 8227 	bne.w	80104a0 <__ieee754_powf+0x530>
 8010052:	2e00      	cmp	r6, #0
 8010054:	f2c0 8224 	blt.w	80104a0 <__ieee754_powf+0x530>
 8010058:	eeb0 0a48 	vmov.f32	s0, s16
 801005c:	ecbd 8b02 	vpop	{d8}
 8010060:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010064:	f7ff bee0 	b.w	800fe28 <__ieee754_sqrtf>
 8010068:	2d01      	cmp	r5, #1
 801006a:	d199      	bne.n	800ffa0 <__ieee754_powf+0x30>
 801006c:	eeb1 0a40 	vneg.f32	s0, s0
 8010070:	e796      	b.n	800ffa0 <__ieee754_powf+0x30>
 8010072:	0ff0      	lsrs	r0, r6, #31
 8010074:	3801      	subs	r0, #1
 8010076:	ea55 0300 	orrs.w	r3, r5, r0
 801007a:	d104      	bne.n	8010086 <__ieee754_powf+0x116>
 801007c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010080:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010084:	e78c      	b.n	800ffa0 <__ieee754_powf+0x30>
 8010086:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801008a:	d96d      	bls.n	8010168 <__ieee754_powf+0x1f8>
 801008c:	4baa      	ldr	r3, [pc, #680]	@ (8010338 <__ieee754_powf+0x3c8>)
 801008e:	4598      	cmp	r8, r3
 8010090:	d808      	bhi.n	80100a4 <__ieee754_powf+0x134>
 8010092:	2c00      	cmp	r4, #0
 8010094:	da0b      	bge.n	80100ae <__ieee754_powf+0x13e>
 8010096:	2000      	movs	r0, #0
 8010098:	ecbd 8b02 	vpop	{d8}
 801009c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a0:	f000 bbf2 	b.w	8010888 <__math_oflowf>
 80100a4:	4ba5      	ldr	r3, [pc, #660]	@ (801033c <__ieee754_powf+0x3cc>)
 80100a6:	4598      	cmp	r8, r3
 80100a8:	d908      	bls.n	80100bc <__ieee754_powf+0x14c>
 80100aa:	2c00      	cmp	r4, #0
 80100ac:	dcf3      	bgt.n	8010096 <__ieee754_powf+0x126>
 80100ae:	2000      	movs	r0, #0
 80100b0:	ecbd 8b02 	vpop	{d8}
 80100b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b8:	f000 bbe0 	b.w	801087c <__math_uflowf>
 80100bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80100c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100c4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010340 <__ieee754_powf+0x3d0>
 80100c8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80100cc:	eee0 6a67 	vfms.f32	s13, s0, s15
 80100d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80100d4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80100d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80100dc:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010344 <__ieee754_powf+0x3d4>
 80100e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80100e4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8010348 <__ieee754_powf+0x3d8>
 80100e8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80100ec:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801034c <__ieee754_powf+0x3dc>
 80100f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80100f4:	eeb0 7a67 	vmov.f32	s14, s15
 80100f8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80100fc:	ee17 3a10 	vmov	r3, s14
 8010100:	f36f 030b 	bfc	r3, #0, #12
 8010104:	ee07 3a10 	vmov	s14, r3
 8010108:	eeb0 6a47 	vmov.f32	s12, s14
 801010c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010110:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010114:	3d01      	subs	r5, #1
 8010116:	4305      	orrs	r5, r0
 8010118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801011c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010120:	f36f 040b 	bfc	r4, #0, #12
 8010124:	bf18      	it	ne
 8010126:	eeb0 8a66 	vmovne.f32	s16, s13
 801012a:	ee06 4a90 	vmov	s13, r4
 801012e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010132:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010136:	ee67 7a26 	vmul.f32	s15, s14, s13
 801013a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801013e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010142:	ee17 1a10 	vmov	r1, s14
 8010146:	2900      	cmp	r1, #0
 8010148:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801014c:	f340 80dd 	ble.w	801030a <__ieee754_powf+0x39a>
 8010150:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010154:	f240 80ca 	bls.w	80102ec <__ieee754_powf+0x37c>
 8010158:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801015c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010160:	bf4c      	ite	mi
 8010162:	2001      	movmi	r0, #1
 8010164:	2000      	movpl	r0, #0
 8010166:	e797      	b.n	8010098 <__ieee754_powf+0x128>
 8010168:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801016c:	bf01      	itttt	eq
 801016e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010350 <__ieee754_powf+0x3e0>
 8010172:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010176:	f06f 0317 	mvneq.w	r3, #23
 801017a:	ee17 7a90 	vmoveq	r7, s15
 801017e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010182:	bf18      	it	ne
 8010184:	2300      	movne	r3, #0
 8010186:	3a7f      	subs	r2, #127	@ 0x7f
 8010188:	441a      	add	r2, r3
 801018a:	4b72      	ldr	r3, [pc, #456]	@ (8010354 <__ieee754_powf+0x3e4>)
 801018c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010190:	429f      	cmp	r7, r3
 8010192:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010196:	dd06      	ble.n	80101a6 <__ieee754_powf+0x236>
 8010198:	4b6f      	ldr	r3, [pc, #444]	@ (8010358 <__ieee754_powf+0x3e8>)
 801019a:	429f      	cmp	r7, r3
 801019c:	f340 80a4 	ble.w	80102e8 <__ieee754_powf+0x378>
 80101a0:	3201      	adds	r2, #1
 80101a2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80101a6:	2600      	movs	r6, #0
 80101a8:	4b6c      	ldr	r3, [pc, #432]	@ (801035c <__ieee754_powf+0x3ec>)
 80101aa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80101ae:	ee07 1a10 	vmov	s14, r1
 80101b2:	edd3 5a00 	vldr	s11, [r3]
 80101b6:	4b6a      	ldr	r3, [pc, #424]	@ (8010360 <__ieee754_powf+0x3f0>)
 80101b8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80101bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80101c0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80101c4:	1049      	asrs	r1, r1, #1
 80101c6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80101ca:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80101ce:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80101d2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80101d6:	ee07 1a90 	vmov	s15, r1
 80101da:	ee26 5a24 	vmul.f32	s10, s12, s9
 80101de:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80101e2:	ee15 7a10 	vmov	r7, s10
 80101e6:	401f      	ands	r7, r3
 80101e8:	ee06 7a90 	vmov	s13, r7
 80101ec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80101f0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80101f4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80101f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80101fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010364 <__ieee754_powf+0x3f4>
 8010200:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010368 <__ieee754_powf+0x3f8>
 8010204:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010208:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801036c <__ieee754_powf+0x3fc>
 801020c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010210:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010340 <__ieee754_powf+0x3d0>
 8010214:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010218:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010370 <__ieee754_powf+0x400>
 801021c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010220:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010374 <__ieee754_powf+0x404>
 8010224:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010228:	eee7 5a27 	vfma.f32	s11, s14, s15
 801022c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010230:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010234:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010238:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801023c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010240:	eef0 5a67 	vmov.f32	s11, s15
 8010244:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010248:	ee75 5a87 	vadd.f32	s11, s11, s14
 801024c:	ee15 1a90 	vmov	r1, s11
 8010250:	4019      	ands	r1, r3
 8010252:	ee05 1a90 	vmov	s11, r1
 8010256:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801025a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801025e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010262:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010266:	eee6 7a25 	vfma.f32	s15, s12, s11
 801026a:	eeb0 6a67 	vmov.f32	s12, s15
 801026e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010272:	ee16 1a10 	vmov	r1, s12
 8010276:	4019      	ands	r1, r3
 8010278:	ee06 1a10 	vmov	s12, r1
 801027c:	eeb0 7a46 	vmov.f32	s14, s12
 8010280:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010284:	493c      	ldr	r1, [pc, #240]	@ (8010378 <__ieee754_powf+0x408>)
 8010286:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801028a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801028e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801037c <__ieee754_powf+0x40c>
 8010292:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010380 <__ieee754_powf+0x410>
 8010296:	ee67 7a87 	vmul.f32	s15, s15, s14
 801029a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010384 <__ieee754_powf+0x414>
 801029e:	eee6 7a07 	vfma.f32	s15, s12, s14
 80102a2:	ed91 7a00 	vldr	s14, [r1]
 80102a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102aa:	ee07 2a10 	vmov	s14, r2
 80102ae:	4a36      	ldr	r2, [pc, #216]	@ (8010388 <__ieee754_powf+0x418>)
 80102b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80102b4:	eeb0 7a67 	vmov.f32	s14, s15
 80102b8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80102bc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80102c0:	ed92 5a00 	vldr	s10, [r2]
 80102c4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80102c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80102cc:	ee17 2a10 	vmov	r2, s14
 80102d0:	401a      	ands	r2, r3
 80102d2:	ee07 2a10 	vmov	s14, r2
 80102d6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80102da:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80102de:	eee6 6a65 	vfms.f32	s13, s12, s11
 80102e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102e6:	e715      	b.n	8010114 <__ieee754_powf+0x1a4>
 80102e8:	2601      	movs	r6, #1
 80102ea:	e75d      	b.n	80101a8 <__ieee754_powf+0x238>
 80102ec:	d152      	bne.n	8010394 <__ieee754_powf+0x424>
 80102ee:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801038c <__ieee754_powf+0x41c>
 80102f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80102f6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80102fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80102fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010302:	f73f af29 	bgt.w	8010158 <__ieee754_powf+0x1e8>
 8010306:	2386      	movs	r3, #134	@ 0x86
 8010308:	e048      	b.n	801039c <__ieee754_powf+0x42c>
 801030a:	4a21      	ldr	r2, [pc, #132]	@ (8010390 <__ieee754_powf+0x420>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d907      	bls.n	8010320 <__ieee754_powf+0x3b0>
 8010310:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010318:	bf4c      	ite	mi
 801031a:	2001      	movmi	r0, #1
 801031c:	2000      	movpl	r0, #0
 801031e:	e6c7      	b.n	80100b0 <__ieee754_powf+0x140>
 8010320:	d138      	bne.n	8010394 <__ieee754_powf+0x424>
 8010322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010326:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	dbea      	blt.n	8010306 <__ieee754_powf+0x396>
 8010330:	e7ee      	b.n	8010310 <__ieee754_powf+0x3a0>
 8010332:	bf00      	nop
 8010334:	00000000 	.word	0x00000000
 8010338:	3f7ffff3 	.word	0x3f7ffff3
 801033c:	3f800007 	.word	0x3f800007
 8010340:	3eaaaaab 	.word	0x3eaaaaab
 8010344:	3fb8aa00 	.word	0x3fb8aa00
 8010348:	3fb8aa3b 	.word	0x3fb8aa3b
 801034c:	36eca570 	.word	0x36eca570
 8010350:	4b800000 	.word	0x4b800000
 8010354:	001cc471 	.word	0x001cc471
 8010358:	005db3d6 	.word	0x005db3d6
 801035c:	08010f84 	.word	0x08010f84
 8010360:	fffff000 	.word	0xfffff000
 8010364:	3e6c3255 	.word	0x3e6c3255
 8010368:	3e53f142 	.word	0x3e53f142
 801036c:	3e8ba305 	.word	0x3e8ba305
 8010370:	3edb6db7 	.word	0x3edb6db7
 8010374:	3f19999a 	.word	0x3f19999a
 8010378:	08010f74 	.word	0x08010f74
 801037c:	3f76384f 	.word	0x3f76384f
 8010380:	3f763800 	.word	0x3f763800
 8010384:	369dc3a0 	.word	0x369dc3a0
 8010388:	08010f7c 	.word	0x08010f7c
 801038c:	3338aa3c 	.word	0x3338aa3c
 8010390:	43160000 	.word	0x43160000
 8010394:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010398:	d96f      	bls.n	801047a <__ieee754_powf+0x50a>
 801039a:	15db      	asrs	r3, r3, #23
 801039c:	3b7e      	subs	r3, #126	@ 0x7e
 801039e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80103a2:	4118      	asrs	r0, r3
 80103a4:	4408      	add	r0, r1
 80103a6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80103aa:	4a4e      	ldr	r2, [pc, #312]	@ (80104e4 <__ieee754_powf+0x574>)
 80103ac:	3b7f      	subs	r3, #127	@ 0x7f
 80103ae:	411a      	asrs	r2, r3
 80103b0:	4002      	ands	r2, r0
 80103b2:	ee07 2a10 	vmov	s14, r2
 80103b6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80103ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80103be:	f1c3 0317 	rsb	r3, r3, #23
 80103c2:	4118      	asrs	r0, r3
 80103c4:	2900      	cmp	r1, #0
 80103c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103ca:	bfb8      	it	lt
 80103cc:	4240      	neglt	r0, r0
 80103ce:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80103d2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80104e8 <__ieee754_powf+0x578>
 80103d6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80104ec <__ieee754_powf+0x57c>
 80103da:	ee16 3a90 	vmov	r3, s13
 80103de:	f36f 030b 	bfc	r3, #0, #12
 80103e2:	ee06 3a90 	vmov	s13, r3
 80103e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80103ea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80103ee:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80103f2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80104f0 <__ieee754_powf+0x580>
 80103f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103fa:	eee0 7a87 	vfma.f32	s15, s1, s14
 80103fe:	eeb0 7a67 	vmov.f32	s14, s15
 8010402:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010406:	eef0 5a47 	vmov.f32	s11, s14
 801040a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801040e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010412:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010416:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80104f4 <__ieee754_powf+0x584>
 801041a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80104f8 <__ieee754_powf+0x588>
 801041e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010422:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80104fc <__ieee754_powf+0x58c>
 8010426:	eee6 5a26 	vfma.f32	s11, s12, s13
 801042a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8010500 <__ieee754_powf+0x590>
 801042e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010432:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010504 <__ieee754_powf+0x594>
 8010436:	eee6 5a26 	vfma.f32	s11, s12, s13
 801043a:	eeb0 6a47 	vmov.f32	s12, s14
 801043e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010442:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010446:	ee67 5a06 	vmul.f32	s11, s14, s12
 801044a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801044e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010452:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010456:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801045a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801045e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010462:	ee10 3a10 	vmov	r3, s0
 8010466:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801046a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801046e:	da06      	bge.n	801047e <__ieee754_powf+0x50e>
 8010470:	f000 f984 	bl	801077c <scalbnf>
 8010474:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010478:	e592      	b.n	800ffa0 <__ieee754_powf+0x30>
 801047a:	2000      	movs	r0, #0
 801047c:	e7a7      	b.n	80103ce <__ieee754_powf+0x45e>
 801047e:	ee00 3a10 	vmov	s0, r3
 8010482:	e7f7      	b.n	8010474 <__ieee754_powf+0x504>
 8010484:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010488:	e58a      	b.n	800ffa0 <__ieee754_powf+0x30>
 801048a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8010508 <__ieee754_powf+0x598>
 801048e:	e587      	b.n	800ffa0 <__ieee754_powf+0x30>
 8010490:	eeb0 0a48 	vmov.f32	s0, s16
 8010494:	e584      	b.n	800ffa0 <__ieee754_powf+0x30>
 8010496:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801049a:	f43f adbb 	beq.w	8010014 <__ieee754_powf+0xa4>
 801049e:	2502      	movs	r5, #2
 80104a0:	eeb0 0a48 	vmov.f32	s0, s16
 80104a4:	f000 f962 	bl	801076c <fabsf>
 80104a8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80104ac:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80104b0:	4647      	mov	r7, r8
 80104b2:	d003      	beq.n	80104bc <__ieee754_powf+0x54c>
 80104b4:	f1b8 0f00 	cmp.w	r8, #0
 80104b8:	f47f addb 	bne.w	8010072 <__ieee754_powf+0x102>
 80104bc:	2c00      	cmp	r4, #0
 80104be:	bfbc      	itt	lt
 80104c0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80104c4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80104c8:	2e00      	cmp	r6, #0
 80104ca:	f6bf ad69 	bge.w	800ffa0 <__ieee754_powf+0x30>
 80104ce:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80104d2:	ea58 0805 	orrs.w	r8, r8, r5
 80104d6:	f47f adc7 	bne.w	8010068 <__ieee754_powf+0xf8>
 80104da:	ee70 7a40 	vsub.f32	s15, s0, s0
 80104de:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80104e2:	e55d      	b.n	800ffa0 <__ieee754_powf+0x30>
 80104e4:	ff800000 	.word	0xff800000
 80104e8:	3f317218 	.word	0x3f317218
 80104ec:	3f317200 	.word	0x3f317200
 80104f0:	35bfbe8c 	.word	0x35bfbe8c
 80104f4:	b5ddea0e 	.word	0xb5ddea0e
 80104f8:	3331bb4c 	.word	0x3331bb4c
 80104fc:	388ab355 	.word	0x388ab355
 8010500:	bb360b61 	.word	0xbb360b61
 8010504:	3e2aaaab 	.word	0x3e2aaaab
 8010508:	00000000 	.word	0x00000000

0801050c <__ieee754_rem_pio2f>:
 801050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801050e:	ee10 6a10 	vmov	r6, s0
 8010512:	4b88      	ldr	r3, [pc, #544]	@ (8010734 <__ieee754_rem_pio2f+0x228>)
 8010514:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010518:	429d      	cmp	r5, r3
 801051a:	b087      	sub	sp, #28
 801051c:	4604      	mov	r4, r0
 801051e:	d805      	bhi.n	801052c <__ieee754_rem_pio2f+0x20>
 8010520:	2300      	movs	r3, #0
 8010522:	ed80 0a00 	vstr	s0, [r0]
 8010526:	6043      	str	r3, [r0, #4]
 8010528:	2000      	movs	r0, #0
 801052a:	e022      	b.n	8010572 <__ieee754_rem_pio2f+0x66>
 801052c:	4b82      	ldr	r3, [pc, #520]	@ (8010738 <__ieee754_rem_pio2f+0x22c>)
 801052e:	429d      	cmp	r5, r3
 8010530:	d83a      	bhi.n	80105a8 <__ieee754_rem_pio2f+0x9c>
 8010532:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010536:	2e00      	cmp	r6, #0
 8010538:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801073c <__ieee754_rem_pio2f+0x230>
 801053c:	4a80      	ldr	r2, [pc, #512]	@ (8010740 <__ieee754_rem_pio2f+0x234>)
 801053e:	f023 030f 	bic.w	r3, r3, #15
 8010542:	dd18      	ble.n	8010576 <__ieee754_rem_pio2f+0x6a>
 8010544:	4293      	cmp	r3, r2
 8010546:	ee70 7a47 	vsub.f32	s15, s0, s14
 801054a:	bf09      	itett	eq
 801054c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010744 <__ieee754_rem_pio2f+0x238>
 8010550:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010748 <__ieee754_rem_pio2f+0x23c>
 8010554:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801074c <__ieee754_rem_pio2f+0x240>
 8010558:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801055c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010564:	ed80 7a00 	vstr	s14, [r0]
 8010568:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801056c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010570:	2001      	movs	r0, #1
 8010572:	b007      	add	sp, #28
 8010574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010576:	4293      	cmp	r3, r2
 8010578:	ee70 7a07 	vadd.f32	s15, s0, s14
 801057c:	bf09      	itett	eq
 801057e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010744 <__ieee754_rem_pio2f+0x238>
 8010582:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010748 <__ieee754_rem_pio2f+0x23c>
 8010586:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801074c <__ieee754_rem_pio2f+0x240>
 801058a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801058e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010596:	ed80 7a00 	vstr	s14, [r0]
 801059a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801059e:	edc0 7a01 	vstr	s15, [r0, #4]
 80105a2:	f04f 30ff 	mov.w	r0, #4294967295
 80105a6:	e7e4      	b.n	8010572 <__ieee754_rem_pio2f+0x66>
 80105a8:	4b69      	ldr	r3, [pc, #420]	@ (8010750 <__ieee754_rem_pio2f+0x244>)
 80105aa:	429d      	cmp	r5, r3
 80105ac:	d873      	bhi.n	8010696 <__ieee754_rem_pio2f+0x18a>
 80105ae:	f000 f8dd 	bl	801076c <fabsf>
 80105b2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010754 <__ieee754_rem_pio2f+0x248>
 80105b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80105ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80105be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105c6:	ee17 0a90 	vmov	r0, s15
 80105ca:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801073c <__ieee754_rem_pio2f+0x230>
 80105ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80105d2:	281f      	cmp	r0, #31
 80105d4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010748 <__ieee754_rem_pio2f+0x23c>
 80105d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105dc:	eeb1 6a47 	vneg.f32	s12, s14
 80105e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80105e4:	ee16 1a90 	vmov	r1, s13
 80105e8:	dc09      	bgt.n	80105fe <__ieee754_rem_pio2f+0xf2>
 80105ea:	4a5b      	ldr	r2, [pc, #364]	@ (8010758 <__ieee754_rem_pio2f+0x24c>)
 80105ec:	1e47      	subs	r7, r0, #1
 80105ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80105f2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80105f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d107      	bne.n	801060e <__ieee754_rem_pio2f+0x102>
 80105fe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010602:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010606:	2a08      	cmp	r2, #8
 8010608:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801060c:	dc14      	bgt.n	8010638 <__ieee754_rem_pio2f+0x12c>
 801060e:	6021      	str	r1, [r4, #0]
 8010610:	ed94 7a00 	vldr	s14, [r4]
 8010614:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010618:	2e00      	cmp	r6, #0
 801061a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801061e:	ed84 0a01 	vstr	s0, [r4, #4]
 8010622:	daa6      	bge.n	8010572 <__ieee754_rem_pio2f+0x66>
 8010624:	eeb1 7a47 	vneg.f32	s14, s14
 8010628:	eeb1 0a40 	vneg.f32	s0, s0
 801062c:	ed84 7a00 	vstr	s14, [r4]
 8010630:	ed84 0a01 	vstr	s0, [r4, #4]
 8010634:	4240      	negs	r0, r0
 8010636:	e79c      	b.n	8010572 <__ieee754_rem_pio2f+0x66>
 8010638:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010744 <__ieee754_rem_pio2f+0x238>
 801063c:	eef0 6a40 	vmov.f32	s13, s0
 8010640:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010644:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010648:	eee6 7a25 	vfma.f32	s15, s12, s11
 801064c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801074c <__ieee754_rem_pio2f+0x240>
 8010650:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010654:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010658:	ee15 2a90 	vmov	r2, s11
 801065c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010660:	1a5b      	subs	r3, r3, r1
 8010662:	2b19      	cmp	r3, #25
 8010664:	dc04      	bgt.n	8010670 <__ieee754_rem_pio2f+0x164>
 8010666:	edc4 5a00 	vstr	s11, [r4]
 801066a:	eeb0 0a66 	vmov.f32	s0, s13
 801066e:	e7cf      	b.n	8010610 <__ieee754_rem_pio2f+0x104>
 8010670:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801075c <__ieee754_rem_pio2f+0x250>
 8010674:	eeb0 0a66 	vmov.f32	s0, s13
 8010678:	eea6 0a25 	vfma.f32	s0, s12, s11
 801067c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010680:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010760 <__ieee754_rem_pio2f+0x254>
 8010684:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010688:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801068c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010690:	ed84 7a00 	vstr	s14, [r4]
 8010694:	e7bc      	b.n	8010610 <__ieee754_rem_pio2f+0x104>
 8010696:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801069a:	d306      	bcc.n	80106aa <__ieee754_rem_pio2f+0x19e>
 801069c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80106a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80106a4:	edc0 7a00 	vstr	s15, [r0]
 80106a8:	e73e      	b.n	8010528 <__ieee754_rem_pio2f+0x1c>
 80106aa:	15ea      	asrs	r2, r5, #23
 80106ac:	3a86      	subs	r2, #134	@ 0x86
 80106ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80106b2:	ee07 3a90 	vmov	s15, r3
 80106b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80106ba:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010764 <__ieee754_rem_pio2f+0x258>
 80106be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80106ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80106d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80106de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80106e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80106ee:	d11e      	bne.n	801072e <__ieee754_rem_pio2f+0x222>
 80106f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80106f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f8:	bf0c      	ite	eq
 80106fa:	2301      	moveq	r3, #1
 80106fc:	2302      	movne	r3, #2
 80106fe:	491a      	ldr	r1, [pc, #104]	@ (8010768 <__ieee754_rem_pio2f+0x25c>)
 8010700:	9101      	str	r1, [sp, #4]
 8010702:	2102      	movs	r1, #2
 8010704:	9100      	str	r1, [sp, #0]
 8010706:	a803      	add	r0, sp, #12
 8010708:	4621      	mov	r1, r4
 801070a:	f000 f8c3 	bl	8010894 <__kernel_rem_pio2f>
 801070e:	2e00      	cmp	r6, #0
 8010710:	f6bf af2f 	bge.w	8010572 <__ieee754_rem_pio2f+0x66>
 8010714:	edd4 7a00 	vldr	s15, [r4]
 8010718:	eef1 7a67 	vneg.f32	s15, s15
 801071c:	edc4 7a00 	vstr	s15, [r4]
 8010720:	edd4 7a01 	vldr	s15, [r4, #4]
 8010724:	eef1 7a67 	vneg.f32	s15, s15
 8010728:	edc4 7a01 	vstr	s15, [r4, #4]
 801072c:	e782      	b.n	8010634 <__ieee754_rem_pio2f+0x128>
 801072e:	2303      	movs	r3, #3
 8010730:	e7e5      	b.n	80106fe <__ieee754_rem_pio2f+0x1f2>
 8010732:	bf00      	nop
 8010734:	3f490fd8 	.word	0x3f490fd8
 8010738:	4016cbe3 	.word	0x4016cbe3
 801073c:	3fc90f80 	.word	0x3fc90f80
 8010740:	3fc90fd0 	.word	0x3fc90fd0
 8010744:	37354400 	.word	0x37354400
 8010748:	37354443 	.word	0x37354443
 801074c:	2e85a308 	.word	0x2e85a308
 8010750:	43490f80 	.word	0x43490f80
 8010754:	3f22f984 	.word	0x3f22f984
 8010758:	08010f8c 	.word	0x08010f8c
 801075c:	2e85a300 	.word	0x2e85a300
 8010760:	248d3132 	.word	0x248d3132
 8010764:	43800000 	.word	0x43800000
 8010768:	0801100c 	.word	0x0801100c

0801076c <fabsf>:
 801076c:	ee10 3a10 	vmov	r3, s0
 8010770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010774:	ee00 3a10 	vmov	s0, r3
 8010778:	4770      	bx	lr
	...

0801077c <scalbnf>:
 801077c:	ee10 3a10 	vmov	r3, s0
 8010780:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010784:	d02b      	beq.n	80107de <scalbnf+0x62>
 8010786:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801078a:	d302      	bcc.n	8010792 <scalbnf+0x16>
 801078c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010790:	4770      	bx	lr
 8010792:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010796:	d123      	bne.n	80107e0 <scalbnf+0x64>
 8010798:	4b24      	ldr	r3, [pc, #144]	@ (801082c <scalbnf+0xb0>)
 801079a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010830 <scalbnf+0xb4>
 801079e:	4298      	cmp	r0, r3
 80107a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80107a4:	db17      	blt.n	80107d6 <scalbnf+0x5a>
 80107a6:	ee10 3a10 	vmov	r3, s0
 80107aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80107ae:	3a19      	subs	r2, #25
 80107b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80107b4:	4288      	cmp	r0, r1
 80107b6:	dd15      	ble.n	80107e4 <scalbnf+0x68>
 80107b8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010834 <scalbnf+0xb8>
 80107bc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010838 <scalbnf+0xbc>
 80107c0:	ee10 3a10 	vmov	r3, s0
 80107c4:	eeb0 7a67 	vmov.f32	s14, s15
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	bfb8      	it	lt
 80107cc:	eef0 7a66 	vmovlt.f32	s15, s13
 80107d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80107d4:	4770      	bx	lr
 80107d6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801083c <scalbnf+0xc0>
 80107da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80107de:	4770      	bx	lr
 80107e0:	0dd2      	lsrs	r2, r2, #23
 80107e2:	e7e5      	b.n	80107b0 <scalbnf+0x34>
 80107e4:	4410      	add	r0, r2
 80107e6:	28fe      	cmp	r0, #254	@ 0xfe
 80107e8:	dce6      	bgt.n	80107b8 <scalbnf+0x3c>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	dd06      	ble.n	80107fc <scalbnf+0x80>
 80107ee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80107f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80107f6:	ee00 3a10 	vmov	s0, r3
 80107fa:	4770      	bx	lr
 80107fc:	f110 0f16 	cmn.w	r0, #22
 8010800:	da09      	bge.n	8010816 <scalbnf+0x9a>
 8010802:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801083c <scalbnf+0xc0>
 8010806:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010840 <scalbnf+0xc4>
 801080a:	ee10 3a10 	vmov	r3, s0
 801080e:	eeb0 7a67 	vmov.f32	s14, s15
 8010812:	2b00      	cmp	r3, #0
 8010814:	e7d9      	b.n	80107ca <scalbnf+0x4e>
 8010816:	3019      	adds	r0, #25
 8010818:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801081c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010820:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010844 <scalbnf+0xc8>
 8010824:	ee07 3a90 	vmov	s15, r3
 8010828:	e7d7      	b.n	80107da <scalbnf+0x5e>
 801082a:	bf00      	nop
 801082c:	ffff3cb0 	.word	0xffff3cb0
 8010830:	4c000000 	.word	0x4c000000
 8010834:	7149f2ca 	.word	0x7149f2ca
 8010838:	f149f2ca 	.word	0xf149f2ca
 801083c:	0da24260 	.word	0x0da24260
 8010840:	8da24260 	.word	0x8da24260
 8010844:	33000000 	.word	0x33000000

08010848 <with_errnof>:
 8010848:	b510      	push	{r4, lr}
 801084a:	ed2d 8b02 	vpush	{d8}
 801084e:	eeb0 8a40 	vmov.f32	s16, s0
 8010852:	4604      	mov	r4, r0
 8010854:	f7fe fb86 	bl	800ef64 <__errno>
 8010858:	eeb0 0a48 	vmov.f32	s0, s16
 801085c:	ecbd 8b02 	vpop	{d8}
 8010860:	6004      	str	r4, [r0, #0]
 8010862:	bd10      	pop	{r4, pc}

08010864 <xflowf>:
 8010864:	b130      	cbz	r0, 8010874 <xflowf+0x10>
 8010866:	eef1 7a40 	vneg.f32	s15, s0
 801086a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801086e:	2022      	movs	r0, #34	@ 0x22
 8010870:	f7ff bfea 	b.w	8010848 <with_errnof>
 8010874:	eef0 7a40 	vmov.f32	s15, s0
 8010878:	e7f7      	b.n	801086a <xflowf+0x6>
	...

0801087c <__math_uflowf>:
 801087c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010884 <__math_uflowf+0x8>
 8010880:	f7ff bff0 	b.w	8010864 <xflowf>
 8010884:	10000000 	.word	0x10000000

08010888 <__math_oflowf>:
 8010888:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010890 <__math_oflowf+0x8>
 801088c:	f7ff bfea 	b.w	8010864 <xflowf>
 8010890:	70000000 	.word	0x70000000

08010894 <__kernel_rem_pio2f>:
 8010894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	ed2d 8b04 	vpush	{d8-d9}
 801089c:	b0d9      	sub	sp, #356	@ 0x164
 801089e:	4690      	mov	r8, r2
 80108a0:	9001      	str	r0, [sp, #4]
 80108a2:	4ab6      	ldr	r2, [pc, #728]	@ (8010b7c <__kernel_rem_pio2f+0x2e8>)
 80108a4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80108a6:	f118 0f04 	cmn.w	r8, #4
 80108aa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80108ae:	460f      	mov	r7, r1
 80108b0:	f103 3bff 	add.w	fp, r3, #4294967295
 80108b4:	db26      	blt.n	8010904 <__kernel_rem_pio2f+0x70>
 80108b6:	f1b8 0203 	subs.w	r2, r8, #3
 80108ba:	bf48      	it	mi
 80108bc:	f108 0204 	addmi.w	r2, r8, #4
 80108c0:	10d2      	asrs	r2, r2, #3
 80108c2:	1c55      	adds	r5, r2, #1
 80108c4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80108c6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 80108ca:	00e8      	lsls	r0, r5, #3
 80108cc:	eba2 060b 	sub.w	r6, r2, fp
 80108d0:	9002      	str	r0, [sp, #8]
 80108d2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80108d6:	eb0a 0c0b 	add.w	ip, sl, fp
 80108da:	ac1c      	add	r4, sp, #112	@ 0x70
 80108dc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80108e0:	2000      	movs	r0, #0
 80108e2:	4560      	cmp	r0, ip
 80108e4:	dd10      	ble.n	8010908 <__kernel_rem_pio2f+0x74>
 80108e6:	a91c      	add	r1, sp, #112	@ 0x70
 80108e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80108ec:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80108f0:	2600      	movs	r6, #0
 80108f2:	4556      	cmp	r6, sl
 80108f4:	dc24      	bgt.n	8010940 <__kernel_rem_pio2f+0xac>
 80108f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80108fa:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 80108fe:	4684      	mov	ip, r0
 8010900:	2400      	movs	r4, #0
 8010902:	e016      	b.n	8010932 <__kernel_rem_pio2f+0x9e>
 8010904:	2200      	movs	r2, #0
 8010906:	e7dc      	b.n	80108c2 <__kernel_rem_pio2f+0x2e>
 8010908:	42c6      	cmn	r6, r0
 801090a:	bf5d      	ittte	pl
 801090c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010910:	ee07 1a90 	vmovpl	s15, r1
 8010914:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010918:	eef0 7a47 	vmovmi.f32	s15, s14
 801091c:	ece4 7a01 	vstmia	r4!, {s15}
 8010920:	3001      	adds	r0, #1
 8010922:	e7de      	b.n	80108e2 <__kernel_rem_pio2f+0x4e>
 8010924:	ecfe 6a01 	vldmia	lr!, {s13}
 8010928:	ed3c 7a01 	vldmdb	ip!, {s14}
 801092c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010930:	3401      	adds	r4, #1
 8010932:	455c      	cmp	r4, fp
 8010934:	ddf6      	ble.n	8010924 <__kernel_rem_pio2f+0x90>
 8010936:	ece9 7a01 	vstmia	r9!, {s15}
 801093a:	3601      	adds	r6, #1
 801093c:	3004      	adds	r0, #4
 801093e:	e7d8      	b.n	80108f2 <__kernel_rem_pio2f+0x5e>
 8010940:	a908      	add	r1, sp, #32
 8010942:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010946:	9104      	str	r1, [sp, #16]
 8010948:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801094a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8010b88 <__kernel_rem_pio2f+0x2f4>
 801094e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8010b84 <__kernel_rem_pio2f+0x2f0>
 8010952:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010956:	9203      	str	r2, [sp, #12]
 8010958:	4654      	mov	r4, sl
 801095a:	00a2      	lsls	r2, r4, #2
 801095c:	9205      	str	r2, [sp, #20]
 801095e:	aa58      	add	r2, sp, #352	@ 0x160
 8010960:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010964:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010968:	a944      	add	r1, sp, #272	@ 0x110
 801096a:	aa08      	add	r2, sp, #32
 801096c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010970:	4694      	mov	ip, r2
 8010972:	4626      	mov	r6, r4
 8010974:	2e00      	cmp	r6, #0
 8010976:	dc4c      	bgt.n	8010a12 <__kernel_rem_pio2f+0x17e>
 8010978:	4628      	mov	r0, r5
 801097a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801097e:	f7ff fefd 	bl	801077c <scalbnf>
 8010982:	eeb0 8a40 	vmov.f32	s16, s0
 8010986:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801098a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801098e:	f000 f9e9 	bl	8010d64 <floorf>
 8010992:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010996:	eea0 8a67 	vfms.f32	s16, s0, s15
 801099a:	2d00      	cmp	r5, #0
 801099c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80109a4:	ee17 9a90 	vmov	r9, s15
 80109a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109ac:	ee38 8a67 	vsub.f32	s16, s16, s15
 80109b0:	dd41      	ble.n	8010a36 <__kernel_rem_pio2f+0x1a2>
 80109b2:	f104 3cff 	add.w	ip, r4, #4294967295
 80109b6:	a908      	add	r1, sp, #32
 80109b8:	f1c5 0e08 	rsb	lr, r5, #8
 80109bc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80109c0:	fa46 f00e 	asr.w	r0, r6, lr
 80109c4:	4481      	add	r9, r0
 80109c6:	fa00 f00e 	lsl.w	r0, r0, lr
 80109ca:	1a36      	subs	r6, r6, r0
 80109cc:	f1c5 0007 	rsb	r0, r5, #7
 80109d0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80109d4:	4106      	asrs	r6, r0
 80109d6:	2e00      	cmp	r6, #0
 80109d8:	dd3c      	ble.n	8010a54 <__kernel_rem_pio2f+0x1c0>
 80109da:	f04f 0e00 	mov.w	lr, #0
 80109de:	f109 0901 	add.w	r9, r9, #1
 80109e2:	4670      	mov	r0, lr
 80109e4:	4574      	cmp	r4, lr
 80109e6:	dc68      	bgt.n	8010aba <__kernel_rem_pio2f+0x226>
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	dd03      	ble.n	80109f4 <__kernel_rem_pio2f+0x160>
 80109ec:	2d01      	cmp	r5, #1
 80109ee:	d074      	beq.n	8010ada <__kernel_rem_pio2f+0x246>
 80109f0:	2d02      	cmp	r5, #2
 80109f2:	d07d      	beq.n	8010af0 <__kernel_rem_pio2f+0x25c>
 80109f4:	2e02      	cmp	r6, #2
 80109f6:	d12d      	bne.n	8010a54 <__kernel_rem_pio2f+0x1c0>
 80109f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80109fc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010a00:	b340      	cbz	r0, 8010a54 <__kernel_rem_pio2f+0x1c0>
 8010a02:	4628      	mov	r0, r5
 8010a04:	9306      	str	r3, [sp, #24]
 8010a06:	f7ff feb9 	bl	801077c <scalbnf>
 8010a0a:	9b06      	ldr	r3, [sp, #24]
 8010a0c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010a10:	e020      	b.n	8010a54 <__kernel_rem_pio2f+0x1c0>
 8010a12:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010a16:	3e01      	subs	r6, #1
 8010a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a20:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010a24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010a28:	ecac 0a01 	vstmia	ip!, {s0}
 8010a2c:	ed30 0a01 	vldmdb	r0!, {s0}
 8010a30:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010a34:	e79e      	b.n	8010974 <__kernel_rem_pio2f+0xe0>
 8010a36:	d105      	bne.n	8010a44 <__kernel_rem_pio2f+0x1b0>
 8010a38:	1e60      	subs	r0, r4, #1
 8010a3a:	a908      	add	r1, sp, #32
 8010a3c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010a40:	11f6      	asrs	r6, r6, #7
 8010a42:	e7c8      	b.n	80109d6 <__kernel_rem_pio2f+0x142>
 8010a44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010a48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a50:	da31      	bge.n	8010ab6 <__kernel_rem_pio2f+0x222>
 8010a52:	2600      	movs	r6, #0
 8010a54:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5c:	f040 8098 	bne.w	8010b90 <__kernel_rem_pio2f+0x2fc>
 8010a60:	1e60      	subs	r0, r4, #1
 8010a62:	2200      	movs	r2, #0
 8010a64:	4550      	cmp	r0, sl
 8010a66:	da4b      	bge.n	8010b00 <__kernel_rem_pio2f+0x26c>
 8010a68:	2a00      	cmp	r2, #0
 8010a6a:	d065      	beq.n	8010b38 <__kernel_rem_pio2f+0x2a4>
 8010a6c:	3c01      	subs	r4, #1
 8010a6e:	ab08      	add	r3, sp, #32
 8010a70:	3d08      	subs	r5, #8
 8010a72:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d0f8      	beq.n	8010a6c <__kernel_rem_pio2f+0x1d8>
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010a80:	f7ff fe7c 	bl	801077c <scalbnf>
 8010a84:	1c63      	adds	r3, r4, #1
 8010a86:	aa44      	add	r2, sp, #272	@ 0x110
 8010a88:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010b88 <__kernel_rem_pio2f+0x2f4>
 8010a8c:	0099      	lsls	r1, r3, #2
 8010a8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a92:	4623      	mov	r3, r4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f280 80a9 	bge.w	8010bec <__kernel_rem_pio2f+0x358>
 8010a9a:	4623      	mov	r3, r4
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f2c0 80c7 	blt.w	8010c30 <__kernel_rem_pio2f+0x39c>
 8010aa2:	aa44      	add	r2, sp, #272	@ 0x110
 8010aa4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010aa8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010b80 <__kernel_rem_pio2f+0x2ec>
 8010aac:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	1ae2      	subs	r2, r4, r3
 8010ab4:	e0b1      	b.n	8010c1a <__kernel_rem_pio2f+0x386>
 8010ab6:	2602      	movs	r6, #2
 8010ab8:	e78f      	b.n	80109da <__kernel_rem_pio2f+0x146>
 8010aba:	f852 1b04 	ldr.w	r1, [r2], #4
 8010abe:	b948      	cbnz	r0, 8010ad4 <__kernel_rem_pio2f+0x240>
 8010ac0:	b121      	cbz	r1, 8010acc <__kernel_rem_pio2f+0x238>
 8010ac2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010ac6:	f842 1c04 	str.w	r1, [r2, #-4]
 8010aca:	2101      	movs	r1, #1
 8010acc:	f10e 0e01 	add.w	lr, lr, #1
 8010ad0:	4608      	mov	r0, r1
 8010ad2:	e787      	b.n	80109e4 <__kernel_rem_pio2f+0x150>
 8010ad4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010ad8:	e7f5      	b.n	8010ac6 <__kernel_rem_pio2f+0x232>
 8010ada:	f104 3cff 	add.w	ip, r4, #4294967295
 8010ade:	aa08      	add	r2, sp, #32
 8010ae0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010ae4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010ae8:	a908      	add	r1, sp, #32
 8010aea:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010aee:	e781      	b.n	80109f4 <__kernel_rem_pio2f+0x160>
 8010af0:	f104 3cff 	add.w	ip, r4, #4294967295
 8010af4:	aa08      	add	r2, sp, #32
 8010af6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010afa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010afe:	e7f3      	b.n	8010ae8 <__kernel_rem_pio2f+0x254>
 8010b00:	a908      	add	r1, sp, #32
 8010b02:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010b06:	3801      	subs	r0, #1
 8010b08:	430a      	orrs	r2, r1
 8010b0a:	e7ab      	b.n	8010a64 <__kernel_rem_pio2f+0x1d0>
 8010b0c:	3201      	adds	r2, #1
 8010b0e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010b12:	2e00      	cmp	r6, #0
 8010b14:	d0fa      	beq.n	8010b0c <__kernel_rem_pio2f+0x278>
 8010b16:	9905      	ldr	r1, [sp, #20]
 8010b18:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010b1c:	eb0d 0001 	add.w	r0, sp, r1
 8010b20:	18e6      	adds	r6, r4, r3
 8010b22:	a91c      	add	r1, sp, #112	@ 0x70
 8010b24:	f104 0c01 	add.w	ip, r4, #1
 8010b28:	384c      	subs	r0, #76	@ 0x4c
 8010b2a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010b2e:	4422      	add	r2, r4
 8010b30:	4562      	cmp	r2, ip
 8010b32:	da04      	bge.n	8010b3e <__kernel_rem_pio2f+0x2aa>
 8010b34:	4614      	mov	r4, r2
 8010b36:	e710      	b.n	801095a <__kernel_rem_pio2f+0xc6>
 8010b38:	9804      	ldr	r0, [sp, #16]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	e7e7      	b.n	8010b0e <__kernel_rem_pio2f+0x27a>
 8010b3e:	9903      	ldr	r1, [sp, #12]
 8010b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b44:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010b48:	9105      	str	r1, [sp, #20]
 8010b4a:	ee07 1a90 	vmov	s15, r1
 8010b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b52:	2400      	movs	r4, #0
 8010b54:	ece6 7a01 	vstmia	r6!, {s15}
 8010b58:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 8010b5c:	46b1      	mov	r9, r6
 8010b5e:	455c      	cmp	r4, fp
 8010b60:	dd04      	ble.n	8010b6c <__kernel_rem_pio2f+0x2d8>
 8010b62:	ece0 7a01 	vstmia	r0!, {s15}
 8010b66:	f10c 0c01 	add.w	ip, ip, #1
 8010b6a:	e7e1      	b.n	8010b30 <__kernel_rem_pio2f+0x29c>
 8010b6c:	ecfe 6a01 	vldmia	lr!, {s13}
 8010b70:	ed39 7a01 	vldmdb	r9!, {s14}
 8010b74:	3401      	adds	r4, #1
 8010b76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b7a:	e7f0      	b.n	8010b5e <__kernel_rem_pio2f+0x2ca>
 8010b7c:	08011350 	.word	0x08011350
 8010b80:	08011324 	.word	0x08011324
 8010b84:	43800000 	.word	0x43800000
 8010b88:	3b800000 	.word	0x3b800000
 8010b8c:	00000000 	.word	0x00000000
 8010b90:	9b02      	ldr	r3, [sp, #8]
 8010b92:	eeb0 0a48 	vmov.f32	s0, s16
 8010b96:	eba3 0008 	sub.w	r0, r3, r8
 8010b9a:	f7ff fdef 	bl	801077c <scalbnf>
 8010b9e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010b84 <__kernel_rem_pio2f+0x2f0>
 8010ba2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010baa:	db19      	blt.n	8010be0 <__kernel_rem_pio2f+0x34c>
 8010bac:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010b88 <__kernel_rem_pio2f+0x2f4>
 8010bb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010bb4:	aa08      	add	r2, sp, #32
 8010bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bba:	3508      	adds	r5, #8
 8010bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bc0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010bcc:	ee10 3a10 	vmov	r3, s0
 8010bd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010bd4:	ee17 3a90 	vmov	r3, s15
 8010bd8:	3401      	adds	r4, #1
 8010bda:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010bde:	e74c      	b.n	8010a7a <__kernel_rem_pio2f+0x1e6>
 8010be0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010be4:	aa08      	add	r2, sp, #32
 8010be6:	ee10 3a10 	vmov	r3, s0
 8010bea:	e7f6      	b.n	8010bda <__kernel_rem_pio2f+0x346>
 8010bec:	a808      	add	r0, sp, #32
 8010bee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010bf2:	9001      	str	r0, [sp, #4]
 8010bf4:	ee07 0a90 	vmov	s15, r0
 8010bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010c02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010c06:	ed62 7a01 	vstmdb	r2!, {s15}
 8010c0a:	e743      	b.n	8010a94 <__kernel_rem_pio2f+0x200>
 8010c0c:	ecfc 6a01 	vldmia	ip!, {s13}
 8010c10:	ecb5 7a01 	vldmia	r5!, {s14}
 8010c14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010c18:	3001      	adds	r0, #1
 8010c1a:	4550      	cmp	r0, sl
 8010c1c:	dc01      	bgt.n	8010c22 <__kernel_rem_pio2f+0x38e>
 8010c1e:	4290      	cmp	r0, r2
 8010c20:	ddf4      	ble.n	8010c0c <__kernel_rem_pio2f+0x378>
 8010c22:	a858      	add	r0, sp, #352	@ 0x160
 8010c24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010c28:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	e735      	b.n	8010a9c <__kernel_rem_pio2f+0x208>
 8010c30:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010c32:	2b02      	cmp	r3, #2
 8010c34:	dc09      	bgt.n	8010c4a <__kernel_rem_pio2f+0x3b6>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	dc27      	bgt.n	8010c8a <__kernel_rem_pio2f+0x3f6>
 8010c3a:	d040      	beq.n	8010cbe <__kernel_rem_pio2f+0x42a>
 8010c3c:	f009 0007 	and.w	r0, r9, #7
 8010c40:	b059      	add	sp, #356	@ 0x164
 8010c42:	ecbd 8b04 	vpop	{d8-d9}
 8010c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d1f5      	bne.n	8010c3c <__kernel_rem_pio2f+0x3a8>
 8010c50:	aa30      	add	r2, sp, #192	@ 0xc0
 8010c52:	1f0b      	subs	r3, r1, #4
 8010c54:	4413      	add	r3, r2
 8010c56:	461a      	mov	r2, r3
 8010c58:	4620      	mov	r0, r4
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	dc50      	bgt.n	8010d00 <__kernel_rem_pio2f+0x46c>
 8010c5e:	4622      	mov	r2, r4
 8010c60:	2a01      	cmp	r2, #1
 8010c62:	dc5d      	bgt.n	8010d20 <__kernel_rem_pio2f+0x48c>
 8010c64:	ab30      	add	r3, sp, #192	@ 0xc0
 8010c66:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 8010c6a:	440b      	add	r3, r1
 8010c6c:	2c01      	cmp	r4, #1
 8010c6e:	dc67      	bgt.n	8010d40 <__kernel_rem_pio2f+0x4ac>
 8010c70:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010c74:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010c78:	2e00      	cmp	r6, #0
 8010c7a:	d167      	bne.n	8010d4c <__kernel_rem_pio2f+0x4b8>
 8010c7c:	edc7 6a00 	vstr	s13, [r7]
 8010c80:	ed87 7a01 	vstr	s14, [r7, #4]
 8010c84:	edc7 7a02 	vstr	s15, [r7, #8]
 8010c88:	e7d8      	b.n	8010c3c <__kernel_rem_pio2f+0x3a8>
 8010c8a:	ab30      	add	r3, sp, #192	@ 0xc0
 8010c8c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 8010c90:	440b      	add	r3, r1
 8010c92:	4622      	mov	r2, r4
 8010c94:	2a00      	cmp	r2, #0
 8010c96:	da24      	bge.n	8010ce2 <__kernel_rem_pio2f+0x44e>
 8010c98:	b34e      	cbz	r6, 8010cee <__kernel_rem_pio2f+0x45a>
 8010c9a:	eef1 7a47 	vneg.f32	s15, s14
 8010c9e:	edc7 7a00 	vstr	s15, [r7]
 8010ca2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010caa:	aa31      	add	r2, sp, #196	@ 0xc4
 8010cac:	2301      	movs	r3, #1
 8010cae:	429c      	cmp	r4, r3
 8010cb0:	da20      	bge.n	8010cf4 <__kernel_rem_pio2f+0x460>
 8010cb2:	b10e      	cbz	r6, 8010cb8 <__kernel_rem_pio2f+0x424>
 8010cb4:	eef1 7a67 	vneg.f32	s15, s15
 8010cb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8010cbc:	e7be      	b.n	8010c3c <__kernel_rem_pio2f+0x3a8>
 8010cbe:	ab30      	add	r3, sp, #192	@ 0xc0
 8010cc0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8010b8c <__kernel_rem_pio2f+0x2f8>
 8010cc4:	440b      	add	r3, r1
 8010cc6:	2c00      	cmp	r4, #0
 8010cc8:	da05      	bge.n	8010cd6 <__kernel_rem_pio2f+0x442>
 8010cca:	b10e      	cbz	r6, 8010cd0 <__kernel_rem_pio2f+0x43c>
 8010ccc:	eef1 7a67 	vneg.f32	s15, s15
 8010cd0:	edc7 7a00 	vstr	s15, [r7]
 8010cd4:	e7b2      	b.n	8010c3c <__kernel_rem_pio2f+0x3a8>
 8010cd6:	ed33 7a01 	vldmdb	r3!, {s14}
 8010cda:	3c01      	subs	r4, #1
 8010cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ce0:	e7f1      	b.n	8010cc6 <__kernel_rem_pio2f+0x432>
 8010ce2:	ed73 7a01 	vldmdb	r3!, {s15}
 8010ce6:	3a01      	subs	r2, #1
 8010ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010cec:	e7d2      	b.n	8010c94 <__kernel_rem_pio2f+0x400>
 8010cee:	eef0 7a47 	vmov.f32	s15, s14
 8010cf2:	e7d4      	b.n	8010c9e <__kernel_rem_pio2f+0x40a>
 8010cf4:	ecb2 7a01 	vldmia	r2!, {s14}
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cfe:	e7d6      	b.n	8010cae <__kernel_rem_pio2f+0x41a>
 8010d00:	ed72 7a01 	vldmdb	r2!, {s15}
 8010d04:	edd2 6a01 	vldr	s13, [r2, #4]
 8010d08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d0c:	3801      	subs	r0, #1
 8010d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d12:	ed82 7a00 	vstr	s14, [r2]
 8010d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d1a:	edc2 7a01 	vstr	s15, [r2, #4]
 8010d1e:	e79c      	b.n	8010c5a <__kernel_rem_pio2f+0x3c6>
 8010d20:	ed73 7a01 	vldmdb	r3!, {s15}
 8010d24:	edd3 6a01 	vldr	s13, [r3, #4]
 8010d28:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d2c:	3a01      	subs	r2, #1
 8010d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d32:	ed83 7a00 	vstr	s14, [r3]
 8010d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d3a:	edc3 7a01 	vstr	s15, [r3, #4]
 8010d3e:	e78f      	b.n	8010c60 <__kernel_rem_pio2f+0x3cc>
 8010d40:	ed33 7a01 	vldmdb	r3!, {s14}
 8010d44:	3c01      	subs	r4, #1
 8010d46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d4a:	e78f      	b.n	8010c6c <__kernel_rem_pio2f+0x3d8>
 8010d4c:	eef1 6a66 	vneg.f32	s13, s13
 8010d50:	eeb1 7a47 	vneg.f32	s14, s14
 8010d54:	edc7 6a00 	vstr	s13, [r7]
 8010d58:	ed87 7a01 	vstr	s14, [r7, #4]
 8010d5c:	eef1 7a67 	vneg.f32	s15, s15
 8010d60:	e790      	b.n	8010c84 <__kernel_rem_pio2f+0x3f0>
 8010d62:	bf00      	nop

08010d64 <floorf>:
 8010d64:	ee10 3a10 	vmov	r3, s0
 8010d68:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d6c:	3a7f      	subs	r2, #127	@ 0x7f
 8010d6e:	2a16      	cmp	r2, #22
 8010d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010d74:	dc2b      	bgt.n	8010dce <floorf+0x6a>
 8010d76:	2a00      	cmp	r2, #0
 8010d78:	da12      	bge.n	8010da0 <floorf+0x3c>
 8010d7a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010de0 <floorf+0x7c>
 8010d7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010d82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8a:	dd06      	ble.n	8010d9a <floorf+0x36>
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	da24      	bge.n	8010dda <floorf+0x76>
 8010d90:	2900      	cmp	r1, #0
 8010d92:	4b14      	ldr	r3, [pc, #80]	@ (8010de4 <floorf+0x80>)
 8010d94:	bf08      	it	eq
 8010d96:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010d9a:	ee00 3a10 	vmov	s0, r3
 8010d9e:	4770      	bx	lr
 8010da0:	4911      	ldr	r1, [pc, #68]	@ (8010de8 <floorf+0x84>)
 8010da2:	4111      	asrs	r1, r2
 8010da4:	420b      	tst	r3, r1
 8010da6:	d0fa      	beq.n	8010d9e <floorf+0x3a>
 8010da8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010de0 <floorf+0x7c>
 8010dac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010db0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db8:	ddef      	ble.n	8010d9a <floorf+0x36>
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	bfbe      	ittt	lt
 8010dbe:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010dc2:	fa40 f202 	asrlt.w	r2, r0, r2
 8010dc6:	189b      	addlt	r3, r3, r2
 8010dc8:	ea23 0301 	bic.w	r3, r3, r1
 8010dcc:	e7e5      	b.n	8010d9a <floorf+0x36>
 8010dce:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010dd2:	d3e4      	bcc.n	8010d9e <floorf+0x3a>
 8010dd4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010dd8:	4770      	bx	lr
 8010dda:	2300      	movs	r3, #0
 8010ddc:	e7dd      	b.n	8010d9a <floorf+0x36>
 8010dde:	bf00      	nop
 8010de0:	7149f2ca 	.word	0x7149f2ca
 8010de4:	bf800000 	.word	0xbf800000
 8010de8:	007fffff 	.word	0x007fffff

08010dec <_init>:
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	bf00      	nop
 8010df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010df2:	bc08      	pop	{r3}
 8010df4:	469e      	mov	lr, r3
 8010df6:	4770      	bx	lr

08010df8 <_fini>:
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	bf00      	nop
 8010dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dfe:	bc08      	pop	{r3}
 8010e00:	469e      	mov	lr, r3
 8010e02:	4770      	bx	lr
