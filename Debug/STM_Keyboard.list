
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a298  0800a298  0000b298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f0  0800a2f0  0000c168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a2f0  0800a2f0  0000c168  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a2f0  0800a2f0  0000c168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f0  0800a2f0  0000b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2f4  0800a2f4  0000b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800a2f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000168  0800a460  0000c168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c6c  0800a460  0000cc6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9ec  00000000  00000000  0000c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004530  00000000  00000000  00028b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0002d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a4  00000000  00000000  0002ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023970  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215be  00000000  00000000  000539c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd127  00000000  00000000  00074f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001520a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000717c  00000000  00000000  001520ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00159268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a280 	.word	0x0800a280

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800a280 	.word	0x0800a280

08000218 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	@ 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f009 fff9 	bl	800a228 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b39      	ldr	r3, [pc, #228]	@ (800031c <MX_ADC1_Init+0x104>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800023e:	4b37      	ldr	r3, [pc, #220]	@ (800031c <MX_ADC1_Init+0x104>)
 8000240:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000246:	4b35      	ldr	r3, [pc, #212]	@ (800031c <MX_ADC1_Init+0x104>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b33      	ldr	r3, [pc, #204]	@ (800031c <MX_ADC1_Init+0x104>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b32      	ldr	r3, [pc, #200]	@ (800031c <MX_ADC1_Init+0x104>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000258:	4b30      	ldr	r3, [pc, #192]	@ (800031c <MX_ADC1_Init+0x104>)
 800025a:	2201      	movs	r2, #1
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b2f      	ldr	r3, [pc, #188]	@ (800031c <MX_ADC1_Init+0x104>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b2d      	ldr	r3, [pc, #180]	@ (800031c <MX_ADC1_Init+0x104>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800026a:	4b2c      	ldr	r3, [pc, #176]	@ (800031c <MX_ADC1_Init+0x104>)
 800026c:	2201      	movs	r2, #1
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000270:	4b2a      	ldr	r3, [pc, #168]	@ (800031c <MX_ADC1_Init+0x104>)
 8000272:	2202      	movs	r2, #2
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b29      	ldr	r3, [pc, #164]	@ (800031c <MX_ADC1_Init+0x104>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027e:	4b27      	ldr	r3, [pc, #156]	@ (800031c <MX_ADC1_Init+0x104>)
 8000280:	2200      	movs	r2, #0
 8000282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000284:	4b25      	ldr	r3, [pc, #148]	@ (800031c <MX_ADC1_Init+0x104>)
 8000286:	2200      	movs	r2, #0
 8000288:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800028a:	4b24      	ldr	r3, [pc, #144]	@ (800031c <MX_ADC1_Init+0x104>)
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000292:	4b22      	ldr	r3, [pc, #136]	@ (800031c <MX_ADC1_Init+0x104>)
 8000294:	2200      	movs	r2, #0
 8000296:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b20      	ldr	r3, [pc, #128]	@ (800031c <MX_ADC1_Init+0x104>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	481e      	ldr	r0, [pc, #120]	@ (800031c <MX_ADC1_Init+0x104>)
 80002a2:	f001 fa07 	bl	80016b4 <HAL_ADC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80002ac:	f000 fb5d 	bl	800096a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002b8:	4619      	mov	r1, r3
 80002ba:	4818      	ldr	r0, [pc, #96]	@ (800031c <MX_ADC1_Init+0x104>)
 80002bc:	f001 ff94 	bl	80021e8 <HAL_ADCEx_MultiModeConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002c6:	f000 fb50 	bl	800096a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <MX_ADC1_Init+0x108>)
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ce:	2306      	movs	r3, #6
 80002d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002d6:	237f      	movs	r3, #127	@ 0x7f
 80002d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002da:	2304      	movs	r3, #4
 80002dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_ADC1_Init+0x104>)
 80002e8:	f001 fb68 	bl	80019bc <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002f2:	f000 fb3a 	bl	800096a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_ADC1_Init+0x10c>)
 80002f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002fa:	230c      	movs	r3, #12
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	4806      	ldr	r0, [pc, #24]	@ (800031c <MX_ADC1_Init+0x104>)
 8000304:	f001 fb5a 	bl	80019bc <HAL_ADC_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800030e:	f000 fb2c 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	3730      	adds	r7, #48	@ 0x30
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000184 	.word	0x20000184
 8000320:	0c900008 	.word	0x0c900008
 8000324:	10c00010 	.word	0x10c00010

08000328 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	463b      	mov	r3, r7
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f009 ff77 	bl	800a228 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800033a:	4b32      	ldr	r3, [pc, #200]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800033c:	4a32      	ldr	r2, [pc, #200]	@ (8000408 <MX_ADC2_Init+0xe0>)
 800033e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000340:	4b30      	ldr	r3, [pc, #192]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000342:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000346:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000348:	4b2e      	ldr	r3, [pc, #184]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b2d      	ldr	r3, [pc, #180]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000354:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800035a:	4b2a      	ldr	r3, [pc, #168]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800035c:	2201      	movs	r2, #1
 800035e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000362:	2204      	movs	r2, #4
 8000364:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000366:	4b27      	ldr	r3, [pc, #156]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000368:	2200      	movs	r2, #0
 800036a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800036c:	4b25      	ldr	r3, [pc, #148]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800036e:	2201      	movs	r2, #1
 8000370:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000372:	4b24      	ldr	r3, [pc, #144]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000374:	2202      	movs	r2, #2
 8000376:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b22      	ldr	r3, [pc, #136]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b20      	ldr	r3, [pc, #128]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000382:	2200      	movs	r2, #0
 8000384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000386:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800038c:	4b1d      	ldr	r3, [pc, #116]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800038e:	2200      	movs	r2, #0
 8000390:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000394:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000396:	2200      	movs	r2, #0
 8000398:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800039c:	2200      	movs	r2, #0
 800039e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003a2:	4818      	ldr	r0, [pc, #96]	@ (8000404 <MX_ADC2_Init+0xdc>)
 80003a4:	f001 f986 	bl	80016b4 <HAL_ADC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80003ae:	f000 fadc 	bl	800096a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_ADC2_Init+0xe4>)
 80003b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b6:	2306      	movs	r3, #6
 80003b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003be:	237f      	movs	r3, #127	@ 0x7f
 80003c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c2:	2304      	movs	r3, #4
 80003c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	480d      	ldr	r0, [pc, #52]	@ (8000404 <MX_ADC2_Init+0xdc>)
 80003d0:	f001 faf4 	bl	80019bc <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80003da:	f000 fac6 	bl	800096a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_ADC2_Init+0xe8>)
 80003e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e2:	230c      	movs	r3, #12
 80003e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	4619      	mov	r1, r3
 80003ea:	4806      	ldr	r0, [pc, #24]	@ (8000404 <MX_ADC2_Init+0xdc>)
 80003ec:	f001 fae6 	bl	80019bc <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80003f6:	f000 fab8 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200001f0 	.word	0x200001f0
 8000408:	50000100 	.word	0x50000100
 800040c:	04300002 	.word	0x04300002
 8000410:	08600004 	.word	0x08600004

08000414 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09c      	sub	sp, #112	@ 0x70
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	2244      	movs	r2, #68	@ 0x44
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f009 fef7 	bl	800a228 <memset>
  if(adcHandle->Instance==ADC1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000442:	d169      	bne.n	8000518 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800044a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800044e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f004 ff95 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000460:	f000 fa83 	bl	800096a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000464:	4b65      	ldr	r3, [pc, #404]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a64      	ldr	r2, [pc, #400]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 800046c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800046e:	4b63      	ldr	r3, [pc, #396]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d10b      	bne.n	800048e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000476:	4b62      	ldr	r3, [pc, #392]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	4a61      	ldr	r2, [pc, #388]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800047c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000482:	4b5f      	ldr	r3, [pc, #380]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b5c      	ldr	r3, [pc, #368]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a5b      	ldr	r2, [pc, #364]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049a:	4b59      	ldr	r3, [pc, #356]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004a6:	230c      	movs	r3, #12
 80004a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004aa:	2303      	movs	r3, #3
 80004ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004bc:	f002 fa02 	bl	80028c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004c0:	4b50      	ldr	r3, [pc, #320]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004c2:	4a51      	ldr	r2, [pc, #324]	@ (8000608 <HAL_ADC_MspInit+0x1f4>)
 80004c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80004c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004de:	4b49      	ldr	r3, [pc, #292]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004e6:	4b47      	ldr	r3, [pc, #284]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004ee:	4b45      	ldr	r3, [pc, #276]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004f0:	2220      	movs	r2, #32
 80004f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004f4:	4b43      	ldr	r3, [pc, #268]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004fa:	4842      	ldr	r0, [pc, #264]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004fc:	f002 f828 	bl	8002550 <HAL_DMA_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000506:	f000 fa30 	bl	800096a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a3d      	ldr	r2, [pc, #244]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 800050e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000510:	4a3c      	ldr	r2, [pc, #240]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000516:	e06d      	b.n	80005f4 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a3b      	ldr	r2, [pc, #236]	@ (800060c <HAL_ADC_MspInit+0x1f8>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d168      	bne.n	80005f4 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000526:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000528:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	4618      	mov	r0, r3
 8000534:	f004 ff26 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800053e:	f000 fa14 	bl	800096a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000542:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a2c      	ldr	r2, [pc, #176]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 800054a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800054c:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d10b      	bne.n	800056c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000558:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800055a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800055e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000570:	4a23      	ldr	r2, [pc, #140]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000578:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000584:	2303      	movs	r3, #3
 8000586:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000588:	2303      	movs	r3, #3
 800058a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f002 f993 	bl	80028c4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <HAL_ADC_MspInit+0x200>)
 80005a2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005a6:	2224      	movs	r2, #36	@ 0x24
 80005a8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005bc:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005c2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005ce:	2220      	movs	r2, #32
 80005d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80005d8:	480d      	ldr	r0, [pc, #52]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005da:	f001 ffb9 	bl	8002550 <HAL_DMA_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80005e4:	f000 f9c1 	bl	800096a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80005f4:	bf00      	nop
 80005f6:	3770      	adds	r7, #112	@ 0x70
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000031c 	.word	0x2000031c
 8000600:	40021000 	.word	0x40021000
 8000604:	2000025c 	.word	0x2000025c
 8000608:	40020008 	.word	0x40020008
 800060c:	50000100 	.word	0x50000100
 8000610:	200002bc 	.word	0x200002bc
 8000614:	4002001c 	.word	0x4002001c

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_DMA_Init+0x60>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000622:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <MX_DMA_Init+0x60>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6493      	str	r3, [r2, #72]	@ 0x48
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_DMA_Init+0x60>)
 800062c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_DMA_Init+0x60>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800063a:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <MX_DMA_Init+0x60>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6493      	str	r3, [r2, #72]	@ 0x48
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_DMA_Init+0x60>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200b      	movs	r0, #11
 8000654:	f001 ff47 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000658:	200b      	movs	r0, #11
 800065a:	f001 ff5e 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200c      	movs	r0, #12
 8000664:	f001 ff3f 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000668:	200c      	movs	r0, #12
 800066a:	f001 ff56 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <MX_GPIO_Init+0xa8>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a23      	ldr	r2, [pc, #140]	@ (8000724 <MX_GPIO_Init+0xa8>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006b0:	f043 0320 	orr.w	r3, r3, #32
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0320 	and.w	r3, r3, #32
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	4a17      	ldr	r2, [pc, #92]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_GPIO_Init+0xa8>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <MX_GPIO_Init+0xac>)
 80006fa:	f002 fa65 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 80006fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_GPIO_Init+0xac>)
 8000718:	f002 f8d4 	bl	80028c4 <HAL_GPIO_Init>

}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	@ 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800

0800072c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f002 fa46 	bl	8002bf8 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f8fa 	bl	800096a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f002 fad8 	bl	8002d2e <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f8f1 	bl	800096a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f002 fb1a 	bl	8002dc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f8e8 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000320 	.word	0x20000320
 80007a4:	40005400 	.word	0x40005400
 80007a8:	40621236 	.word	0x40621236

080007ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	@ 0x70
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	2244      	movs	r2, #68	@ 0x44
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f009 fd2b 	bl	800a228 <memset>
  if(i2cHandle->Instance==I2C1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000890 <HAL_I2C_MspInit+0xe4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d154      	bne.n	8000886 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007dc:	2340      	movs	r3, #64	@ 0x40
 80007de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fdcb 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f000 f8b9 	bl	800096a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000804:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000814:	4a1f      	ldr	r2, [pc, #124]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081c:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000828:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800082c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082e:	2312      	movs	r3, #18
 8000830:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083a:	2304      	movs	r3, #4
 800083c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f002 f83c 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 800084c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000850:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000852:	2312      	movs	r3, #18
 8000854:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085e:	2304      	movs	r3, #4
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	@ (8000898 <HAL_I2C_MspInit+0xec>)
 800086a:	f002 f82b 	bl	80028c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 8000874:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000878:	6593      	str	r3, [r2, #88]	@ 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_I2C_MspInit+0xe8>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000886:	bf00      	nop
 8000888:	3770      	adds	r7, #112	@ 0x70
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40005400 	.word	0x40005400
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fcc1 	bl	8001226 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f816 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f7ff fee8 	bl	800067c <MX_GPIO_Init>
  MX_DMA_Init();
 80008ac:	f7ff feb4 	bl	8000618 <MX_DMA_Init>
  MX_ADC1_Init();
 80008b0:	f7ff fcb2 	bl	8000218 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008b4:	f7ff fd38 	bl	8000328 <MX_ADC2_Init>
  MX_I2C1_Init();
 80008b8:	f7ff ff38 	bl	800072c <MX_I2C1_Init>
  MX_TIM1_Init();
 80008bc:	f000 f8e0 	bl	8000a80 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008c0:	f000 f9a6 	bl	8000c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008c4:	f000 fa30 	bl	8000d28 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008c8:	f000 fabc 	bl	8000e44 <MX_TIM4_Init>
  MX_USB_Device_Init();
 80008cc:	f009 f896 	bl	80099fc <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <main+0x34>

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2238      	movs	r2, #56	@ 0x38
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 fca0 	bl	800a228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f003 ff9a 	bl	8004830 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008fc:	2321      	movs	r3, #33	@ 0x21
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000900:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000904:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000906:	2301      	movs	r3, #1
 8000908:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2303      	movs	r3, #3
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000916:	2355      	movs	r3, #85	@ 0x55
 8000918:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800091e:	2306      	movs	r3, #6
 8000920:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f834 	bl	8004998 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000936:	f000 f818 	bl	800096a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2104      	movs	r1, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fb32 	bl	8004fbc <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800095e:	f000 f804 	bl	800096a <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	@ 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096e:	b672      	cpsid	i
}
 8000970:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000972:	bf00      	nop
 8000974:	e7fd      	b.n	8000972 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000982:	4a0e      	ldr	r2, [pc, #56]	@ (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	@ 0x60
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099a:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ae:	f003 ffe3 	bl	8004978 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 fc59 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DMA1_Channel1_IRQHandler+0x10>)
 8000a26:	f001 fe3b 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000025c 	.word	0x2000025c

08000a34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <DMA1_Channel2_IRQHandler+0x10>)
 8000a3a:	f001 fe31 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002bc 	.word	0x200002bc

08000a48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <USB_LP_IRQHandler+0x10>)
 8000a4e:	f002 faf5 	bl	800303c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000097c 	.word	0x2000097c

08000a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	@ 0x70
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2234      	movs	r2, #52	@ 0x34
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f009 fbb4 	bl	800a228 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac0:	4b51      	ldr	r3, [pc, #324]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ac2:	4a52      	ldr	r2, [pc, #328]	@ (8000c0c <MX_TIM1_Init+0x18c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ac6:	4b50      	ldr	r3, [pc, #320]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b4e      	ldr	r3, [pc, #312]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b4b      	ldr	r3, [pc, #300]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b49      	ldr	r3, [pc, #292]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b48      	ldr	r3, [pc, #288]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aec:	4846      	ldr	r0, [pc, #280]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000aee:	f004 fe39 	bl	8005764 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f7ff ff37 	bl	800096a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b06:	4619      	mov	r1, r3
 8000b08:	483f      	ldr	r0, [pc, #252]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000b0a:	f004 fff7 	bl	8005afc <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b14:	f7ff ff29 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b18:	483b      	ldr	r0, [pc, #236]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000b1a:	f004 fe7a 	bl	8005812 <HAL_TIM_PWM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b24:	f7ff ff21 	bl	800096a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000b3c:	f005 fd06 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b46:	f7ff ff10 	bl	800096a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4a:	2360      	movs	r3, #96	@ 0x60
 8000b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000b70:	f004 feb0 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b7a:	f7ff fef6 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b82:	2204      	movs	r2, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4820      	ldr	r0, [pc, #128]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000b88:	f004 fea4 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000b92:	f7ff feea 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481a      	ldr	r0, [pc, #104]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000ba0:	f004 fe98 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000baa:	f7ff fede 	bl	800096a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000bec:	f005 fd30 	bl	8006650 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000bf6:	f7ff feb8 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bfa:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <MX_TIM1_Init+0x188>)
 8000bfc:	f000 fa0a 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000c00:	bf00      	nop
 8000c02:	3770      	adds	r7, #112	@ 0x70
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000374 	.word	0x20000374
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	@ 0x38
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c42:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c4a:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b34      	ldr	r3, [pc, #208]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c56:	4b33      	ldr	r3, [pc, #204]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c6a:	482e      	ldr	r0, [pc, #184]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c6c:	f004 fd7a 	bl	8005764 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c76:	f7ff fe78 	bl	800096a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4827      	ldr	r0, [pc, #156]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c88:	f004 ff38 	bl	8005afc <HAL_TIM_ConfigClockSource>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c92:	f7ff fe6a 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c96:	4823      	ldr	r0, [pc, #140]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000c98:	f004 fdbb 	bl	8005812 <HAL_TIM_PWM_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ca2:	f7ff fe62 	bl	800096a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481b      	ldr	r0, [pc, #108]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000cb6:	f005 fc49 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cc0:	f7ff fe53 	bl	800096a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc4:	2360      	movs	r3, #96	@ 0x60
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000cdc:	f004 fdfa 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ce6:	f7ff fe40 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	2204      	movs	r2, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000cf2:	f004 fdef 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000cfc:	f7ff fe35 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	2208      	movs	r2, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000d08:	f004 fde4 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000d12:	f7ff fe2a 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d16:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <MX_TIM2_Init+0x114>)
 8000d18:	f000 f97c 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	@ 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200003c0 	.word	0x200003c0

08000d28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	@ 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d5c:	4a38      	ldr	r2, [pc, #224]	@ (8000e40 <MX_TIM3_Init+0x118>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d60:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b35      	ldr	r3, [pc, #212]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d6c:	4b33      	ldr	r3, [pc, #204]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d80:	482e      	ldr	r0, [pc, #184]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d82:	f004 fcef 	bl	8005764 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d8c:	f7ff fded 	bl	800096a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4827      	ldr	r0, [pc, #156]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000d9e:	f004 fead 	bl	8005afc <HAL_TIM_ConfigClockSource>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000da8:	f7ff fddf 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dac:	4823      	ldr	r0, [pc, #140]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000dae:	f004 fd30 	bl	8005812 <HAL_TIM_PWM_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000db8:	f7ff fdd7 	bl	800096a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481c      	ldr	r0, [pc, #112]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000dcc:	f005 fbbe 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dd6:	f7ff fdc8 	bl	800096a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dda:	2360      	movs	r3, #96	@ 0x60
 8000ddc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000df2:	f004 fd6f 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000dfc:	f7ff fdb5 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e00:	463b      	mov	r3, r7
 8000e02:	2204      	movs	r2, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000e08:	f004 fd64 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000e12:	f7ff fdaa 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	2208      	movs	r2, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000e1e:	f004 fd59 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000e28:	f7ff fd9f 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <MX_TIM3_Init+0x114>)
 8000e2e:	f000 f8f1 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000e32:	bf00      	nop
 8000e34:	3738      	adds	r7, #56	@ 0x38
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000040c 	.word	0x2000040c
 8000e40:	40000400 	.word	0x40000400

08000e44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	@ 0x38
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e76:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e78:	4a38      	ldr	r2, [pc, #224]	@ (8000f5c <MX_TIM4_Init+0x118>)
 8000e7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e7c:	4b36      	ldr	r3, [pc, #216]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e88:	4b33      	ldr	r3, [pc, #204]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e9c:	482e      	ldr	r0, [pc, #184]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000e9e:	f004 fc61 	bl	8005764 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ea8:	f7ff fd5f 	bl	800096a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4827      	ldr	r0, [pc, #156]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000eba:	f004 fe1f 	bl	8005afc <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ec4:	f7ff fd51 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ec8:	4823      	ldr	r0, [pc, #140]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000eca:	f004 fca2 	bl	8005812 <HAL_TIM_PWM_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ed4:	f7ff fd49 	bl	800096a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481c      	ldr	r0, [pc, #112]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000ee8:	f005 fb30 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ef2:	f7ff fd3a 	bl	800096a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	@ 0x60
 8000ef8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000f0e:	f004 fce1 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f18:	f7ff fd27 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000f24:	f004 fcd6 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f2e:	f7ff fd1c 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000f3a:	f004 fccb 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000f44:	f7ff fd11 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <MX_TIM4_Init+0x114>)
 8000f4a:	f000 f863 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000f4e:	bf00      	nop
 8000f50:	3738      	adds	r7, #56	@ 0x38
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000458 	.word	0x20000458
 8000f5c:	40000800 	.word	0x40000800

08000f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a25      	ldr	r2, [pc, #148]	@ (8001004 <HAL_TIM_Base_MspInit+0xa4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10c      	bne.n	8000f8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f7e:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f8a:	e034      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
}
 8000fae:	e022      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	@ (800100c <HAL_TIM_Base_MspInit+0xac>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	e010      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <HAL_TIM_Base_MspInit+0xb0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	4a09      	ldr	r2, [pc, #36]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <HAL_TIM_Base_MspInit+0xa8>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40012c00 	.word	0x40012c00
 8001008:	40021000 	.word	0x40021000
 800100c:	40000400 	.word	0x40000400
 8001010:	40000800 	.word	0x40000800

08001014 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	@ 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a63      	ldr	r2, [pc, #396]	@ (80011c0 <HAL_TIM_MspPostInit+0x1ac>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d11e      	bne.n	8001074 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a62      	ldr	r2, [pc, #392]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Key1_R_Pin|Key1_G_Pin|Key1_B_Pin;
 800104e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001060:	2306      	movs	r3, #6
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f001 fc29 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001072:	e0a0      	b.n	80011b6 <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800107c:	d13a      	bne.n	80010f4 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b51      	ldr	r3, [pc, #324]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a50      	ldr	r2, [pc, #320]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b4b      	ldr	r3, [pc, #300]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	4a4a      	ldr	r2, [pc, #296]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a2:	4b48      	ldr	r3, [pc, #288]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Key2_R_Pin;
 80010ae:	2320      	movs	r3, #32
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010be:	2301      	movs	r3, #1
 80010c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Key2_R_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010cc:	f001 fbfa 	bl	80028c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Key2_B_Pin|Key2_G_Pin;
 80010d0:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e2:	2301      	movs	r3, #1
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4836      	ldr	r0, [pc, #216]	@ (80011c8 <HAL_TIM_MspPostInit+0x1b4>)
 80010ee:	f001 fbe9 	bl	80028c4 <HAL_GPIO_Init>
}
 80010f2:	e060      	b.n	80011b6 <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <HAL_TIM_MspPostInit+0x1b8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d139      	bne.n	8001172 <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a30      	ldr	r2, [pc, #192]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a2a      	ldr	r2, [pc, #168]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Key3_G_Pin|Key3_R_Pin;
 800112e:	2350      	movs	r3, #80	@ 0x50
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800113e:	2302      	movs	r3, #2
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f001 fbba 	bl	80028c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Key3_B_Pin;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Key3_B_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4817      	ldr	r0, [pc, #92]	@ (80011c8 <HAL_TIM_MspPostInit+0x1b4>)
 800116c:	f001 fbaa 	bl	80028c4 <HAL_GPIO_Init>
}
 8001170:	e021      	b.n	80011b6 <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a16      	ldr	r2, [pc, #88]	@ (80011d0 <HAL_TIM_MspPostInit+0x1bc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d11c      	bne.n	80011b6 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	4a10      	ldr	r2, [pc, #64]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_TIM_MspPostInit+0x1b0>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Key4_R_Pin|Key4_G_Pin|Key4_B_Pin;
 8001194:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011a6:	2302      	movs	r3, #2
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_TIM_MspPostInit+0x1b4>)
 80011b2:	f001 fb87 	bl	80028c4 <HAL_GPIO_Init>
}
 80011b6:	bf00      	nop
 80011b8:	3738      	adds	r7, #56	@ 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	40000400 	.word	0x40000400
 80011d0:	40000800 	.word	0x40000800

080011d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff fc40 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f009 f819 	bl	800a238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001206:	f7ff fb49 	bl	800089c <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   r0, =_estack
 800120c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001218:	0800a2f8 	.word	0x0800a2f8
  ldr r2, =_sbss
 800121c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001220:	20000c6c 	.word	0x20000c6c

08001224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_2_IRQHandler>

08001226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f001 f94d 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f80e 	bl	8001258 <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e001      	b.n	800124c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001248:	f7ff fb96 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124c:	79fb      	ldrb	r3, [r7, #7]

}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_InitTick+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d022      	beq.n	80012b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_InitTick+0x6c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_InitTick+0x68>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001278:	fbb1 f3f3 	udiv	r3, r1, r3
 800127c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f001 f958 	bl	8002536 <HAL_SYSTICK_Config>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10f      	bne.n	80012ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	d809      	bhi.n	80012a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001292:	2200      	movs	r2, #0
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	f04f 30ff 	mov.w	r0, #4294967295
 800129a:	f001 f924 	bl	80024e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <HAL_InitTick+0x70>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e004      	b.n	80012b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x20>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	4a03      	ldr	r2, [pc, #12]	@ (80012e8 <HAL_IncTick+0x1c>)
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	200004a4 	.word	0x200004a4
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200004a4 	.word	0x200004a4

08001308 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3360      	adds	r3, #96	@ 0x60
 8001382:	461a      	mov	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <LL_ADC_SetOffset+0x44>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	4313      	orrs	r3, r2
 80013a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	03fff000 	.word	0x03fff000

080013b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3360      	adds	r3, #96	@ 0x60
 80013c6:	461a      	mov	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3360      	adds	r3, #96	@ 0x60
 80013f4:	461a      	mov	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800141a:	b480      	push	{r7}
 800141c:	b087      	sub	sp, #28
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3360      	adds	r3, #96	@ 0x60
 800142a:	461a      	mov	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	431a      	orrs	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3360      	adds	r3, #96	@ 0x60
 8001460:	461a      	mov	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	615a      	str	r2, [r3, #20]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3330      	adds	r3, #48	@ 0x30
 80014bc:	461a      	mov	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	4413      	add	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	211f      	movs	r1, #31
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0e9b      	lsrs	r3, r3, #26
 80014e4:	f003 011f 	and.w	r1, r3, #31
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	431a      	orrs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3314      	adds	r3, #20
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0e5b      	lsrs	r3, r3, #25
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	0d1b      	lsrs	r3, r3, #20
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2107      	movs	r1, #7
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	401a      	ands	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	0d1b      	lsrs	r3, r3, #20
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001574:	43db      	mvns	r3, r3
 8001576:	401a      	ands	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0318 	and.w	r3, r3, #24
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001580:	40d9      	lsrs	r1, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	400b      	ands	r3, r1
 8001586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158a:	431a      	orrs	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	0007ffff 	.word	0x0007ffff

080015a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6093      	str	r3, [r2, #8]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001600:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001604:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <LL_ADC_IsEnabled+0x18>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_ADC_IsEnabled+0x1a>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b04      	cmp	r3, #4
 8001678:	d101      	bne.n	800167e <LL_ADC_REG_IsConversionOngoing+0x18>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b08      	cmp	r3, #8
 800169e:	d101      	bne.n	80016a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e167      	b.n	800199e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fe99 	bl	8000414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff67 	bl	80015c8 <LL_ADC_IsDeepPowerDownEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff4d 	bl	80015a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff82 	bl	8001618 <LL_ADC_IsInternalRegulatorEnabled>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff66 	bl	80015f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001724:	4ba0      	ldr	r3, [pc, #640]	@ (80019a8 <HAL_ADC_Init+0x2f4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	4aa0      	ldr	r2, [pc, #640]	@ (80019ac <HAL_ADC_Init+0x2f8>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	3301      	adds	r3, #1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001738:	e002      	b.n	8001740 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3b01      	subs	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff64 	bl	8001618 <LL_ADC_IsInternalRegulatorEnabled>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10d      	bne.n	8001772 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff75 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 800177c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8100 	bne.w	800198c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80fc 	bne.w	800198c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001798:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800179c:	f043 0202 	orr.w	r2, r3, #2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff49 	bl	8001640 <LL_ADC_IsEnabled>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80017b8:	f7ff ff42 	bl	8001640 <LL_ADC_IsEnabled>
 80017bc:	4604      	mov	r4, r0
 80017be:	487c      	ldr	r0, [pc, #496]	@ (80019b0 <HAL_ADC_Init+0x2fc>)
 80017c0:	f7ff ff3e 	bl	8001640 <LL_ADC_IsEnabled>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4323      	orrs	r3, r4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4878      	ldr	r0, [pc, #480]	@ (80019b4 <HAL_ADC_Init+0x300>)
 80017d4:	f7ff fd98 	bl	8001308 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7f5b      	ldrb	r3, [r3, #29]
 80017dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001802:	2b01      	cmp	r3, #1
 8001804:	d106      	bne.n	8001814 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	3b01      	subs	r3, #1
 800180c:	045b      	lsls	r3, r3, #17
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d009      	beq.n	8001830 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	4b60      	ldr	r3, [pc, #384]	@ (80019b8 <HAL_ADC_Init+0x304>)
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	430b      	orrs	r3, r1
 8001842:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff14 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8001864:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d16d      	bne.n	8001948 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d16a      	bne.n	8001948 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001876:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800187e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800188e:	f023 0302 	bic.w	r3, r3, #2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	430b      	orrs	r3, r1
 800189a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d017      	beq.n	80018d4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80018b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6911      	ldr	r1, [r2, #16]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018d2:	e013      	b.n	80018fc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001902:	2b01      	cmp	r3, #1
 8001904:	d118      	bne.n	8001938 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001928:	430a      	orrs	r2, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	e007      	b.n	8001948 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10c      	bne.n	800196a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f023 010f 	bic.w	r1, r3, #15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	631a      	str	r2, [r3, #48]	@ 0x30
 8001968:	e007      	b.n	800197a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 020f 	bic.w	r2, r2, #15
 8001978:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	65da      	str	r2, [r3, #92]	@ 0x5c
 800198a:	e007      	b.n	800199c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001990:	f043 0210 	orr.w	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800199c:	7ffb      	ldrb	r3, [r7, #31]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000
 80019ac:	053e2d63 	.word	0x053e2d63
 80019b0:	50000100 	.word	0x50000100
 80019b4:	50000300 	.word	0x50000300
 80019b8:	fff04007 	.word	0xfff04007

080019bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0b6      	sub	sp, #216	@ 0xd8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x22>
 80019da:	2302      	movs	r3, #2
 80019dc:	e3c8      	b.n	8002170 <HAL_ADC_ConfigChannel+0x7b4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fe3b 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 83ad 	bne.w	8002152 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	f7ff fd51 	bl	80014ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe29 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 8001a14:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fe35 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8001a22:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 81d9 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 81d4 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a42:	d10f      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff fd58 	bl	8001504 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fd12 	bl	8001486 <LL_ADC_SetSamplingTimeCommonConfig>
 8001a62:	e00e      	b.n	8001a82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	461a      	mov	r2, r3
 8001a72:	f7ff fd47 	bl	8001504 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd02 	bl	8001486 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d022      	beq.n	8001aea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6919      	ldr	r1, [r3, #16]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ab4:	f7ff fc5c 	bl	8001370 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6919      	ldr	r1, [r3, #16]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f7ff fca8 	bl	800141a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x124>
 8001ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ade:	e000      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x126>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f7ff fcb4 	bl	8001450 <LL_ADC_SetOffsetSaturation>
 8001ae8:	e17b      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fc61 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10a      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x15a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fc56 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	e01e      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x198>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc4b 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001b44:	2320      	movs	r3, #32
 8001b46:	e004      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001b48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1b0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	e018      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1e2>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e004      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001b94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fc1a 	bl	80013e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fbfe 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10a      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x220>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fbf3 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	f003 021f 	and.w	r2, r3, #31
 8001bda:	e01e      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x25e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fbe8 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e004      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001c0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x276>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	e018      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x2a8>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e004      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fbb7 	bl	80013e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fb9b 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x2e6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2102      	movs	r1, #2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fb90 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	e01e      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb85 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	e004      	b.n	8001cde <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x33c>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	e016      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x36a>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2102      	movs	r1, #2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fb56 	bl	80013e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fb3a 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x3a8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2103      	movs	r1, #3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fb2f 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	e017      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x3d8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2103      	movs	r1, #3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fb24 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001d7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001d86:	2320      	movs	r3, #32
 8001d88:	e003      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001d8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x3f0>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	e011      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x414>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e003      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fb01 	bl	80013e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc2a 	bl	8001640 <LL_ADC_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8140 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fbab 	bl	800155c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a8f      	ldr	r2, [pc, #572]	@ (8002048 <HAL_ADC_ConfigChannel+0x68c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 8131 	bne.w	8002074 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10b      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x47e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	bf94      	ite	ls
 8001e32:	2301      	movls	r3, #1
 8001e34:	2300      	movhi	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	e019      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x4b2>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001e48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e4a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001e4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001e52:	2320      	movs	r3, #32
 8001e54:	e003      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d079      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x4d2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	3301      	adds	r3, #1
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8c:	e015      	b.n	8001eba <HAL_ADC_ConfigChannel+0x4fe>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	069b      	lsls	r3, r3, #26
 8001eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x51e>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	e017      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x54e>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x574>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 021f 	and.w	r2, r3, #31
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	051b      	lsls	r3, r3, #20
 8001f2e:	e018      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x5a6>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e003      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 021f 	and.w	r2, r3, #31
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f62:	430b      	orrs	r3, r1
 8001f64:	e081      	b.n	800206a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x5c6>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	3301      	adds	r3, #1
 8001f7a:	069b      	lsls	r3, r3, #26
 8001f7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f80:	e015      	b.n	8001fae <HAL_ADC_ConfigChannel+0x5f2>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	069b      	lsls	r3, r3, #26
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x612>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	e017      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x642>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	61fb      	str	r3, [r7, #28]
  return result;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	ea42 0103 	orr.w	r1, r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_ADC_ConfigChannel+0x66e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	3301      	adds	r3, #1
 8002016:	f003 021f 	and.w	r2, r3, #31
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	051b      	lsls	r3, r3, #20
 8002024:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002028:	e01e      	b.n	8002068 <HAL_ADC_ConfigChannel+0x6ac>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	613b      	str	r3, [r7, #16]
  return result;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e006      	b.n	8002054 <HAL_ADC_ConfigChannel+0x698>
 8002046:	bf00      	nop
 8002048:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f003 021f 	and.w	r2, r3, #31
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	3b1e      	subs	r3, #30
 8002062:	051b      	lsls	r3, r3, #20
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002068:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	4619      	mov	r1, r3
 8002070:	f7ff fa48 	bl	8001504 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b3f      	ldr	r3, [pc, #252]	@ (8002178 <HAL_ADC_ConfigChannel+0x7bc>)
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d071      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002080:	483e      	ldr	r0, [pc, #248]	@ (800217c <HAL_ADC_ConfigChannel+0x7c0>)
 8002082:	f7ff f967 	bl	8001354 <LL_ADC_GetCommonPathInternalCh>
 8002086:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a3c      	ldr	r2, [pc, #240]	@ (8002180 <HAL_ADC_ConfigChannel+0x7c4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_ADC_ConfigChannel+0x6e2>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a3a      	ldr	r2, [pc, #232]	@ (8002184 <HAL_ADC_ConfigChannel+0x7c8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d127      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800209e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d121      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b2:	d157      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020bc:	4619      	mov	r1, r3
 80020be:	482f      	ldr	r0, [pc, #188]	@ (800217c <HAL_ADC_ConfigChannel+0x7c0>)
 80020c0:	f7ff f935 	bl	800132e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c4:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <HAL_ADC_ConfigChannel+0x7cc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	4a30      	ldr	r2, [pc, #192]	@ (800218c <HAL_ADC_ConfigChannel+0x7d0>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020de:	e002      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ec:	e03a      	b.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a27      	ldr	r2, [pc, #156]	@ (8002190 <HAL_ADC_ConfigChannel+0x7d4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d113      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a22      	ldr	r2, [pc, #136]	@ (8002194 <HAL_ADC_ConfigChannel+0x7d8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02a      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002116:	4619      	mov	r1, r3
 8002118:	4818      	ldr	r0, [pc, #96]	@ (800217c <HAL_ADC_ConfigChannel+0x7c0>)
 800211a:	f7ff f908 	bl	800132e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800211e:	e021      	b.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_ADC_ConfigChannel+0x7dc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d11c      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800212a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800212e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <HAL_ADC_ConfigChannel+0x7d8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d011      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002144:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002148:	4619      	mov	r1, r3
 800214a:	480c      	ldr	r0, [pc, #48]	@ (800217c <HAL_ADC_ConfigChannel+0x7c0>)
 800214c:	f7ff f8ef 	bl	800132e <LL_ADC_SetCommonPathInternalCh>
 8002150:	e008      	b.n	8002164 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002156:	f043 0220 	orr.w	r2, r3, #32
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800216c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002170:	4618      	mov	r0, r3
 8002172:	37d8      	adds	r7, #216	@ 0xd8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	80080000 	.word	0x80080000
 800217c:	50000300 	.word	0x50000300
 8002180:	c3210000 	.word	0xc3210000
 8002184:	90c00010 	.word	0x90c00010
 8002188:	20000000 	.word	0x20000000
 800218c:	053e2d63 	.word	0x053e2d63
 8002190:	c7520000 	.word	0xc7520000
 8002194:	50000100 	.word	0x50000100
 8002198:	cb840000 	.word	0xcb840000

0800219c <LL_ADC_IsEnabled>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <LL_ADC_IsEnabled+0x18>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <LL_ADC_IsEnabled+0x1a>
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d101      	bne.n	80021da <LL_ADC_REG_IsConversionOngoing+0x18>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b0a1      	sub	sp, #132	@ 0x84
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002202:	2302      	movs	r3, #2
 8002204:	e08b      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800220e:	2300      	movs	r3, #0
 8002210:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002212:	2300      	movs	r3, #0
 8002214:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800221e:	d102      	bne.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002220:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	e001      	b.n	800222a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e06a      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ffb9 	bl	80021c2 <LL_ADC_REG_IsConversionOngoing>
 8002250:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ffb3 	bl	80021c2 <LL_ADC_REG_IsConversionOngoing>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d14c      	bne.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002264:	2b00      	cmp	r3, #0
 8002266:	d149      	bne.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800226a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d028      	beq.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002286:	035b      	lsls	r3, r3, #13
 8002288:	430b      	orrs	r3, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800228e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002290:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002294:	f7ff ff82 	bl	800219c <LL_ADC_IsEnabled>
 8002298:	4604      	mov	r4, r0
 800229a:	4823      	ldr	r0, [pc, #140]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800229c:	f7ff ff7e 	bl	800219c <LL_ADC_IsEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4323      	orrs	r3, r4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d133      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022b0:	f023 030f 	bic.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	6811      	ldr	r1, [r2, #0]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	6892      	ldr	r2, [r2, #8]
 80022bc:	430a      	orrs	r2, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022c4:	e024      	b.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022d6:	f7ff ff61 	bl	800219c <LL_ADC_IsEnabled>
 80022da:	4604      	mov	r4, r0
 80022dc:	4812      	ldr	r0, [pc, #72]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022de:	f7ff ff5d 	bl	800219c <LL_ADC_IsEnabled>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4323      	orrs	r3, r4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d112      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022f2:	f023 030f 	bic.w	r3, r3, #15
 80022f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80022f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022fa:	e009      	b.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800230e:	e000      	b.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002310:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800231a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800231e:	4618      	mov	r0, r3
 8002320:	3784      	adds	r7, #132	@ 0x84
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	50000100 	.word	0x50000100
 800232c:	50000300 	.word	0x50000300

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff40 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff33 	bl	8002394 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa4 	bl	800248c <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e08d      	b.n	800267e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_DMA_Init+0x138>)
 800256a:	429a      	cmp	r2, r3
 800256c:	d80f      	bhi.n	800258e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b45      	ldr	r3, [pc, #276]	@ (800268c <HAL_DMA_Init+0x13c>)
 8002576:	4413      	add	r3, r2
 8002578:	4a45      	ldr	r2, [pc, #276]	@ (8002690 <HAL_DMA_Init+0x140>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	009a      	lsls	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a42      	ldr	r2, [pc, #264]	@ (8002694 <HAL_DMA_Init+0x144>)
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
 800258c:	e00e      	b.n	80025ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_DMA_Init+0x148>)
 8002596:	4413      	add	r3, r2
 8002598:	4a3d      	ldr	r2, [pc, #244]	@ (8002690 <HAL_DMA_Init+0x140>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	009a      	lsls	r2, r3, #2
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a3c      	ldr	r2, [pc, #240]	@ (800269c <HAL_DMA_Init+0x14c>)
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80025c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8fe 	bl	8002800 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800260c:	d102      	bne.n	8002614 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002628:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <HAL_DMA_Init+0x104>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b04      	cmp	r3, #4
 8002638:	d80c      	bhi.n	8002654 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f91e 	bl	800287c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e008      	b.n	8002666 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40020407 	.word	0x40020407
 800268c:	bffdfff8 	.word	0xbffdfff8
 8002690:	cccccccd 	.word	0xcccccccd
 8002694:	40020000 	.word	0x40020000
 8002698:	bffdfbf8 	.word	0xbffdfbf8
 800269c:	40020400 	.word	0x40020400

080026a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2204      	movs	r2, #4
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d026      	beq.n	800271a <HAL_DMA_IRQHandler+0x7a>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d021      	beq.n	800271a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0204 	bic.w	r2, r2, #4
 80026f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2104      	movs	r1, #4
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	2b00      	cmp	r3, #0
 800270e:	d071      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002718:	e06c      	b.n	80027f4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2202      	movs	r2, #2
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02e      	beq.n	800278c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d029      	beq.n	800278c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10b      	bne.n	800275e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 020a 	bic.w	r2, r2, #10
 8002754:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2102      	movs	r1, #2
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d038      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800278a:	e033      	b.n	80027f4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2208      	movs	r2, #8
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02a      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d025      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 020e 	bic.w	r2, r2, #14
 80027b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f003 021f 	and.w	r2, r3, #31
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
}
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002810:	429a      	cmp	r2, r3
 8002812:	d802      	bhi.n	800281a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002814:	4b15      	ldr	r3, [pc, #84]	@ (800286c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e001      	b.n	800281e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800281c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3b08      	subs	r3, #8
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a0b      	ldr	r2, [pc, #44]	@ (8002878 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800284a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40020407 	.word	0x40020407
 800286c:	40020800 	.word	0x40020800
 8002870:	40020820 	.word	0x40020820
 8002874:	cccccccd 	.word	0xcccccccd
 8002878:	40020880 	.word	0x40020880

0800287c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800289e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2201      	movs	r2, #1
 80028aa:	409a      	lsls	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	1000823f 	.word	0x1000823f
 80028c0:	40020940 	.word	0x40020940

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028d2:	e15a      	b.n	8002b8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 814c 	beq.w	8002b84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d005      	beq.n	8002904 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002900:	2b02      	cmp	r3, #2
 8002902:	d130      	bne.n	8002966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800293a:	2201      	movs	r2, #1
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 0201 	and.w	r2, r3, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b03      	cmp	r3, #3
 8002970:	d017      	beq.n	80029a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d123      	bne.n	80029f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	6939      	ldr	r1, [r7, #16]
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80a6 	beq.w	8002b84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a38:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba8 <HAL_GPIO_Init+0x2e4>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba8 <HAL_GPIO_Init+0x2e4>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a44:	4b58      	ldr	r3, [pc, #352]	@ (8002ba8 <HAL_GPIO_Init+0x2e4>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a50:	4a56      	ldr	r2, [pc, #344]	@ (8002bac <HAL_GPIO_Init+0x2e8>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	220f      	movs	r2, #15
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a7a:	d01f      	beq.n	8002abc <HAL_GPIO_Init+0x1f8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb0 <HAL_GPIO_Init+0x2ec>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d019      	beq.n	8002ab8 <HAL_GPIO_Init+0x1f4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a4b      	ldr	r2, [pc, #300]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_GPIO_Init+0x1f0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb8 <HAL_GPIO_Init+0x2f4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00d      	beq.n	8002ab0 <HAL_GPIO_Init+0x1ec>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a49      	ldr	r2, [pc, #292]	@ (8002bbc <HAL_GPIO_Init+0x2f8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <HAL_GPIO_Init+0x1e8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a48      	ldr	r2, [pc, #288]	@ (8002bc0 <HAL_GPIO_Init+0x2fc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_GPIO_Init+0x1e4>
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	e00a      	b.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	e008      	b.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002aac:	2304      	movs	r3, #4
 8002aae:	e006      	b.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e004      	b.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e002      	b.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002abc:	2300      	movs	r3, #0
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	f002 0203 	and.w	r2, r2, #3
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	4093      	lsls	r3, r2
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ace:	4937      	ldr	r1, [pc, #220]	@ (8002bac <HAL_GPIO_Init+0x2e8>)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002adc:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b00:	4a30      	ldr	r2, [pc, #192]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b06:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b2a:	4a26      	ldr	r2, [pc, #152]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b30:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b54:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b7e:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <HAL_GPIO_Init+0x300>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f47f ae9d 	bne.w	80028d4 <HAL_GPIO_Init+0x10>
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	48000400 	.word	0x48000400
 8002bb4:	48000800 	.word	0x48000800
 8002bb8:	48000c00 	.word	0x48000c00
 8002bbc:	48001000 	.word	0x48001000
 8002bc0:	48001400 	.word	0x48001400
 8002bc4:	40010400 	.word	0x40010400

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08d      	b.n	8002d26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fdc4 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d108      	bne.n	8002c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e007      	b.n	8002caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d138      	bne.n	8002db6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e032      	b.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	@ 0x24
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d139      	bne.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e033      	b.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	@ 0x24
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0c0      	b.n	8002ff0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f006 fef0 	bl	8009c68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fc7e 	bl	8006796 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	e03e      	b.n	8002f1e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	3311      	adds	r3, #17
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3310      	adds	r3, #16
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3313      	adds	r3, #19
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3320      	adds	r3, #32
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	3324      	adds	r3, #36	@ 0x24
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	791b      	ldrb	r3, [r3, #4]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3bb      	bcc.n	8002ea0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e044      	b.n	8002fb8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	791b      	ldrb	r3, [r3, #4]
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d3b5      	bcc.n	8002f2e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002fce:	f003 fbfd 	bl	80067cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7a9b      	ldrb	r3, [r3, #10]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 fbf6 	bl	80047da <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_Start+0x16>
 800300a:	2302      	movs	r3, #2
 800300c:	e012      	b.n	8003034 <HAL_PCD_Start+0x3c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fba4 	bl	8006768 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f005 f981 	bl	800832c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f005 f986 	bl	800835a <USB_ReadInterrupts>
 800304e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 faee 	bl	800363c <PCD_EP_ISR_Handler>

    return;
 8003060:	e110      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307e:	b292      	uxth	r2, r2
 8003080:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f006 fe80 	bl	8009d8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8fc 	bl	800328a <HAL_PCD_SetAddress>

    return;
 8003092:	e0f7      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030b0:	b292      	uxth	r2, r2
 80030b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030b6:	e0e5      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030d4:	b292      	uxth	r2, r2
 80030d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030da:	e0d3      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d034      	beq.n	8003150 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0204 	bic.w	r2, r2, #4
 80030f8:	b292      	uxth	r2, r2
 80030fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0208 	bic.w	r2, r2, #8
 8003110:	b292      	uxth	r2, r2
 8003112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003128:	2100      	movs	r1, #0
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f006 fffc 	bl	800a128 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f006 fe63 	bl	8009dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003148:	b292      	uxth	r2, r2
 800314a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800314e:	e099      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003156:	2b00      	cmp	r3, #0
 8003158:	d027      	beq.n	80031aa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0208 	orr.w	r2, r2, #8
 800316c:	b292      	uxth	r2, r2
 800316e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003184:	b292      	uxth	r2, r2
 8003186:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0204 	orr.w	r2, r2, #4
 800319c:	b292      	uxth	r2, r2
 800319e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f006 fe10 	bl	8009dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031a8:	e06c      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d040      	beq.n	8003236 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031bc:	b29a      	uxth	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031c6:	b292      	uxth	r2, r2
 80031c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d12b      	bne.n	800322e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031de:	b29a      	uxth	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0204 	orr.w	r2, r2, #4
 80031e8:	b292      	uxth	r2, r2
 80031ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0208 	orr.w	r2, r2, #8
 8003200:	b292      	uxth	r2, r2
 8003202:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003216:	b29b      	uxth	r3, r3
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003224:	2101      	movs	r1, #1
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f006 ff7e 	bl	800a128 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800322c:	e02a      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f006 fdca 	bl	8009dc8 <HAL_PCD_SuspendCallback>
    return;
 8003234:	e026      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00f      	beq.n	8003260 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003252:	b292      	uxth	r2, r2
 8003254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f006 fd88 	bl	8009d6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800325e:	e011      	b.n	8003284 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800327c:	b292      	uxth	r2, r2
 800327e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003282:	bf00      	nop
  }
}
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_PCD_SetAddress+0x1a>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e012      	b.n	80032ca <HAL_PCD_SetAddress+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 f822 	bl	8008304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	4608      	mov	r0, r1
 80032dc:	4611      	mov	r1, r2
 80032de:	461a      	mov	r2, r3
 80032e0:	4603      	mov	r3, r0
 80032e2:	70fb      	strb	r3, [r7, #3]
 80032e4:	460b      	mov	r3, r1
 80032e6:	803b      	strh	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	da0e      	bge.n	8003316 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 0207 	and.w	r2, r3, #7
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	3310      	adds	r3, #16
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	705a      	strb	r2, [r3, #1]
 8003314:	e00e      	b.n	8003334 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0207 	and.w	r2, r3, #7
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003340:	883b      	ldrh	r3, [r7, #0]
 8003342:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	78ba      	ldrb	r2, [r7, #2]
 800334e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003350:	78bb      	ldrb	r3, [r7, #2]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d102      	bne.n	800335c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_EP_Open+0x98>
 8003366:	2302      	movs	r3, #2
 8003368:	e00e      	b.n	8003388 <HAL_PCD_EP_Open+0xb6>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fa45 	bl	8006808 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003386:	7afb      	ldrb	r3, [r7, #11]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da0e      	bge.n	80033c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 0207 	and.w	r2, r3, #7
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	3310      	adds	r3, #16
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	705a      	strb	r2, [r3, #1]
 80033c0:	e00e      	b.n	80033e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0207 	and.w	r2, r3, #7
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_PCD_EP_Close+0x6a>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e00e      	b.n	8003418 <HAL_PCD_EP_Close+0x88>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 fee5 	bl	80071d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	460b      	mov	r3, r1
 800342e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f003 0207 	and.w	r2, r3, #7
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	b2da      	uxtb	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 f89d 	bl	80075b2 <USB_EPStartXfer>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	460b      	mov	r3, r1
 8003490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	f003 0207 	and.w	r2, r3, #7
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3310      	adds	r3, #16
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2201      	movs	r2, #1
 80034cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 f866 	bl	80075b2 <USB_EPStartXfer>

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	7912      	ldrb	r2, [r2, #4]
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e03e      	b.n	800358c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0e      	bge.n	8003534 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 0207 	and.w	r2, r3, #7
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3310      	adds	r3, #16
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	e00c      	b.n	800354e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_PCD_EP_SetStall+0x7e>
 800356a:	2302      	movs	r3, #2
 800356c:	e00e      	b.n	800358c <HAL_PCD_EP_SetStall+0x9c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f004 fdc7 	bl	8008110 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	7912      	ldrb	r2, [r2, #4]
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e040      	b.n	8003634 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da0e      	bge.n	80035d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 0207 	and.w	r2, r3, #7
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	3310      	adds	r3, #16
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	705a      	strb	r2, [r3, #1]
 80035d6:	e00e      	b.n	80035f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_PCD_EP_ClrStall+0x82>
 8003612:	2302      	movs	r3, #2
 8003614:	e00e      	b.n	8003634 <HAL_PCD_EP_ClrStall+0xa0>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	4618      	mov	r0, r3
 8003626:	f004 fdc4 	bl	80081b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b092      	sub	sp, #72	@ 0x48
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003644:	e333      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800364e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003650:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800365c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 8108 	bne.w	8003876 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003666:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d14c      	bne.n	800370a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800367c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	893b      	ldrh	r3, [r7, #8]
 8003688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003690:	b29b      	uxth	r3, r3
 8003692:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3310      	adds	r3, #16
 8003698:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80036c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	441a      	add	r2, r3
 80036cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036d0:	2100      	movs	r1, #0
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f006 fb31 	bl	8009d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7b1b      	ldrb	r3, [r3, #12]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 82e5 	beq.w	8003cae <PCD_EP_ISR_Handler+0x672>
 80036e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 82e0 	bne.w	8003cae <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7b1b      	ldrb	r3, [r3, #12]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	731a      	strb	r2, [r3, #12]
 8003708:	e2d1      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003710:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800371a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800371c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003720:	2b00      	cmp	r3, #0
 8003722:	d032      	beq.n	800378a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800372c:	b29b      	uxth	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	4413      	add	r3, r2
 800373e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800375a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800375e:	b29b      	uxth	r3, r3
 8003760:	f004 fe4e 	bl	8008400 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29a      	uxth	r2, r3
 800376c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003770:	4013      	ands	r3, r2
 8003772:	817b      	strh	r3, [r7, #10]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	897a      	ldrh	r2, [r7, #10]
 800377a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800377e:	b292      	uxth	r2, r2
 8003780:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f006 faac 	bl	8009ce0 <HAL_PCD_SetupStageCallback>
 8003788:	e291      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800378a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800378e:	2b00      	cmp	r3, #0
 8003790:	f280 828d 	bge.w	8003cae <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037a0:	4013      	ands	r3, r2
 80037a2:	81fb      	strh	r3, [r7, #14]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	89fa      	ldrh	r2, [r7, #14]
 80037aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037ae:	b292      	uxth	r2, r2
 80037b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d019      	beq.n	8003816 <PCD_EP_ISR_Handler+0x1da>
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f0:	6959      	ldr	r1, [r3, #20]
 80037f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f004 fe00 	bl	8008400 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	441a      	add	r2, r3
 800380a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f006 fa77 	bl	8009d04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800381e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 8242 	bne.w	8003cae <PCD_EP_ISR_Handler+0x672>
 800382a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800382c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003830:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003834:	f000 823b 	beq.w	8003cae <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003848:	81bb      	strh	r3, [r7, #12]
 800384a:	89bb      	ldrh	r3, [r7, #12]
 800384c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003850:	81bb      	strh	r3, [r7, #12]
 8003852:	89bb      	ldrh	r3, [r7, #12]
 8003854:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003858:	81bb      	strh	r3, [r7, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	89bb      	ldrh	r3, [r7, #12]
 8003860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003870:	b29b      	uxth	r3, r3
 8003872:	8013      	strh	r3, [r2, #0]
 8003874:	e21b      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003888:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800388c:	2b00      	cmp	r3, #0
 800388e:	f280 80f1 	bge.w	8003a74 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038a8:	4013      	ands	r3, r2
 80038aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038c0:	b292      	uxth	r2, r2
 80038c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038c4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038dc:	7b1b      	ldrb	r3, [r3, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d123      	bne.n	800392a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003906:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800390a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 808b 	beq.w	8003a2a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391a:	6959      	ldr	r1, [r3, #20]
 800391c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391e:	88da      	ldrh	r2, [r3, #6]
 8003920:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003924:	f004 fd6c 	bl	8008400 <USB_ReadPMA>
 8003928:	e07f      	b.n	8003a2a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800392a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d109      	bne.n	8003946 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003932:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003934:	461a      	mov	r2, r3
 8003936:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f9c6 	bl	8003cca <HAL_PCD_EP_DB_Receive>
 800393e:	4603      	mov	r3, r0
 8003940:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003944:	e071      	b.n	8003a2a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003960:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	441a      	add	r2, r3
 8003970:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800397a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800397e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d022      	beq.n	80039e6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80039c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d02c      	beq.n	8003a2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d6:	6959      	ldr	r1, [r3, #20]
 80039d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039da:	891a      	ldrh	r2, [r3, #8]
 80039dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039e0:	f004 fd0e 	bl	8008400 <USB_ReadPMA>
 80039e4:	e021      	b.n	8003a2a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003a0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1c:	6959      	ldr	r1, [r3, #20]
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a20:	895a      	ldrh	r2, [r3, #10]
 8003a22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a26:	f004 fceb 	bl	8008400 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a32:	441a      	add	r2, r3
 8003a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a40:	441a      	add	r2, r3
 8003a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a44:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <PCD_EP_ISR_Handler+0x41e>
 8003a4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d206      	bcs.n	8003a68 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f006 f94f 	bl	8009d04 <HAL_PCD_DataOutStageCallback>
 8003a66:	e005      	b.n	8003a74 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f003 fd9f 	bl	80075b2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8117 	beq.w	8003cae <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a80:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	3310      	adds	r3, #16
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ace:	78db      	ldrb	r3, [r3, #3]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 80a1 	bne.w	8003c18 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ade:	7b1b      	ldrb	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8092 	beq.w	8003c0a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d046      	beq.n	8003b7e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d126      	bne.n	8003b46 <PCD_EP_ISR_Handler+0x50a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00da      	lsls	r2, r3, #3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	e061      	b.n	8003c0a <PCD_EP_ISR_Handler+0x5ce>
 8003b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d15d      	bne.n	8003c0a <PCD_EP_ISR_Handler+0x5ce>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	00da      	lsls	r2, r3, #3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e045      	b.n	8003c0a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d126      	bne.n	8003bda <PCD_EP_ISR_Handler+0x59e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	4413      	add	r3, r2
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	00da      	lsls	r2, r3, #3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	4413      	add	r3, r2
 8003bae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	e017      	b.n	8003c0a <PCD_EP_ISR_Handler+0x5ce>
 8003bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d113      	bne.n	8003c0a <PCD_EP_ISR_Handler+0x5ce>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf0:	4413      	add	r3, r2
 8003bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	00da      	lsls	r2, r3, #3
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	2200      	movs	r2, #0
 8003c08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f006 f892 	bl	8009d3a <HAL_PCD_DataInStageCallback>
 8003c16:	e04a      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13f      	bne.n	8003ca2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c46:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d906      	bls.n	8003c60 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c58:	1ad2      	subs	r2, r2, r3
 8003c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c5c:	619a      	str	r2, [r3, #24]
 8003c5e:	e002      	b.n	8003c66 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c62:	2200      	movs	r2, #0
 8003c64:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f006 f860 	bl	8009d3a <HAL_PCD_DataInStageCallback>
 8003c7a:	e018      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c82:	441a      	add	r2, r3
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c8e:	441a      	add	r2, r3
 8003c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 fc89 	bl	80075b2 <USB_EPStartXfer>
 8003ca0:	e005      	b.n	8003cae <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ca2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f917 	bl	8003edc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b21b      	sxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f6ff acc3 	blt.w	8003646 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3748      	adds	r7, #72	@ 0x48
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b088      	sub	sp, #32
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d07c      	beq.n	8003ddc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	8b7b      	ldrh	r3, [r7, #26]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d306      	bcc.n	8003d20 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	8b7b      	ldrh	r3, [r7, #26]
 8003d18:	1ad2      	subs	r2, r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	619a      	str	r2, [r3, #24]
 8003d1e:	e002      	b.n	8003d26 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d123      	bne.n	8003d76 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d48:	833b      	strh	r3, [r7, #24]
 8003d4a:	8b3b      	ldrh	r3, [r7, #24]
 8003d4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d50:	833b      	strh	r3, [r7, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8b3b      	ldrh	r3, [r7, #24]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01f      	beq.n	8003dc0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9a:	82fb      	strh	r3, [r7, #22]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	8afb      	ldrh	r3, [r7, #22]
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dc0:	8b7b      	ldrh	r3, [r7, #26]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8085 	beq.w	8003ed2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6959      	ldr	r1, [r3, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	891a      	ldrh	r2, [r3, #8]
 8003dd4:	8b7b      	ldrh	r3, [r7, #26]
 8003dd6:	f004 fb13 	bl	8008400 <USB_ReadPMA>
 8003dda:	e07a      	b.n	8003ed2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	8b7b      	ldrh	r3, [r7, #26]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d306      	bcc.n	8003e1a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	8b7b      	ldrh	r3, [r7, #26]
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	619a      	str	r2, [r3, #24]
 8003e18:	e002      	b.n	8003e20 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d123      	bne.n	8003e70 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e42:	83fb      	strh	r3, [r7, #30]
 8003e44:	8bfb      	ldrh	r3, [r7, #30]
 8003e46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e4a:	83fb      	strh	r3, [r7, #30]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	8bfb      	ldrh	r3, [r7, #30]
 8003e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11f      	bne.n	8003eba <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e94:	83bb      	strh	r3, [r7, #28]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	8bbb      	ldrh	r3, [r7, #28]
 8003ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003eba:	8b7b      	ldrh	r3, [r7, #26]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	895a      	ldrh	r2, [r3, #10]
 8003ecc:	8b7b      	ldrh	r3, [r7, #26]
 8003ece:	f004 fa97 	bl	8008400 <USB_ReadPMA>
    }
  }

  return count;
 8003ed2:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b0a6      	sub	sp, #152	@ 0x98
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 81f7 	beq.w	80042e4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d907      	bls.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f32:	1ad2      	subs	r2, r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	619a      	str	r2, [r3, #24]
 8003f38:	e002      	b.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 80e1 	bne.w	800410c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d126      	bne.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	4413      	add	r3, r2
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00da      	lsls	r2, r3, #3
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	4413      	add	r3, r2
 8003f74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	e01a      	b.n	8003fd6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d116      	bne.n	8003fd6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbc:	4413      	add	r3, r2
 8003fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	00da      	lsls	r2, r3, #3
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc8:	4413      	add	r3, r2
 8003fca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d126      	bne.n	8004032 <HAL_PCD_EP_DB_Transmit+0x156>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	623b      	str	r3, [r7, #32]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	00da      	lsls	r2, r3, #3
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	4413      	add	r3, r2
 8004006:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004016:	b29a      	uxth	r2, r3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402a:	b29a      	uxth	r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	e017      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x186>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d113      	bne.n	8004062 <HAL_PCD_EP_DB_Transmit+0x186>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	4413      	add	r3, r2
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	00da      	lsls	r2, r3, #3
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	4413      	add	r3, r2
 8004056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	2200      	movs	r2, #0
 8004060:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	78db      	ldrb	r3, [r3, #3]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d123      	bne.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004084:	837b      	strh	r3, [r7, #26]
 8004086:	8b7b      	ldrh	r3, [r7, #26]
 8004088:	f083 0320 	eor.w	r3, r3, #32
 800408c:	837b      	strh	r3, [r7, #26]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	8b7b      	ldrh	r3, [r7, #26]
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f005 fe3e 	bl	8009d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01f      	beq.n	8004108 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	833b      	strh	r3, [r7, #24]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	8b3b      	ldrh	r3, [r7, #24]
 80040f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004104:	b29b      	uxth	r3, r3
 8004106:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e31f      	b.n	800474c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800412c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004130:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800414e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 82ca 	bne.w	80046fa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800416e:	441a      	add	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800417c:	441a      	add	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d309      	bcc.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	621a      	str	r2, [r3, #32]
 80041a0:	e015      	b.n	80041ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80041aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80041b8:	e009      	b.n	80041ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d15f      	bne.n	8004296 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	643b      	str	r3, [r7, #64]	@ 0x40
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ea:	4413      	add	r3, r2
 80041ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	00da      	lsls	r2, r3, #3
 80041f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f6:	4413      	add	r3, r2
 80041f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004208:	b29a      	uxth	r2, r3
 800420a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_PCD_EP_DB_Transmit+0x34e>
 8004214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004222:	b29a      	uxth	r2, r3
 8004224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004226:	801a      	strh	r2, [r3, #0]
 8004228:	e051      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800422a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800422c:	2b3e      	cmp	r3, #62	@ 0x3e
 800422e:	d816      	bhi.n	800425e <HAL_PCD_EP_DB_Transmit+0x382>
 8004230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	653b      	str	r3, [r7, #80]	@ 0x50
 8004236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004242:	3301      	adds	r3, #1
 8004244:	653b      	str	r3, [r7, #80]	@ 0x50
 8004246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29a      	uxth	r2, r3
 800424c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800424e:	b29b      	uxth	r3, r3
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	b29b      	uxth	r3, r3
 8004254:	4313      	orrs	r3, r2
 8004256:	b29a      	uxth	r2, r3
 8004258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e037      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800425e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	653b      	str	r3, [r7, #80]	@ 0x50
 8004264:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <HAL_PCD_EP_DB_Transmit+0x398>
 800426e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004270:	3b01      	subs	r3, #1
 8004272:	653b      	str	r3, [r7, #80]	@ 0x50
 8004274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800427c:	b29b      	uxth	r3, r3
 800427e:	029b      	lsls	r3, r3, #10
 8004280:	b29b      	uxth	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800428a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428e:	b29a      	uxth	r2, r3
 8004290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	e01b      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d117      	bne.n	80042ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b2:	4413      	add	r3, r2
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	00da      	lsls	r2, r3, #3
 80042bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042be:	4413      	add	r3, r2
 80042c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	891a      	ldrh	r2, [r3, #8]
 80042da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f004 f84c 	bl	800837a <USB_WritePMA>
 80042e2:	e20a      	b.n	80046fa <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004308:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004314:	429a      	cmp	r2, r3
 8004316:	d307      	bcc.n	8004328 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004320:	1ad2      	subs	r2, r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	619a      	str	r2, [r3, #24]
 8004326:	e002      	b.n	800432e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2200      	movs	r2, #0
 800432c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 80f6 	bne.w	8004524 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	677b      	str	r3, [r7, #116]	@ 0x74
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004354:	4413      	add	r3, r2
 8004356:	677b      	str	r3, [r7, #116]	@ 0x74
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004360:	4413      	add	r3, r2
 8004362:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004366:	673b      	str	r3, [r7, #112]	@ 0x70
 8004368:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004372:	b29a      	uxth	r2, r3
 8004374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004386:	b29a      	uxth	r2, r3
 8004388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	e01a      	b.n	80043c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d116      	bne.n	80043c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043aa:	4413      	add	r3, r2
 80043ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	00da      	lsls	r2, r3, #3
 80043b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043b6:	4413      	add	r3, r2
 80043b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d12f      	bne.n	8004434 <HAL_PCD_EP_DB_Transmit+0x558>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ec:	4413      	add	r3, r2
 80043ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	00da      	lsls	r2, r3, #3
 80043f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004406:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004412:	b29a      	uxth	r2, r3
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442a:	b29a      	uxth	r2, r3
 800442c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	e01c      	b.n	800446e <HAL_PCD_EP_DB_Transmit+0x592>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d118      	bne.n	800446e <HAL_PCD_EP_DB_Transmit+0x592>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800444c:	4413      	add	r3, r2
 800444e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	00da      	lsls	r2, r3, #3
 8004458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800445c:	4413      	add	r3, r2
 800445e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004462:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004466:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800446a:	2200      	movs	r2, #0
 800446c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	78db      	ldrb	r3, [r3, #3]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d127      	bne.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800448c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004490:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004494:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004498:	f083 0320 	eor.w	r3, r3, #32
 800449c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80044b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	4619      	mov	r1, r3
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f005 fc34 	bl	8009d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d121      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800450c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451c:	b29b      	uxth	r3, r3
 800451e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e113      	b.n	800474c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d121      	bne.n	8004572 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004548:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004566:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 80be 	bne.w	80046fa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004586:	441a      	add	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004594:	441a      	add	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d309      	bcc.n	80045ba <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	621a      	str	r2, [r3, #32]
 80045b8:	e015      	b.n	80045e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80045c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80045c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80045d0:	e009      	b.n	80045e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2200      	movs	r2, #0
 80045dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d15f      	bne.n	80046b4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004608:	4413      	add	r3, r2
 800460a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	00da      	lsls	r2, r3, #3
 8004612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004614:	4413      	add	r3, r2
 8004616:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800461a:	667b      	str	r3, [r7, #100]	@ 0x64
 800461c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004626:	b29a      	uxth	r2, r3
 8004628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004640:	b29a      	uxth	r2, r3
 8004642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	e04e      	b.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800464a:	2b3e      	cmp	r3, #62	@ 0x3e
 800464c:	d816      	bhi.n	800467c <HAL_PCD_EP_DB_Transmit+0x7a0>
 800464e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	663b      	str	r3, [r7, #96]	@ 0x60
 8004654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_PCD_EP_DB_Transmit+0x788>
 800465e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004660:	3301      	adds	r3, #1
 8004662:	663b      	str	r3, [r7, #96]	@ 0x60
 8004664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800466c:	b29b      	uxth	r3, r3
 800466e:	029b      	lsls	r3, r3, #10
 8004670:	b29b      	uxth	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b29a      	uxth	r2, r3
 8004676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e034      	b.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800467c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	663b      	str	r3, [r7, #96]	@ 0x60
 8004682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800468c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468e:	3b01      	subs	r3, #1
 8004690:	663b      	str	r3, [r7, #96]	@ 0x60
 8004692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29a      	uxth	r2, r3
 8004698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800469a:	b29b      	uxth	r3, r3
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	e018      	b.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d114      	bne.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x80a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046ca:	4413      	add	r3, r2
 80046cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	00da      	lsls	r2, r3, #3
 80046d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046d6:	4413      	add	r3, r2
 80046d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6959      	ldr	r1, [r3, #20]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	895a      	ldrh	r2, [r3, #10]
 80046f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f003 fe40 	bl	800837a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004714:	82fb      	strh	r3, [r7, #22]
 8004716:	8afb      	ldrh	r3, [r7, #22]
 8004718:	f083 0310 	eor.w	r3, r3, #16
 800471c:	82fb      	strh	r3, [r7, #22]
 800471e:	8afb      	ldrh	r3, [r7, #22]
 8004720:	f083 0320 	eor.w	r3, r3, #32
 8004724:	82fb      	strh	r3, [r7, #22]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	8afb      	ldrh	r3, [r7, #22]
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3798      	adds	r7, #152	@ 0x98
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	4613      	mov	r3, r2
 8004764:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	f003 0207 	and.w	r2, r3, #7
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	3310      	adds	r3, #16
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e009      	b.n	800479e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800478a:	897a      	ldrh	r2, [r7, #10]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800479e:	893b      	ldrh	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	80da      	strh	r2, [r3, #6]
 80047b2:	e00b      	b.n	80047cc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2201      	movs	r2, #1
 80047b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	b29a      	uxth	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004812:	b29b      	uxth	r3, r3
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d141      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800483e:	4b4b      	ldr	r3, [pc, #300]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d131      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800484c:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004852:	4a46      	ldr	r2, [pc, #280]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004858:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800485c:	4b43      	ldr	r3, [pc, #268]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004864:	4a41      	ldr	r2, [pc, #260]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800486c:	4b40      	ldr	r3, [pc, #256]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2232      	movs	r2, #50	@ 0x32
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	4a3f      	ldr	r2, [pc, #252]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	0c9b      	lsrs	r3, r3, #18
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004882:	e002      	b.n	800488a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3b01      	subs	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488a:	4b38      	ldr	r3, [pc, #224]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004896:	d102      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f2      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800489e:	4b33      	ldr	r3, [pc, #204]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d158      	bne.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e057      	b.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b0:	4b2e      	ldr	r3, [pc, #184]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b6:	4a2d      	ldr	r2, [pc, #180]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048c0:	e04d      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c8:	d141      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ca:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d6:	d131      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d8:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048de:	4a23      	ldr	r2, [pc, #140]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e8:	4b20      	ldr	r3, [pc, #128]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048f0:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2232      	movs	r2, #50	@ 0x32
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	0c9b      	lsrs	r3, r3, #18
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490e:	e002      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b01      	subs	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004916:	4b15      	ldr	r3, [pc, #84]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004922:	d102      	bne.n	800492a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f2      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800492a:	4b10      	ldr	r3, [pc, #64]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004936:	d112      	bne.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e011      	b.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004942:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800494c:	e007      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800494e:	4b07      	ldr	r3, [pc, #28]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004956:	4a05      	ldr	r2, [pc, #20]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800495c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40007000 	.word	0x40007000
 8004970:	20000000 	.word	0x20000000
 8004974:	431bde83 	.word	0x431bde83

08004978 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004986:	6093      	str	r3, [r2, #8]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40007000 	.word	0x40007000

08004998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e2fe      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d075      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b6:	4b97      	ldr	r3, [pc, #604]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c0:	4b94      	ldr	r3, [pc, #592]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d102      	bne.n	80049d6 <HAL_RCC_OscConfig+0x3e>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d002      	beq.n	80049dc <HAL_RCC_OscConfig+0x44>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d10b      	bne.n	80049f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05b      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x108>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d157      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e2d9      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x74>
 80049fe:	4b85      	ldr	r3, [pc, #532]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a84      	ldr	r2, [pc, #528]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e01d      	b.n	8004a48 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x98>
 8004a16:	4b7f      	ldr	r3, [pc, #508]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b7c      	ldr	r3, [pc, #496]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7b      	ldr	r2, [pc, #492]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e00b      	b.n	8004a48 <HAL_RCC_OscConfig+0xb0>
 8004a30:	4b78      	ldr	r3, [pc, #480]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a77      	ldr	r2, [pc, #476]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4b75      	ldr	r3, [pc, #468]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a74      	ldr	r2, [pc, #464]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d013      	beq.n	8004a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fc fc4e 	bl	80012f0 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fc fc4a 	bl	80012f0 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	@ 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e29e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0xc0>
 8004a76:	e014      	b.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fc3a 	bl	80012f0 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fc fc36 	bl	80012f0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	@ 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e28a      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a92:	4b60      	ldr	r3, [pc, #384]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0xe8>
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d075      	beq.n	8004b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aae:	4b59      	ldr	r3, [pc, #356]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab8:	4b56      	ldr	r3, [pc, #344]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b0c      	cmp	r3, #12
 8004ac6:	d102      	bne.n	8004ace <HAL_RCC_OscConfig+0x136>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d002      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x13c>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d11f      	bne.n	8004b14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_OscConfig+0x154>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e25d      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b49      	ldr	r3, [pc, #292]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	4946      	ldr	r1, [pc, #280]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b00:	4b45      	ldr	r3, [pc, #276]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fc fba7 	bl	8001258 <HAL_InitTick>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d043      	beq.n	8004b98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e249      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a3c      	ldr	r2, [pc, #240]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc fbe2 	bl	80012f0 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fc fbde 	bl	80012f0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e232      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b42:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b31      	ldr	r3, [pc, #196]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	492d      	ldr	r1, [pc, #180]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
 8004b62:	e01a      	b.n	8004b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fc fbbe 	bl	80012f0 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fc fbba 	bl	80012f0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e20e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8a:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d041      	beq.n	8004c2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bae:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb4:	4a17      	ldr	r2, [pc, #92]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fc fb97 	bl	80012f0 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc6:	f7fc fb93 	bl	80012f0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e1e7      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ef      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x22e>
 8004be6:	e020      	b.n	8004c2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fb7a 	bl	80012f0 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bfe:	e00d      	b.n	8004c1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fc fb76 	bl	80012f0 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d906      	bls.n	8004c1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e1ca      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ea      	bne.n	8004c00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80a6 	beq.w	8004d84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c3c:	4b84      	ldr	r3, [pc, #528]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_OscConfig+0x2b4>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x2b6>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	4b7f      	ldr	r3, [pc, #508]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	4a7e      	ldr	r2, [pc, #504]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c6e:	4b79      	ldr	r3, [pc, #484]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d118      	bne.n	8004cac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7a:	4b76      	ldr	r3, [pc, #472]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a75      	ldr	r2, [pc, #468]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7fc fb33 	bl	80012f0 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8e:	f7fc fb2f 	bl	80012f0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e183      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d108      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x32e>
 8004cb4:	4b66      	ldr	r3, [pc, #408]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	4a65      	ldr	r2, [pc, #404]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc4:	e024      	b.n	8004d10 <HAL_RCC_OscConfig+0x378>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d110      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x358>
 8004cce:	4b60      	ldr	r3, [pc, #384]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cde:	4b5c      	ldr	r3, [pc, #368]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cee:	e00f      	b.n	8004d10 <HAL_RCC_OscConfig+0x378>
 8004cf0:	4b57      	ldr	r3, [pc, #348]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a56      	ldr	r2, [pc, #344]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d00:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	4a52      	ldr	r2, [pc, #328]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d016      	beq.n	8004d46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fc faea 	bl	80012f0 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fc fae6 	bl	80012f0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e138      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d36:	4b46      	ldr	r3, [pc, #280]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ed      	beq.n	8004d20 <HAL_RCC_OscConfig+0x388>
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fc fad3 	bl	80012f0 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fc facf 	bl	80012f0 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e121      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d64:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1ed      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d72:	7ffb      	ldrb	r3, [r7, #31]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d105      	bne.n	8004d84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d78:	4b35      	ldr	r3, [pc, #212]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7c:	4a34      	ldr	r2, [pc, #208]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d03c      	beq.n	8004e0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01c      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d98:	4b2d      	ldr	r3, [pc, #180]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fc faa2 	bl	80012f0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db0:	f7fc fa9e 	bl	80012f0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0f2      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dc2:	4b23      	ldr	r3, [pc, #140]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ef      	beq.n	8004db0 <HAL_RCC_OscConfig+0x418>
 8004dd0:	e01b      	b.n	8004e0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de2:	f7fc fa85 	bl	80012f0 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dea:	f7fc fa81 	bl	80012f0 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0d5      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dfc:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ef      	bne.n	8004dea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80c9 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e14:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b0c      	cmp	r3, #12
 8004e1e:	f000 8083 	beq.w	8004f28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d15e      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a08      	ldr	r2, [pc, #32]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fa5b 	bl	80012f0 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e3c:	e00c      	b.n	8004e58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fc fa57 	bl	80012f0 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d905      	bls.n	8004e58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0ab      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	4b55      	ldr	r3, [pc, #340]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ec      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b52      	ldr	r3, [pc, #328]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	4b52      	ldr	r3, [pc, #328]	@ (8004fb4 <HAL_RCC_OscConfig+0x61c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6a11      	ldr	r1, [r2, #32]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	4311      	orrs	r1, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e7e:	0212      	lsls	r2, r2, #8
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e86:	0852      	lsrs	r2, r2, #1
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	0552      	lsls	r2, r2, #21
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e92:	0852      	lsrs	r2, r2, #1
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0652      	lsls	r2, r2, #25
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e9e:	06d2      	lsls	r2, r2, #27
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	4943      	ldr	r1, [pc, #268]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea8:	4b41      	ldr	r3, [pc, #260]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a40      	ldr	r2, [pc, #256]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fa16 	bl	80012f0 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fc fa12 	bl	80012f0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e066      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	4b35      	ldr	r3, [pc, #212]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x530>
 8004ee6:	e05e      	b.n	8004fa6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a30      	ldr	r2, [pc, #192]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fc f9fc 	bl	80012f0 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fc f9f8 	bl	80012f0 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e04c      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0e:	4b28      	ldr	r3, [pc, #160]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f1a:	4b25      	ldr	r3, [pc, #148]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	4924      	ldr	r1, [pc, #144]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004f20:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <HAL_RCC_OscConfig+0x620>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	60cb      	str	r3, [r1, #12]
 8004f26:	e03e      	b.n	8004fa6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e039      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f34:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb0 <HAL_RCC_OscConfig+0x618>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d12c      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	3b01      	subs	r3, #1
 8004f54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d123      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d11b      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d113      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d001      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	019f800c 	.word	0x019f800c
 8004fb8:	feeefffc 	.word	0xfeeefffc

08004fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e11e      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b91      	ldr	r3, [pc, #580]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d910      	bls.n	8005004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b8e      	ldr	r3, [pc, #568]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 020f 	bic.w	r2, r3, #15
 8004fea:	498c      	ldr	r1, [pc, #560]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b8a      	ldr	r3, [pc, #552]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e106      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d073      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d129      	bne.n	800506c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005018:	4b81      	ldr	r3, [pc, #516]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0f4      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005028:	f000 f966 	bl	80052f8 <RCC_GetSysClockFreqFromPLLSource>
 800502c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4a7c      	ldr	r2, [pc, #496]	@ (8005224 <HAL_RCC_ClockConfig+0x268>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d93f      	bls.n	80050b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005036:	4b7a      	ldr	r3, [pc, #488]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800504a:	2b00      	cmp	r3, #0
 800504c:	d033      	beq.n	80050b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	d12f      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005056:	4b72      	ldr	r3, [pc, #456]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800505e:	4a70      	ldr	r2, [pc, #448]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005064:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e024      	b.n	80050b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d107      	bne.n	8005084 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005074:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0c6      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005084:	4b66      	ldr	r3, [pc, #408]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0be      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005094:	f000 f8ce 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 8005098:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4a61      	ldr	r2, [pc, #388]	@ (8005224 <HAL_RCC_ClockConfig+0x268>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d909      	bls.n	80050b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80050ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050b2:	2380      	movs	r3, #128	@ 0x80
 80050b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f023 0203 	bic.w	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4957      	ldr	r1, [pc, #348]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c8:	f7fc f912 	bl	80012f0 <HAL_GetTick>
 80050cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d0:	f7fc f90e 	bl	80012f0 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e095      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 020c 	and.w	r2, r3, #12
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1eb      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d023      	beq.n	800514c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005110:	4b43      	ldr	r3, [pc, #268]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a42      	ldr	r2, [pc, #264]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005116:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800511a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005128:	4b3d      	ldr	r3, [pc, #244]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005130:	4a3b      	ldr	r2, [pc, #236]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005132:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005136:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005138:	4b39      	ldr	r3, [pc, #228]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4936      	ldr	r1, [pc, #216]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
 800514a:	e008      	b.n	800515e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b80      	cmp	r3, #128	@ 0x80
 8005150:	d105      	bne.n	800515e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005152:	4b33      	ldr	r3, [pc, #204]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	4a32      	ldr	r2, [pc, #200]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 8005158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800515c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800515e:	4b2f      	ldr	r3, [pc, #188]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d21d      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516c:	4b2b      	ldr	r3, [pc, #172]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 020f 	bic.w	r2, r3, #15
 8005174:	4929      	ldr	r1, [pc, #164]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800517c:	f7fc f8b8 	bl	80012f0 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	e00a      	b.n	800519a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005184:	f7fc f8b4 	bl	80012f0 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e03b      	b.n	8005212 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b20      	ldr	r3, [pc, #128]	@ (800521c <HAL_RCC_ClockConfig+0x260>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d1ed      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4917      	ldr	r1, [pc, #92]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d2:	4b13      	ldr	r3, [pc, #76]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	490f      	ldr	r1, [pc, #60]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051e6:	f000 f825 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005220 <HAL_RCC_ClockConfig+0x264>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	490c      	ldr	r1, [pc, #48]	@ (8005228 <HAL_RCC_ClockConfig+0x26c>)
 80051f8:	5ccb      	ldrb	r3, [r1, r3]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <HAL_RCC_ClockConfig+0x270>)
 8005204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005206:	4b0a      	ldr	r3, [pc, #40]	@ (8005230 <HAL_RCC_ClockConfig+0x274>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fc f824 	bl	8001258 <HAL_InitTick>
 8005210:	4603      	mov	r3, r0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40022000 	.word	0x40022000
 8005220:	40021000 	.word	0x40021000
 8005224:	04c4b400 	.word	0x04c4b400
 8005228:	0800a2e0 	.word	0x0800a2e0
 800522c:	20000000 	.word	0x20000000
 8005230:	20000004 	.word	0x20000004

08005234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800523a:	4b2c      	ldr	r3, [pc, #176]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b04      	cmp	r3, #4
 8005244:	d102      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005246:	4b2a      	ldr	r3, [pc, #168]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e047      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800524c:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d102      	bne.n	800525e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005258:	4b26      	ldr	r3, [pc, #152]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e03e      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800525e:	4b23      	ldr	r3, [pc, #140]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b0c      	cmp	r3, #12
 8005268:	d136      	bne.n	80052d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800526a:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005274:	4b1d      	ldr	r3, [pc, #116]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	3301      	adds	r3, #1
 8005280:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d10c      	bne.n	80052a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005288:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005292:	68d2      	ldr	r2, [r2, #12]
 8005294:	0a12      	lsrs	r2, r2, #8
 8005296:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
      break;
 80052a0:	e00c      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a2:	4a13      	ldr	r2, [pc, #76]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	4a10      	ldr	r2, [pc, #64]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ac:	68d2      	ldr	r2, [r2, #12]
 80052ae:	0a12      	lsrs	r2, r2, #8
 80052b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]
      break;
 80052ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	0e5b      	lsrs	r3, r3, #25
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	e001      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052dc:	693b      	ldr	r3, [r7, #16]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	00f42400 	.word	0x00f42400
 80052f4:	007a1200 	.word	0x007a1200

080052f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005308:	4b1b      	ldr	r3, [pc, #108]	@ (8005378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	3301      	adds	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d10c      	bne.n	8005336 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800531c:	4a17      	ldr	r2, [pc, #92]	@ (800537c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	4a14      	ldr	r2, [pc, #80]	@ (8005378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005326:	68d2      	ldr	r2, [r2, #12]
 8005328:	0a12      	lsrs	r2, r2, #8
 800532a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	617b      	str	r3, [r7, #20]
    break;
 8005334:	e00c      	b.n	8005350 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005336:	4a12      	ldr	r2, [pc, #72]	@ (8005380 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	4a0e      	ldr	r2, [pc, #56]	@ (8005378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	0a12      	lsrs	r2, r2, #8
 8005344:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	617b      	str	r3, [r7, #20]
    break;
 800534e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	0e5b      	lsrs	r3, r3, #25
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	3301      	adds	r3, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800536a:	687b      	ldr	r3, [r7, #4]
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40021000 	.word	0x40021000
 800537c:	007a1200 	.word	0x007a1200
 8005380:	00f42400 	.word	0x00f42400

08005384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800538c:	2300      	movs	r3, #0
 800538e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005390:	2300      	movs	r3, #0
 8005392:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8098 	beq.w	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053a2:	2300      	movs	r3, #0
 80053a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053a6:	4b43      	ldr	r3, [pc, #268]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10d      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b2:	4b40      	ldr	r3, [pc, #256]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b6:	4a3f      	ldr	r2, [pc, #252]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053be:	4b3d      	ldr	r3, [pc, #244]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ca:	2301      	movs	r3, #1
 80053cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ce:	4b3a      	ldr	r3, [pc, #232]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a39      	ldr	r2, [pc, #228]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053da:	f7fb ff89 	bl	80012f0 <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e0:	e009      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fb ff85 	bl	80012f0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d902      	bls.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	74fb      	strb	r3, [r7, #19]
        break;
 80053f4:	e005      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f6:	4b30      	ldr	r3, [pc, #192]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ef      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005402:	7cfb      	ldrb	r3, [r7, #19]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d159      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005408:	4b2a      	ldr	r3, [pc, #168]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005412:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	d019      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005424:	4b23      	ldr	r3, [pc, #140]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800542e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005430:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005436:	4a1f      	ldr	r2, [pc, #124]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005440:	4b1c      	ldr	r3, [pc, #112]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005450:	4a18      	ldr	r2, [pc, #96]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fb ff45 	bl	80012f0 <HAL_GetTick>
 8005466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005468:	e00b      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fb ff41 	bl	80012f0 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d902      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	74fb      	strb	r3, [r7, #19]
            break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005482:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ec      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	4b07      	ldr	r3, [pc, #28]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	4903      	ldr	r1, [pc, #12]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054ac:	e008      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	74bb      	strb	r3, [r7, #18]
 80054b2:	e005      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c0:	7c7b      	ldrb	r3, [r7, #17]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c6:	4ba6      	ldr	r3, [pc, #664]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ca:	4aa5      	ldr	r2, [pc, #660]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054de:	4ba0      	ldr	r3, [pc, #640]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	f023 0203 	bic.w	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	499c      	ldr	r1, [pc, #624]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005500:	4b97      	ldr	r3, [pc, #604]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	f023 020c 	bic.w	r2, r3, #12
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	4994      	ldr	r1, [pc, #592]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005522:	4b8f      	ldr	r3, [pc, #572]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	498b      	ldr	r1, [pc, #556]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005544:	4b86      	ldr	r3, [pc, #536]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4983      	ldr	r1, [pc, #524]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005566:	4b7e      	ldr	r3, [pc, #504]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	497a      	ldr	r1, [pc, #488]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005588:	4b75      	ldr	r3, [pc, #468]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	4972      	ldr	r1, [pc, #456]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4969      	ldr	r1, [pc, #420]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055cc:	4b64      	ldr	r3, [pc, #400]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	4961      	ldr	r1, [pc, #388]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	4958      	ldr	r1, [pc, #352]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d015      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005610:	4b53      	ldr	r3, [pc, #332]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	4950      	ldr	r1, [pc, #320]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562e:	d105      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005630:	4b4b      	ldr	r3, [pc, #300]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a4a      	ldr	r2, [pc, #296]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800563a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005644:	2b00      	cmp	r3, #0
 8005646:	d015      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005648:	4b45      	ldr	r3, [pc, #276]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	4942      	ldr	r1, [pc, #264]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005668:	4b3d      	ldr	r3, [pc, #244]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a3c      	ldr	r2, [pc, #240]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005672:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005680:	4b37      	ldr	r3, [pc, #220]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	4934      	ldr	r1, [pc, #208]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800569e:	d105      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b8:	4b29      	ldr	r3, [pc, #164]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c6:	4926      	ldr	r1, [pc, #152]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d8:	4b21      	ldr	r3, [pc, #132]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a20      	ldr	r2, [pc, #128]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	4918      	ldr	r1, [pc, #96]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800570e:	d105      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005710:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a12      	ldr	r2, [pc, #72]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005728:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	490a      	ldr	r1, [pc, #40]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005748:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005752:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005754:	7cbb      	ldrb	r3, [r7, #18]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000

08005764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e049      	b.n	800580a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fb fbe8 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 faa4 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e049      	b.n	80058b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f841 	bl	80058c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f000 fa4d 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e0ff      	b.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b14      	cmp	r3, #20
 80058fe:	f200 80f0 	bhi.w	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005902:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	0800595d 	.word	0x0800595d
 800590c:	08005ae3 	.word	0x08005ae3
 8005910:	08005ae3 	.word	0x08005ae3
 8005914:	08005ae3 	.word	0x08005ae3
 8005918:	0800599d 	.word	0x0800599d
 800591c:	08005ae3 	.word	0x08005ae3
 8005920:	08005ae3 	.word	0x08005ae3
 8005924:	08005ae3 	.word	0x08005ae3
 8005928:	080059df 	.word	0x080059df
 800592c:	08005ae3 	.word	0x08005ae3
 8005930:	08005ae3 	.word	0x08005ae3
 8005934:	08005ae3 	.word	0x08005ae3
 8005938:	08005a1f 	.word	0x08005a1f
 800593c:	08005ae3 	.word	0x08005ae3
 8005940:	08005ae3 	.word	0x08005ae3
 8005944:	08005ae3 	.word	0x08005ae3
 8005948:	08005a61 	.word	0x08005a61
 800594c:	08005ae3 	.word	0x08005ae3
 8005950:	08005ae3 	.word	0x08005ae3
 8005954:	08005ae3 	.word	0x08005ae3
 8005958:	08005aa1 	.word	0x08005aa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fa60 	bl	8005e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0208 	orr.w	r2, r2, #8
 8005976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6999      	ldr	r1, [r3, #24]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	619a      	str	r2, [r3, #24]
      break;
 800599a:	e0a5      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fad0 	bl	8005f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6999      	ldr	r1, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	619a      	str	r2, [r3, #24]
      break;
 80059dc:	e084      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fb39 	bl	800605c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0208 	orr.w	r2, r2, #8
 80059f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0204 	bic.w	r2, r2, #4
 8005a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69d9      	ldr	r1, [r3, #28]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	61da      	str	r2, [r3, #28]
      break;
 8005a1c:	e064      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fba1 	bl	800616c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	021a      	lsls	r2, r3, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	61da      	str	r2, [r3, #28]
      break;
 8005a5e:	e043      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fc0a 	bl	8006280 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0204 	bic.w	r2, r2, #4
 8005a8a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a9e:	e023      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fc4e 	bl	8006348 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ae0:	e002      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop

08005afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIM_ConfigClockSource+0x1c>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e0de      	b.n	8005cd6 <HAL_TIM_ConfigClockSource+0x1da>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005b36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a63      	ldr	r2, [pc, #396]	@ (8005ce0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	f000 80a9 	beq.w	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005b58:	4a61      	ldr	r2, [pc, #388]	@ (8005ce0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	f200 80ae 	bhi.w	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005b60:	4a60      	ldr	r2, [pc, #384]	@ (8005ce4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f000 80a1 	beq.w	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005b68:	4a5e      	ldr	r2, [pc, #376]	@ (8005ce4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f200 80a6 	bhi.w	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005b70:	4a5d      	ldr	r2, [pc, #372]	@ (8005ce8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	f000 8099 	beq.w	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005b78:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f200 809e 	bhi.w	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005b80:	4a5a      	ldr	r2, [pc, #360]	@ (8005cec <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	f000 8091 	beq.w	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005b88:	4a58      	ldr	r2, [pc, #352]	@ (8005cec <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	f200 8096 	bhi.w	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005b90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b94:	f000 8089 	beq.w	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005b98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b9c:	f200 808e 	bhi.w	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba4:	d03e      	beq.n	8005c24 <HAL_TIM_ConfigClockSource+0x128>
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005baa:	f200 8087 	bhi.w	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb2:	f000 8086 	beq.w	8005cc2 <HAL_TIM_ConfigClockSource+0x1c6>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d87f      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bbc:	2b70      	cmp	r3, #112	@ 0x70
 8005bbe:	d01a      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8005bc0:	2b70      	cmp	r3, #112	@ 0x70
 8005bc2:	d87b      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bc4:	2b60      	cmp	r3, #96	@ 0x60
 8005bc6:	d050      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x16e>
 8005bc8:	2b60      	cmp	r3, #96	@ 0x60
 8005bca:	d877      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bcc:	2b50      	cmp	r3, #80	@ 0x50
 8005bce:	d03c      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x14e>
 8005bd0:	2b50      	cmp	r3, #80	@ 0x50
 8005bd2:	d873      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bd4:	2b40      	cmp	r3, #64	@ 0x40
 8005bd6:	d058      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x18e>
 8005bd8:	2b40      	cmp	r3, #64	@ 0x40
 8005bda:	d86f      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bdc:	2b30      	cmp	r3, #48	@ 0x30
 8005bde:	d064      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005be0:	2b30      	cmp	r3, #48	@ 0x30
 8005be2:	d86b      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d060      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d867      	bhi.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d05c      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d05a      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x1ae>
 8005bf4:	e062      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c06:	f000 fc81 	bl	800650c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	609a      	str	r2, [r3, #8]
      break;
 8005c22:	e04f      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c34:	f000 fc6a 	bl	800650c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c46:	609a      	str	r2, [r3, #8]
      break;
 8005c48:	e03c      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c56:	461a      	mov	r2, r3
 8005c58:	f000 fbdc 	bl	8006414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2150      	movs	r1, #80	@ 0x50
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fc35 	bl	80064d2 <TIM_ITRx_SetConfig>
      break;
 8005c68:	e02c      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c76:	461a      	mov	r2, r3
 8005c78:	f000 fbfb 	bl	8006472 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2160      	movs	r1, #96	@ 0x60
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fc25 	bl	80064d2 <TIM_ITRx_SetConfig>
      break;
 8005c88:	e01c      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c96:	461a      	mov	r2, r3
 8005c98:	f000 fbbc 	bl	8006414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2140      	movs	r1, #64	@ 0x40
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fc15 	bl	80064d2 <TIM_ITRx_SetConfig>
      break;
 8005ca8:	e00c      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f000 fc0c 	bl	80064d2 <TIM_ITRx_SetConfig>
      break;
 8005cba:	e003      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc0:	e000      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	00100070 	.word	0x00100070
 8005ce4:	00100040 	.word	0x00100040
 8005ce8:	00100030 	.word	0x00100030
 8005cec:	00100020 	.word	0x00100020

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a42      	ldr	r2, [pc, #264]	@ (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3f      	ldr	r2, [pc, #252]	@ (8005e10 <TIM_Base_SetConfig+0x120>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e14 <TIM_Base_SetConfig+0x124>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3d      	ldr	r2, [pc, #244]	@ (8005e18 <TIM_Base_SetConfig+0x128>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a33      	ldr	r2, [pc, #204]	@ (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01b      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d48:	d017      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a30      	ldr	r2, [pc, #192]	@ (8005e10 <TIM_Base_SetConfig+0x120>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2f      	ldr	r2, [pc, #188]	@ (8005e14 <TIM_Base_SetConfig+0x124>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e18 <TIM_Base_SetConfig+0x128>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2d      	ldr	r2, [pc, #180]	@ (8005e1c <TIM_Base_SetConfig+0x12c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e20 <TIM_Base_SetConfig+0x130>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2b      	ldr	r2, [pc, #172]	@ (8005e24 <TIM_Base_SetConfig+0x134>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a16      	ldr	r2, [pc, #88]	@ (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0xe8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a17      	ldr	r2, [pc, #92]	@ (8005e18 <TIM_Base_SetConfig+0x128>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0xe8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a16      	ldr	r2, [pc, #88]	@ (8005e1c <TIM_Base_SetConfig+0x12c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0xe8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a15      	ldr	r2, [pc, #84]	@ (8005e20 <TIM_Base_SetConfig+0x130>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0xe8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a14      	ldr	r2, [pc, #80]	@ (8005e24 <TIM_Base_SetConfig+0x134>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d103      	bne.n	8005de0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d105      	bne.n	8005dfe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]
  }
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800
 8005e18:	40013400 	.word	0x40013400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400
 8005e24:	40014800 	.word	0x40014800

08005e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f023 0201 	bic.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0302 	bic.w	r3, r3, #2
 8005e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a2c      	ldr	r2, [pc, #176]	@ (8005f34 <TIM_OC1_SetConfig+0x10c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00f      	beq.n	8005ea8 <TIM_OC1_SetConfig+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f38 <TIM_OC1_SetConfig+0x110>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_OC1_SetConfig+0x80>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a2a      	ldr	r2, [pc, #168]	@ (8005f3c <TIM_OC1_SetConfig+0x114>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <TIM_OC1_SetConfig+0x80>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a29      	ldr	r2, [pc, #164]	@ (8005f40 <TIM_OC1_SetConfig+0x118>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_OC1_SetConfig+0x80>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a28      	ldr	r2, [pc, #160]	@ (8005f44 <TIM_OC1_SetConfig+0x11c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10c      	bne.n	8005ec2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0308 	bic.w	r3, r3, #8
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f34 <TIM_OC1_SetConfig+0x10c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00f      	beq.n	8005eea <TIM_OC1_SetConfig+0xc2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f38 <TIM_OC1_SetConfig+0x110>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <TIM_OC1_SetConfig+0xc2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <TIM_OC1_SetConfig+0x114>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d007      	beq.n	8005eea <TIM_OC1_SetConfig+0xc2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a18      	ldr	r2, [pc, #96]	@ (8005f40 <TIM_OC1_SetConfig+0x118>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <TIM_OC1_SetConfig+0xc2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a17      	ldr	r2, [pc, #92]	@ (8005f44 <TIM_OC1_SetConfig+0x11c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d111      	bne.n	8005f0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800

08005f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f023 0210 	bic.w	r2, r3, #16
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a28      	ldr	r2, [pc, #160]	@ (8006048 <TIM_OC2_SetConfig+0x100>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC2_SetConfig+0x6c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a27      	ldr	r2, [pc, #156]	@ (800604c <TIM_OC2_SetConfig+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d10d      	bne.n	8005fd0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <TIM_OC2_SetConfig+0x100>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_OC2_SetConfig+0xb0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <TIM_OC2_SetConfig+0x104>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <TIM_OC2_SetConfig+0xb0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <TIM_OC2_SetConfig+0x108>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_OC2_SetConfig+0xb0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a1a      	ldr	r2, [pc, #104]	@ (8006054 <TIM_OC2_SetConfig+0x10c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_OC2_SetConfig+0xb0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a19      	ldr	r2, [pc, #100]	@ (8006058 <TIM_OC2_SetConfig+0x110>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d113      	bne.n	8006020 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40013400 	.word	0x40013400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a27      	ldr	r2, [pc, #156]	@ (8006158 <TIM_OC3_SetConfig+0xfc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC3_SetConfig+0x6a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a26      	ldr	r2, [pc, #152]	@ (800615c <TIM_OC3_SetConfig+0x100>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10d      	bne.n	80060e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <TIM_OC3_SetConfig+0xfc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00f      	beq.n	800610a <TIM_OC3_SetConfig+0xae>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <TIM_OC3_SetConfig+0x100>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00b      	beq.n	800610a <TIM_OC3_SetConfig+0xae>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006160 <TIM_OC3_SetConfig+0x104>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <TIM_OC3_SetConfig+0xae>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a19      	ldr	r2, [pc, #100]	@ (8006164 <TIM_OC3_SetConfig+0x108>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC3_SetConfig+0xae>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <TIM_OC3_SetConfig+0x10c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d113      	bne.n	8006132 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400
 8006160:	40014000 	.word	0x40014000
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800

0800616c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	031b      	lsls	r3, r3, #12
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a28      	ldr	r2, [pc, #160]	@ (800626c <TIM_OC4_SetConfig+0x100>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0x6c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a27      	ldr	r2, [pc, #156]	@ (8006270 <TIM_OC4_SetConfig+0x104>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10d      	bne.n	80061f4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <TIM_OC4_SetConfig+0x100>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00f      	beq.n	800621c <TIM_OC4_SetConfig+0xb0>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <TIM_OC4_SetConfig+0x104>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00b      	beq.n	800621c <TIM_OC4_SetConfig+0xb0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1b      	ldr	r2, [pc, #108]	@ (8006274 <TIM_OC4_SetConfig+0x108>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d007      	beq.n	800621c <TIM_OC4_SetConfig+0xb0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a1a      	ldr	r2, [pc, #104]	@ (8006278 <TIM_OC4_SetConfig+0x10c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_OC4_SetConfig+0xb0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a19      	ldr	r2, [pc, #100]	@ (800627c <TIM_OC4_SetConfig+0x110>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d113      	bne.n	8006244 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006222:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800622a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	019b      	lsls	r3, r3, #6
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	019b      	lsls	r3, r3, #6
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40013400 	.word	0x40013400
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80062c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <TIM_OC5_SetConfig+0xb4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_OC5_SetConfig+0x7a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a16      	ldr	r2, [pc, #88]	@ (8006338 <TIM_OC5_SetConfig+0xb8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_OC5_SetConfig+0x7a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a15      	ldr	r2, [pc, #84]	@ (800633c <TIM_OC5_SetConfig+0xbc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_OC5_SetConfig+0x7a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a14      	ldr	r2, [pc, #80]	@ (8006340 <TIM_OC5_SetConfig+0xc0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_OC5_SetConfig+0x7a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a13      	ldr	r2, [pc, #76]	@ (8006344 <TIM_OC5_SetConfig+0xc4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d109      	bne.n	800630e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	621a      	str	r2, [r3, #32]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800

08006348 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800638e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	051b      	lsls	r3, r3, #20
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a18      	ldr	r2, [pc, #96]	@ (8006400 <TIM_OC6_SetConfig+0xb8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00f      	beq.n	80063c4 <TIM_OC6_SetConfig+0x7c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a17      	ldr	r2, [pc, #92]	@ (8006404 <TIM_OC6_SetConfig+0xbc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_OC6_SetConfig+0x7c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a16      	ldr	r2, [pc, #88]	@ (8006408 <TIM_OC6_SetConfig+0xc0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_OC6_SetConfig+0x7c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a15      	ldr	r2, [pc, #84]	@ (800640c <TIM_OC6_SetConfig+0xc4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC6_SetConfig+0x7c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a14      	ldr	r2, [pc, #80]	@ (8006410 <TIM_OC6_SetConfig+0xc8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d109      	bne.n	80063d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40013400 	.word	0x40013400
 8006408:	40014000 	.word	0x40014000
 800640c:	40014400 	.word	0x40014400
 8006410:	40014800 	.word	0x40014800

08006414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f023 0201 	bic.w	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800643e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 030a 	bic.w	r3, r3, #10
 8006450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006472:	b480      	push	{r7}
 8006474:	b087      	sub	sp, #28
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f023 0210 	bic.w	r2, r3, #16
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800649c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	031b      	lsls	r3, r3, #12
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f043 0307 	orr.w	r3, r3, #7
 80064f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	021a      	lsls	r2, r3, #8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	431a      	orrs	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006560:	2302      	movs	r3, #2
 8006562:	e065      	b.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2c      	ldr	r2, [pc, #176]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2b      	ldr	r2, [pc, #172]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d108      	bne.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800659e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d018      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065da:	d013      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a18      	ldr	r2, [pc, #96]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00e      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a17      	ldr	r2, [pc, #92]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a13      	ldr	r2, [pc, #76]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d10c      	bne.n	800661e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40013400 	.word	0x40013400
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40014000 	.word	0x40014000

08006650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006668:	2302      	movs	r3, #2
 800666a:	e073      	b.n	8006754 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a18      	ldr	r2, [pc, #96]	@ (8006764 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d11c      	bne.n	8006742 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	051b      	lsls	r3, r3, #20
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40013400 	.word	0x40013400

08006768 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006778:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800677c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800679e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80067a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	4013      	ands	r3, r2
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	1d3b      	adds	r3, r7, #4
 80067d6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006808:	b480      	push	{r7}
 800680a:	b0a7      	sub	sp, #156	@ 0x9c
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800682a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800682e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	78db      	ldrb	r3, [r3, #3]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d81f      	bhi.n	800687a <USB_ActivateEndpoint+0x72>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <USB_ActivateEndpoint+0x38>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006851 	.word	0x08006851
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006883 	.word	0x08006883
 800684c:	0800685f 	.word	0x0800685f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006850:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006858:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800685c:	e012      	b.n	8006884 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800685e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006862:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006866:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800686a:	e00b      	b.n	8006884 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800686c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006870:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006874:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006878:	e004      	b.n	8006884 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006880:	e000      	b.n	8006884 <USB_ActivateEndpoint+0x7c>
      break;
 8006882:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	441a      	add	r2, r3
 800688e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068be:	b21a      	sxth	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	b21b      	sxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	b21b      	sxth	r3, r3
 80068ca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80068dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	7b1b      	ldrb	r3, [r3, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 8180 	bne.w	8006bfa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8084 	beq.w	8006a0c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4413      	add	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	00da      	lsls	r2, r3, #3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	88db      	ldrh	r3, [r3, #6]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	827b      	strh	r3, [r7, #18]
 8006946:	8a7b      	ldrh	r3, [r7, #18]
 8006948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01b      	beq.n	8006988 <USB_ActivateEndpoint+0x180>
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006966:	823b      	strh	r3, [r7, #16]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	8a3b      	ldrh	r3, [r7, #16]
 8006974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006980:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006984:	b29b      	uxth	r3, r3
 8006986:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	78db      	ldrb	r3, [r3, #3]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d020      	beq.n	80069d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a6:	81bb      	strh	r3, [r7, #12]
 80069a8:	89bb      	ldrh	r3, [r7, #12]
 80069aa:	f083 0320 	eor.w	r3, r3, #32
 80069ae:	81bb      	strh	r3, [r7, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	89bb      	ldrh	r3, [r7, #12]
 80069bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	8013      	strh	r3, [r2, #0]
 80069d0:	e3f9      	b.n	80071c6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]
 8006a0a:	e3dc      	b.n	80071c6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	4413      	add	r3, r2
 8006a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	00da      	lsls	r2, r3, #3
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	4413      	add	r3, r2
 8006a2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	88db      	ldrh	r3, [r3, #6]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	4413      	add	r3, r2
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	00da      	lsls	r2, r3, #3
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <USB_ActivateEndpoint+0x28a>
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e041      	b.n	8006b16 <USB_ActivateEndpoint+0x30e>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a98:	d81c      	bhi.n	8006ad4 <USB_ActivateEndpoint+0x2cc>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <USB_ActivateEndpoint+0x2b2>
 8006ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e020      	b.n	8006b16 <USB_ActivateEndpoint+0x30e>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <USB_ActivateEndpoint+0x2ec>
 8006aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	029b      	lsls	r3, r3, #10
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01b      	beq.n	8006b66 <USB_ActivateEndpoint+0x35e>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b44:	843b      	strh	r3, [r7, #32]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8c3b      	ldrh	r3, [r7, #32]
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d124      	bne.n	8006bb8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b84:	83bb      	strh	r3, [r7, #28]
 8006b86:	8bbb      	ldrh	r3, [r7, #28]
 8006b88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b8c:	83bb      	strh	r3, [r7, #28]
 8006b8e:	8bbb      	ldrh	r3, [r7, #28]
 8006b90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b94:	83bb      	strh	r3, [r7, #28]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	8bbb      	ldrh	r3, [r7, #28]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]
 8006bb6:	e306      	b.n	80071c6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bce:	83fb      	strh	r3, [r7, #30]
 8006bd0:	8bfb      	ldrh	r3, [r7, #30]
 8006bd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bd6:	83fb      	strh	r3, [r7, #30]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	8bfb      	ldrh	r3, [r7, #30]
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]
 8006bf8:	e2e5      	b.n	80071c6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	78db      	ldrb	r3, [r3, #3]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d11e      	bne.n	8006c40 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c18:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8013      	strh	r3, [r2, #0]
 8006c3e:	e01d      	b.n	8006c7c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c56:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c8c:	4413      	add	r3, r2
 8006c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	00da      	lsls	r2, r3, #3
 8006c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	891b      	ldrh	r3, [r3, #8]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cc0:	4413      	add	r3, r2
 8006cc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	00da      	lsls	r2, r3, #3
 8006cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	895b      	ldrh	r3, [r3, #10]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ce2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 81af 	bne.w	800704c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006cfe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01d      	beq.n	8006d46 <USB_ActivateEndpoint+0x53e>
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d20:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006d56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01d      	beq.n	8006d9e <USB_ActivateEndpoint+0x596>
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d78:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d16b      	bne.n	8006e7e <USB_ActivateEndpoint+0x676>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006db6:	4413      	add	r3, r2
 8006db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	00da      	lsls	r2, r3, #3
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <USB_ActivateEndpoint+0x5f0>
 8006de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	e05d      	b.n	8006eb4 <USB_ActivateEndpoint+0x6ac>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dfe:	d81c      	bhi.n	8006e3a <USB_ActivateEndpoint+0x632>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <USB_ActivateEndpoint+0x618>
 8006e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	029b      	lsls	r3, r3, #10
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	4313      	orrs	r3, r2
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	e03c      	b.n	8006eb4 <USB_ActivateEndpoint+0x6ac>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <USB_ActivateEndpoint+0x652>
 8006e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e54:	3b01      	subs	r3, #1
 8006e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	029b      	lsls	r3, r3, #10
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e01a      	b.n	8006eb4 <USB_ActivateEndpoint+0x6ac>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d116      	bne.n	8006eb4 <USB_ActivateEndpoint+0x6ac>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e96:	4413      	add	r3, r2
 8006e98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	00da      	lsls	r2, r3, #3
 8006ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ea8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d16b      	bne.n	8006f98 <USB_ActivateEndpoint+0x790>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed0:	4413      	add	r3, r2
 8006ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	00da      	lsls	r2, r3, #3
 8006eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006edc:	4413      	add	r3, r2
 8006ede:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <USB_ActivateEndpoint+0x70a>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	e05b      	b.n	8006fca <USB_ActivateEndpoint+0x7c2>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f18:	d81c      	bhi.n	8006f54 <USB_ActivateEndpoint+0x74c>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <USB_ActivateEndpoint+0x732>
 8006f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f34:	3301      	adds	r3, #1
 8006f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	029b      	lsls	r3, r3, #10
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e03a      	b.n	8006fca <USB_ActivateEndpoint+0x7c2>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d104      	bne.n	8006f74 <USB_ActivateEndpoint+0x76c>
 8006f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	029b      	lsls	r3, r3, #10
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e018      	b.n	8006fca <USB_ActivateEndpoint+0x7c2>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d114      	bne.n	8006fca <USB_ActivateEndpoint+0x7c2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fac:	4413      	add	r3, r2
 8006fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	00da      	lsls	r2, r3, #3
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fb8:	4413      	add	r3, r2
 8006fba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006fe2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fe4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fe8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006fea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ff0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	441a      	add	r2, r3
 8006ffc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007028:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007036:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800703e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007046:	b29b      	uxth	r3, r3
 8007048:	8013      	strh	r3, [r2, #0]
 800704a:	e0bc      	b.n	80071c6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800705c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01d      	beq.n	80070a4 <USB_ActivateEndpoint+0x89c>
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800709c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80070b4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80070b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01d      	beq.n	80070fc <USB_ActivateEndpoint+0x8f4>
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	78db      	ldrb	r3, [r3, #3]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d024      	beq.n	800714e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800711e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007122:	f083 0320 	eor.w	r3, r3, #32
 8007126:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800713c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007148:	b29b      	uxth	r3, r3
 800714a:	8013      	strh	r3, [r2, #0]
 800714c:	e01d      	b.n	800718a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007164:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800717a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800717e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800719c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80071b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80071c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	379c      	adds	r7, #156	@ 0x9c
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop

080071d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071d8:	b480      	push	{r7}
 80071da:	b08d      	sub	sp, #52	@ 0x34
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	7b1b      	ldrb	r3, [r3, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 808e 	bne.w	8007308 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d044      	beq.n	800727e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	81bb      	strh	r3, [r7, #12]
 8007202:	89bb      	ldrh	r3, [r7, #12]
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01b      	beq.n	8007244 <USB_DeactivateEndpoint+0x6c>
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800721e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007222:	817b      	strh	r3, [r7, #10]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	897b      	ldrh	r3, [r7, #10]
 8007230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007240:	b29b      	uxth	r3, r3
 8007242:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800725a:	813b      	strh	r3, [r7, #8]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]
 800727c:	e192      	b.n	80075a4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	827b      	strh	r3, [r7, #18]
 800728c:	8a7b      	ldrh	r3, [r7, #18]
 800728e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01b      	beq.n	80072ce <USB_DeactivateEndpoint+0xf6>
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ac:	823b      	strh	r3, [r7, #16]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	8a3b      	ldrh	r3, [r7, #16]
 80072ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e4:	81fb      	strh	r3, [r7, #14]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
 8007306:	e14d      	b.n	80075a4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 80a5 	bne.w	800745c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	843b      	strh	r3, [r7, #32]
 8007320:	8c3b      	ldrh	r3, [r7, #32]
 8007322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01b      	beq.n	8007362 <USB_DeactivateEndpoint+0x18a>
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800733c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007340:	83fb      	strh	r3, [r7, #30]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	441a      	add	r2, r3
 800734c:	8bfb      	ldrh	r3, [r7, #30]
 800734e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007356:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800735a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735e:	b29b      	uxth	r3, r3
 8007360:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	83bb      	strh	r3, [r7, #28]
 8007370:	8bbb      	ldrh	r3, [r7, #28]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01b      	beq.n	80073b2 <USB_DeactivateEndpoint+0x1da>
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800738c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007390:	837b      	strh	r3, [r7, #26]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	441a      	add	r2, r3
 800739c:	8b7b      	ldrh	r3, [r7, #26]
 800739e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c8:	833b      	strh	r3, [r7, #24]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	441a      	add	r2, r3
 80073d4:	8b3b      	ldrh	r3, [r7, #24]
 80073d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007400:	82fb      	strh	r3, [r7, #22]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	441a      	add	r2, r3
 800740c:	8afb      	ldrh	r3, [r7, #22]
 800740e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800741a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007438:	82bb      	strh	r3, [r7, #20]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	441a      	add	r2, r3
 8007444:	8abb      	ldrh	r3, [r7, #20]
 8007446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800744a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800744e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]
 800745a:	e0a3      	b.n	80075a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800746a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800746c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01b      	beq.n	80074ac <USB_DeactivateEndpoint+0x2d4>
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80074ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80074bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01b      	beq.n	80074fc <USB_DeactivateEndpoint+0x324>
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800750e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007512:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	441a      	add	r2, r3
 800751e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800752c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007530:	b29b      	uxth	r3, r3
 8007532:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	441a      	add	r2, r3
 8007556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800757e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007582:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	441a      	add	r2, r3
 800758e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800759c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3734      	adds	r7, #52	@ 0x34
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b0ac      	sub	sp, #176	@ 0xb0
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 84ca 	bne.w	8007f5a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d904      	bls.n	80075dc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075da:	e003      	b.n	80075e4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	7b1b      	ldrb	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d122      	bne.n	8007632 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	6959      	ldr	r1, [r3, #20]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	88da      	ldrh	r2, [r3, #6]
 80075f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 febd 	bl	800837a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800760a:	b29b      	uxth	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	4413      	add	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	00da      	lsls	r2, r3, #3
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	f000 bc6f 	b.w	8007f10 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	2b02      	cmp	r3, #2
 8007638:	f040 831e 	bne.w	8007c78 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6a1a      	ldr	r2, [r3, #32]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	f240 82cf 	bls.w	8007be8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800765c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007660:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	441a      	add	r2, r3
 800766e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800767e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007682:	b29b      	uxth	r3, r3
 8007684:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 814f 	beq.w	800794a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d16b      	bne.n	8007790 <USB_EPStartXfer+0x1de>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	4413      	add	r3, r2
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	00da      	lsls	r2, r3, #3
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	4413      	add	r3, r2
 80076d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076da:	627b      	str	r3, [r7, #36]	@ 0x24
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <USB_EPStartXfer+0x158>
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007702:	b29a      	uxth	r2, r3
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e05b      	b.n	80077c2 <USB_EPStartXfer+0x210>
 800770a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800770e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007710:	d81c      	bhi.n	800774c <USB_EPStartXfer+0x19a>
 8007712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800771c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <USB_EPStartXfer+0x180>
 8007728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800772c:	3301      	adds	r3, #1
 800772e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29a      	uxth	r2, r3
 8007738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800773c:	b29b      	uxth	r3, r3
 800773e:	029b      	lsls	r3, r3, #10
 8007740:	b29b      	uxth	r3, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	b29a      	uxth	r2, r3
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	801a      	strh	r2, [r3, #0]
 800774a:	e03a      	b.n	80077c2 <USB_EPStartXfer+0x210>
 800774c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800775a:	f003 031f 	and.w	r3, r3, #31
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <USB_EPStartXfer+0x1ba>
 8007762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007766:	3b01      	subs	r3, #1
 8007768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29a      	uxth	r2, r3
 8007772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007776:	b29b      	uxth	r3, r3
 8007778:	029b      	lsls	r3, r3, #10
 800777a:	b29b      	uxth	r3, r3
 800777c:	4313      	orrs	r3, r2
 800777e:	b29b      	uxth	r3, r3
 8007780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007788:	b29a      	uxth	r2, r3
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	e018      	b.n	80077c2 <USB_EPStartXfer+0x210>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d114      	bne.n	80077c2 <USB_EPStartXfer+0x210>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800779e:	b29b      	uxth	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	4413      	add	r3, r2
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	00da      	lsls	r2, r3, #3
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	4413      	add	r3, r2
 80077b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077bc:	b29a      	uxth	r2, r3
 80077be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	895b      	ldrh	r3, [r3, #10]
 80077c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6959      	ldr	r1, [r3, #20]
 80077ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fdce 	bl	800837a <USB_WritePMA>
            ep->xfer_buff += len;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077e6:	441a      	add	r2, r3
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d907      	bls.n	8007808 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	621a      	str	r2, [r3, #32]
 8007806:	e006      	b.n	8007816 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2200      	movs	r2, #0
 8007814:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d16b      	bne.n	80078f6 <USB_EPStartXfer+0x344>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	4413      	add	r3, r2
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	4413      	add	r3, r2
 800783c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784c:	b29a      	uxth	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <USB_EPStartXfer+0x2be>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007868:	b29a      	uxth	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e05d      	b.n	800792c <USB_EPStartXfer+0x37a>
 8007870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007874:	2b3e      	cmp	r3, #62	@ 0x3e
 8007876:	d81c      	bhi.n	80078b2 <USB_EPStartXfer+0x300>
 8007878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <USB_EPStartXfer+0x2e6>
 800788e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007892:	3301      	adds	r3, #1
 8007894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29a      	uxth	r2, r3
 800789e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e03c      	b.n	800792c <USB_EPStartXfer+0x37a>
 80078b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <USB_EPStartXfer+0x320>
 80078c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078cc:	3b01      	subs	r3, #1
 80078ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078dc:	b29b      	uxth	r3, r3
 80078de:	029b      	lsls	r3, r3, #10
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e01a      	b.n	800792c <USB_EPStartXfer+0x37a>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d116      	bne.n	800792c <USB_EPStartXfer+0x37a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	623b      	str	r3, [r7, #32]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007908:	b29b      	uxth	r3, r3
 800790a:	461a      	mov	r2, r3
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	4413      	add	r3, r2
 8007910:	623b      	str	r3, [r7, #32]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	00da      	lsls	r2, r3, #3
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	4413      	add	r3, r2
 800791c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007926:	b29a      	uxth	r2, r3
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	891b      	ldrh	r3, [r3, #8]
 8007930:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6959      	ldr	r1, [r3, #20]
 8007938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800793c:	b29b      	uxth	r3, r3
 800793e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fd19 	bl	800837a <USB_WritePMA>
 8007948:	e2e2      	b.n	8007f10 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d16b      	bne.n	8007a2a <USB_EPStartXfer+0x478>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007962:	4413      	add	r3, r2
 8007964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	00da      	lsls	r2, r3, #3
 800796c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800796e:	4413      	add	r3, r2
 8007970:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007974:	647b      	str	r3, [r7, #68]	@ 0x44
 8007976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007980:	b29a      	uxth	r2, r3
 8007982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <USB_EPStartXfer+0x3f2>
 800798e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	b29a      	uxth	r2, r3
 800799e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e05d      	b.n	8007a60 <USB_EPStartXfer+0x4ae>
 80079a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80079aa:	d81c      	bhi.n	80079e6 <USB_EPStartXfer+0x434>
 80079ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <USB_EPStartXfer+0x41a>
 80079c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079c6:	3301      	adds	r3, #1
 80079c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	029b      	lsls	r3, r3, #10
 80079da:	b29b      	uxth	r3, r3
 80079dc:	4313      	orrs	r3, r2
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e03c      	b.n	8007a60 <USB_EPStartXfer+0x4ae>
 80079e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <USB_EPStartXfer+0x454>
 80079fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e01a      	b.n	8007a60 <USB_EPStartXfer+0x4ae>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d116      	bne.n	8007a60 <USB_EPStartXfer+0x4ae>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a42:	4413      	add	r3, r2
 8007a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	00da      	lsls	r2, r3, #3
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4e:	4413      	add	r3, r2
 8007a50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	891b      	ldrh	r3, [r3, #8]
 8007a64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6959      	ldr	r1, [r3, #20]
 8007a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc7f 	bl	800837a <USB_WritePMA>
            ep->xfer_buff += len;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a84:	441a      	add	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d907      	bls.n	8007aa6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6a1a      	ldr	r2, [r3, #32]
 8007a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	621a      	str	r2, [r3, #32]
 8007aa4:	e006      	b.n	8007ab4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d16b      	bne.n	8007b98 <USB_EPStartXfer+0x5e6>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	4413      	add	r3, r2
 8007ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	00da      	lsls	r2, r3, #3
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	4413      	add	r3, r2
 8007ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <USB_EPStartXfer+0x560>
 8007afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e05b      	b.n	8007bca <USB_EPStartXfer+0x618>
 8007b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b16:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b18:	d81c      	bhi.n	8007b54 <USB_EPStartXfer+0x5a2>
 8007b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <USB_EPStartXfer+0x588>
 8007b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b34:	3301      	adds	r3, #1
 8007b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	029b      	lsls	r3, r3, #10
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e03a      	b.n	8007bca <USB_EPStartXfer+0x618>
 8007b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <USB_EPStartXfer+0x5c2>
 8007b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	029b      	lsls	r3, r3, #10
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4313      	orrs	r3, r2
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	e018      	b.n	8007bca <USB_EPStartXfer+0x618>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d114      	bne.n	8007bca <USB_EPStartXfer+0x618>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bac:	4413      	add	r3, r2
 8007bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	00da      	lsls	r2, r3, #3
 8007bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb8:	4413      	add	r3, r2
 8007bba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	895b      	ldrh	r3, [r3, #10]
 8007bce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6959      	ldr	r1, [r3, #20]
 8007bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fbca 	bl	800837a <USB_WritePMA>
 8007be6:	e193      	b.n	8007f10 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c06:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c3c:	4413      	add	r3, r2
 8007c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	00da      	lsls	r2, r3, #3
 8007c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c48:	4413      	add	r3, r2
 8007c4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	891b      	ldrh	r3, [r3, #8]
 8007c5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6959      	ldr	r1, [r3, #20]
 8007c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb82 	bl	800837a <USB_WritePMA>
 8007c76:	e14b      	b.n	8007f10 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	6a1a      	ldr	r2, [r3, #32]
 8007c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 809a 	beq.w	8007dd2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d16b      	bne.n	8007d82 <USB_EPStartXfer+0x7d0>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cba:	4413      	add	r3, r2
 8007cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	00da      	lsls	r2, r3, #3
 8007cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ccc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <USB_EPStartXfer+0x74a>
 8007ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cf8:	801a      	strh	r2, [r3, #0]
 8007cfa:	e05b      	b.n	8007db4 <USB_EPStartXfer+0x802>
 8007cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d02:	d81c      	bhi.n	8007d3e <USB_EPStartXfer+0x78c>
 8007d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d08:	085b      	lsrs	r3, r3, #1
 8007d0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <USB_EPStartXfer+0x772>
 8007d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d1e:	3301      	adds	r3, #1
 8007d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	029b      	lsls	r3, r3, #10
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d3a:	801a      	strh	r2, [r3, #0]
 8007d3c:	e03a      	b.n	8007db4 <USB_EPStartXfer+0x802>
 8007d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <USB_EPStartXfer+0x7ac>
 8007d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	029b      	lsls	r3, r3, #10
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	e018      	b.n	8007db4 <USB_EPStartXfer+0x802>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d114      	bne.n	8007db4 <USB_EPStartXfer+0x802>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d96:	4413      	add	r3, r2
 8007d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	00da      	lsls	r2, r3, #3
 8007da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007da2:	4413      	add	r3, r2
 8007da4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007db2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	895b      	ldrh	r3, [r3, #10]
 8007db8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6959      	ldr	r1, [r3, #20]
 8007dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fad5 	bl	800837a <USB_WritePMA>
 8007dd0:	e09e      	b.n	8007f10 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d16b      	bne.n	8007eb2 <USB_EPStartXfer+0x900>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007dea:	4413      	add	r3, r2
 8007dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	00da      	lsls	r2, r3, #3
 8007df4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007df6:	4413      	add	r3, r2
 8007df8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <USB_EPStartXfer+0x87a>
 8007e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	e063      	b.n	8007ef4 <USB_EPStartXfer+0x942>
 8007e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e32:	d81c      	bhi.n	8007e6e <USB_EPStartXfer+0x8bc>
 8007e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <USB_EPStartXfer+0x8a2>
 8007e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e4e:	3301      	adds	r3, #1
 8007e50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	029b      	lsls	r3, r3, #10
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e042      	b.n	8007ef4 <USB_EPStartXfer+0x942>
 8007e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USB_EPStartXfer+0x8dc>
 8007e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	029b      	lsls	r3, r3, #10
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	e020      	b.n	8007ef4 <USB_EPStartXfer+0x942>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d11c      	bne.n	8007ef4 <USB_EPStartXfer+0x942>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ece:	4413      	add	r3, r2
 8007ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	00da      	lsls	r2, r3, #3
 8007eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ede:	4413      	add	r3, r2
 8007ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ef2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	891b      	ldrh	r3, [r3, #8]
 8007ef8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	6959      	ldr	r1, [r3, #20]
 8007f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa35 	bl	800837a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f26:	817b      	strh	r3, [r7, #10]
 8007f28:	897b      	ldrh	r3, [r7, #10]
 8007f2a:	f083 0310 	eor.w	r3, r3, #16
 8007f2e:	817b      	strh	r3, [r7, #10]
 8007f30:	897b      	ldrh	r3, [r7, #10]
 8007f32:	f083 0320 	eor.w	r3, r3, #32
 8007f36:	817b      	strh	r3, [r7, #10]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	897b      	ldrh	r3, [r7, #10]
 8007f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	8013      	strh	r3, [r2, #0]
 8007f58:	e0d5      	b.n	8008106 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	7b1b      	ldrb	r3, [r3, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d156      	bne.n	8008010 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d122      	bne.n	8007fb0 <USB_EPStartXfer+0x9fe>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	78db      	ldrb	r3, [r3, #3]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d11e      	bne.n	8007fb0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	441a      	add	r2, r3
 8007f96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	8013      	strh	r3, [r2, #0]
 8007fae:	e01d      	b.n	8007fec <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	441a      	add	r2, r3
 8007fd4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	699a      	ldr	r2, [r3, #24]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d907      	bls.n	8008008 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	699a      	ldr	r2, [r3, #24]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	1ad2      	subs	r2, r2, r3
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	619a      	str	r2, [r3, #24]
 8008006:	e054      	b.n	80080b2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	619a      	str	r2, [r3, #24]
 800800e:	e050      	b.n	80080b2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	78db      	ldrb	r3, [r3, #3]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d142      	bne.n	800809e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d048      	beq.n	80080b2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008030:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <USB_EPStartXfer+0xa96>
 800803c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008048:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800804c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008050:	2b00      	cmp	r3, #0
 8008052:	d12e      	bne.n	80080b2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008054:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d128      	bne.n	80080b2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008076:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008094:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
 800809c:	e009      	b.n	80080b2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	78db      	ldrb	r3, [r3, #3]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d103      	bne.n	80080ae <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	619a      	str	r2, [r3, #24]
 80080ac:	e001      	b.n	80080b2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e02a      	b.n	8008108 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80080cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80080d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	441a      	add	r2, r3
 80080ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008102:	b29b      	uxth	r3, r3
 8008104:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	37b0      	adds	r7, #176	@ 0xb0
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d020      	beq.n	8008164 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008138:	81bb      	strh	r3, [r7, #12]
 800813a:	89bb      	ldrh	r3, [r7, #12]
 800813c:	f083 0310 	eor.w	r3, r3, #16
 8008140:	81bb      	strh	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	441a      	add	r2, r3
 800814c:	89bb      	ldrh	r3, [r7, #12]
 800814e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800815a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815e:	b29b      	uxth	r3, r3
 8008160:	8013      	strh	r3, [r2, #0]
 8008162:	e01f      	b.n	80081a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817a:	81fb      	strh	r3, [r7, #14]
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008182:	81fb      	strh	r3, [r7, #14]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	441a      	add	r2, r3
 800818e:	89fb      	ldrh	r3, [r7, #14]
 8008190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800819c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d04c      	beq.n	800825e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	823b      	strh	r3, [r7, #16]
 80081d2:	8a3b      	ldrh	r3, [r7, #16]
 80081d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01b      	beq.n	8008214 <USB_EPClearStall+0x62>
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f2:	81fb      	strh	r3, [r7, #14]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	89fb      	ldrh	r3, [r7, #14]
 8008200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800820c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008210:	b29b      	uxth	r3, r3
 8008212:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	78db      	ldrb	r3, [r3, #3]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d06c      	beq.n	80082f6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800822e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008232:	81bb      	strh	r3, [r7, #12]
 8008234:	89bb      	ldrh	r3, [r7, #12]
 8008236:	f083 0320 	eor.w	r3, r3, #32
 800823a:	81bb      	strh	r3, [r7, #12]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	89bb      	ldrh	r3, [r7, #12]
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]
 800825c:	e04b      	b.n	80082f6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	82fb      	strh	r3, [r7, #22]
 800826c:	8afb      	ldrh	r3, [r7, #22]
 800826e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01b      	beq.n	80082ae <USB_EPClearStall+0xfc>
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828c:	82bb      	strh	r3, [r7, #20]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	8abb      	ldrh	r3, [r7, #20]
 800829a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c4:	827b      	strh	r3, [r7, #18]
 80082c6:	8a7b      	ldrh	r3, [r7, #18]
 80082c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082cc:	827b      	strh	r3, [r7, #18]
 80082ce:	8a7b      	ldrh	r3, [r7, #18]
 80082d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082d4:	827b      	strh	r3, [r7, #18]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	8a7b      	ldrh	r3, [r7, #18]
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2280      	movs	r2, #128	@ 0x80
 800831a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800833a:	b29b      	uxth	r3, r3
 800833c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008368:	b29b      	uxth	r3, r3
 800836a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800836c:	68fb      	ldr	r3, [r7, #12]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800837a:	b480      	push	{r7}
 800837c:	b08b      	sub	sp, #44	@ 0x2c
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	4611      	mov	r1, r2
 8008386:	461a      	mov	r2, r3
 8008388:	460b      	mov	r3, r1
 800838a:	80fb      	strh	r3, [r7, #6]
 800838c:	4613      	mov	r3, r2
 800838e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008390:	88bb      	ldrh	r3, [r7, #4]
 8008392:	3301      	adds	r3, #1
 8008394:	085b      	lsrs	r3, r3, #1
 8008396:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80083b0:	e01c      	b.n	80083ec <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	3301      	adds	r3, #1
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	b21b      	sxth	r3, r3
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b21a      	sxth	r2, r3
 80083c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b21b      	sxth	r3, r3
 80083cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	8a7a      	ldrh	r2, [r7, #18]
 80083d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	3302      	adds	r3, #2
 80083d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	3301      	adds	r3, #1
 80083de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3301      	adds	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	3b01      	subs	r3, #1
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1df      	bne.n	80083b2 <USB_WritePMA+0x38>
  }
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	372c      	adds	r7, #44	@ 0x2c
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008400:	b480      	push	{r7}
 8008402:	b08b      	sub	sp, #44	@ 0x2c
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	460b      	mov	r3, r1
 8008410:	80fb      	strh	r3, [r7, #6]
 8008412:	4613      	mov	r3, r2
 8008414:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008416:	88bb      	ldrh	r3, [r7, #4]
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	b29b      	uxth	r3, r3
 800841c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008426:	88fa      	ldrh	r2, [r7, #6]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008430:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	627b      	str	r3, [r7, #36]	@ 0x24
 8008436:	e018      	b.n	800846a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	3302      	adds	r3, #2
 8008444:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	b2da      	uxtb	r2, r3
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	3301      	adds	r3, #1
 8008452:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	0a1b      	lsrs	r3, r3, #8
 8008458:	b2da      	uxtb	r2, r3
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3301      	adds	r3, #1
 8008462:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	3b01      	subs	r3, #1
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e3      	bne.n	8008438 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008470:	88bb      	ldrh	r3, [r7, #4]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d007      	beq.n	800848c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	b2da      	uxtb	r2, r3
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	701a      	strb	r2, [r3, #0]
  }
}
 800848c:	bf00      	nop
 800848e:	372c      	adds	r7, #44	@ 0x2c
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80084a4:	2010      	movs	r0, #16
 80084a6:	f001 fe75 	bl	800a194 <USBD_static_malloc>
 80084aa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d105      	bne.n	80084be <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80084ba:	2302      	movs	r3, #2
 80084bc:	e01b      	b.n	80084f6 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7c1b      	ldrb	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2207      	movs	r2, #7
 80084d2:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80084d4:	e002      	b.n	80084dc <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	220a      	movs	r2, #10
 80084da:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80084dc:	2304      	movs	r3, #4
 80084de:	2203      	movs	r2, #3
 80084e0:	2181      	movs	r1, #129	@ 0x81
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fd0f 	bl	8009f06 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800850a:	2181      	movs	r1, #129	@ 0x81
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fd20 	bl	8009f52 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800852e:	4618      	mov	r0, r3
 8008530:	f001 fe3e 	bl	800a1b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008558:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e0e8      	b.n	800873e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008574:	2b00      	cmp	r3, #0
 8008576:	d046      	beq.n	8008606 <USBD_HID_Setup+0xbe>
 8008578:	2b20      	cmp	r3, #32
 800857a:	f040 80d8 	bne.w	800872e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	3b02      	subs	r3, #2
 8008584:	2b09      	cmp	r3, #9
 8008586:	d836      	bhi.n	80085f6 <USBD_HID_Setup+0xae>
 8008588:	a201      	add	r2, pc, #4	@ (adr r2, 8008590 <USBD_HID_Setup+0x48>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085e7 	.word	0x080085e7
 8008594:	080085c7 	.word	0x080085c7
 8008598:	080085f7 	.word	0x080085f7
 800859c:	080085f7 	.word	0x080085f7
 80085a0:	080085f7 	.word	0x080085f7
 80085a4:	080085f7 	.word	0x080085f7
 80085a8:	080085f7 	.word	0x080085f7
 80085ac:	080085f7 	.word	0x080085f7
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085b9 	.word	0x080085b9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	885b      	ldrh	r3, [r3, #2]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	601a      	str	r2, [r3, #0]
          break;
 80085c4:	e01e      	b.n	8008604 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 f9b2 	bl	8009936 <USBD_CtlSendData>
          break;
 80085d2:	e017      	b.n	8008604 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	885b      	ldrh	r3, [r3, #2]
 80085d8:	0a1b      	lsrs	r3, r3, #8
 80085da:	b29b      	uxth	r3, r3
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	605a      	str	r2, [r3, #4]
          break;
 80085e4:	e00e      	b.n	8008604 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2201      	movs	r2, #1
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f9a1 	bl	8009936 <USBD_CtlSendData>
          break;
 80085f4:	e006      	b.n	8008604 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f92b 	bl	8009854 <USBD_CtlError>
          ret = USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	75fb      	strb	r3, [r7, #23]
          break;
 8008602:	bf00      	nop
      }
      break;
 8008604:	e09a      	b.n	800873c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	2b0b      	cmp	r3, #11
 800860c:	f200 8086 	bhi.w	800871c <USBD_HID_Setup+0x1d4>
 8008610:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <USBD_HID_Setup+0xd0>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008649 	.word	0x08008649
 800861c:	0800872b 	.word	0x0800872b
 8008620:	0800871d 	.word	0x0800871d
 8008624:	0800871d 	.word	0x0800871d
 8008628:	0800871d 	.word	0x0800871d
 800862c:	0800871d 	.word	0x0800871d
 8008630:	08008673 	.word	0x08008673
 8008634:	0800871d 	.word	0x0800871d
 8008638:	0800871d 	.word	0x0800871d
 800863c:	0800871d 	.word	0x0800871d
 8008640:	080086cb 	.word	0x080086cb
 8008644:	080086f5 	.word	0x080086f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b03      	cmp	r3, #3
 8008652:	d107      	bne.n	8008664 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008654:	f107 030a 	add.w	r3, r7, #10
 8008658:	2202      	movs	r2, #2
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f96a 	bl	8009936 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008662:	e063      	b.n	800872c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 f8f4 	bl	8009854 <USBD_CtlError>
            ret = USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	75fb      	strb	r3, [r7, #23]
          break;
 8008670:	e05c      	b.n	800872c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	0a1b      	lsrs	r3, r3, #8
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b22      	cmp	r3, #34	@ 0x22
 800867c:	d108      	bne.n	8008690 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	2b4a      	cmp	r3, #74	@ 0x4a
 8008684:	bf28      	it	cs
 8008686:	234a      	movcs	r3, #74	@ 0x4a
 8008688:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800868a:	4b2f      	ldr	r3, [pc, #188]	@ (8008748 <USBD_HID_Setup+0x200>)
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	e015      	b.n	80086bc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	885b      	ldrh	r3, [r3, #2]
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b21      	cmp	r3, #33	@ 0x21
 800869a:	d108      	bne.n	80086ae <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800869c:	4b2b      	ldr	r3, [pc, #172]	@ (800874c <USBD_HID_Setup+0x204>)
 800869e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	88db      	ldrh	r3, [r3, #6]
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	bf28      	it	cs
 80086a8:	2309      	movcs	r3, #9
 80086aa:	82bb      	strh	r3, [r7, #20]
 80086ac:	e006      	b.n	80086bc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f8cf 	bl	8009854 <USBD_CtlError>
            ret = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	75fb      	strb	r3, [r7, #23]
            break;
 80086ba:	e037      	b.n	800872c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80086bc:	8abb      	ldrh	r3, [r7, #20]
 80086be:	461a      	mov	r2, r3
 80086c0:	6939      	ldr	r1, [r7, #16]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f937 	bl	8009936 <USBD_CtlSendData>
          break;
 80086c8:	e030      	b.n	800872c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d107      	bne.n	80086e6 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3308      	adds	r3, #8
 80086da:	2201      	movs	r2, #1
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 f929 	bl	8009936 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086e4:	e022      	b.n	800872c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f8b3 	bl	8009854 <USBD_CtlError>
            ret = USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	75fb      	strb	r3, [r7, #23]
          break;
 80086f2:	e01b      	b.n	800872c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d106      	bne.n	800870e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800870c:	e00e      	b.n	800872c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f89f 	bl	8009854 <USBD_CtlError>
            ret = USBD_FAIL;
 8008716:	2303      	movs	r3, #3
 8008718:	75fb      	strb	r3, [r7, #23]
          break;
 800871a:	e007      	b.n	800872c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 f898 	bl	8009854 <USBD_CtlError>
          ret = USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	75fb      	strb	r3, [r7, #23]
          break;
 8008728:	e000      	b.n	800872c <USBD_HID_Setup+0x1e4>
          break;
 800872a:	bf00      	nop
      }
      break;
 800872c:	e006      	b.n	800873c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f88f 	bl	8009854 <USBD_CtlError>
      ret = USBD_FAIL;
 8008736:	2303      	movs	r3, #3
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	bf00      	nop
  }

  return (uint8_t)ret;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200000c8 	.word	0x200000c8
 800874c:	200000b0 	.word	0x200000b0

08008750 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2222      	movs	r2, #34	@ 0x22
 800875c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	@ (800876c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20000044 	.word	0x20000044

08008770 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2222      	movs	r2, #34	@ 0x22
 800877c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	@ (800878c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000068 	.word	0x20000068

08008790 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2222      	movs	r2, #34	@ 0x22
 800879c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800879e:	4b03      	ldr	r3, [pc, #12]	@ (80087ac <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	2000008c 	.word	0x2000008c

080087b0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087c2:	2200      	movs	r2, #0
 80087c4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	220a      	movs	r2, #10
 80087e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80087e2:	4b03      	ldr	r3, [pc, #12]	@ (80087f0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	200000bc 	.word	0x200000bc

080087f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	e01f      	b.n	800884c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	79fa      	ldrb	r2, [r7, #7]
 800883e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f001 faf7 	bl	8009e34 <USBD_LL_Init>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]

  return ret;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008868:	2303      	movs	r3, #3
 800886a:	e016      	b.n	800889a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800887a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008888:	f107 020e 	add.w	r2, r7, #14
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	4602      	mov	r2, r0
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fb10 	bl	8009ed0 <USBD_LL_Start>
 80088b0:	4603      	mov	r3, r0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d007      	beq.n	800892e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	4611      	mov	r1, r2
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	4798      	blx	r3
  }

  return USBD_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 ff48 	bl	80097e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800896c:	f003 031f 	and.w	r3, r3, #31
 8008970:	2b02      	cmp	r3, #2
 8008972:	d01a      	beq.n	80089aa <USBD_LL_SetupStage+0x72>
 8008974:	2b02      	cmp	r3, #2
 8008976:	d822      	bhi.n	80089be <USBD_LL_SetupStage+0x86>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <USBD_LL_SetupStage+0x4a>
 800897c:	2b01      	cmp	r3, #1
 800897e:	d00a      	beq.n	8008996 <USBD_LL_SetupStage+0x5e>
 8008980:	e01d      	b.n	80089be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f9f0 	bl	8008d70 <USBD_StdDevReq>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]
      break;
 8008994:	e020      	b.n	80089d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa54 	bl	8008e4c <USBD_StdItfReq>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
      break;
 80089a8:	e016      	b.n	80089d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa93 	bl	8008ede <USBD_StdEPReq>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
      break;
 80089bc:	e00c      	b.n	80089d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 fadf 	bl	8009f90 <USBD_LL_StallEP>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
      break;
 80089d6:	bf00      	nop
  }

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	460b      	mov	r3, r1
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d138      	bne.n	8008a68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80089fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d14a      	bne.n	8008a9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d913      	bls.n	8008a3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	1ad2      	subs	r2, r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bf28      	it	cs
 8008a2e:	4613      	movcs	r3, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 ffaa 	bl	800998e <USBD_CtlContinueRx>
 8008a3a:	e030      	b.n	8008a9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d10b      	bne.n	8008a60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 ffa5 	bl	80099b0 <USBD_CtlSendStatus>
 8008a66:	e01a      	b.n	8008a9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d114      	bne.n	8008a9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00e      	beq.n	8008a9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	7afa      	ldrb	r2, [r7, #11]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	4798      	blx	r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	e000      	b.n	8008aa0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ab6:	7afb      	ldrb	r3, [r7, #11]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d16b      	bne.n	8008b94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3314      	adds	r3, #20
 8008ac0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d156      	bne.n	8008b7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d914      	bls.n	8008b02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 ff3c 	bl	800996c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f001 faf2 	bl	800a0e4 <USBD_LL_PrepareReceive>
 8008b00:	e03b      	b.n	8008b7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d11c      	bne.n	8008b48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d316      	bcc.n	8008b48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d20f      	bcs.n	8008b48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 ff1d 	bl	800996c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f001 facf 	bl	800a0e4 <USBD_LL_PrepareReceive>
 8008b46:	e018      	b.n	8008b7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d10b      	bne.n	8008b6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b6c:	2180      	movs	r1, #128	@ 0x80
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f001 fa0e 	bl	8009f90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 ff2e 	bl	80099d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d122      	bne.n	8008bca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff fe98 	bl	80088ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008b92:	e01a      	b.n	8008bca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d114      	bne.n	8008bca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00e      	beq.n	8008bca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	7afa      	ldrb	r2, [r7, #11]
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	4798      	blx	r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	e000      	b.n	8008bcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e02f      	b.n	8008c68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00f      	beq.n	8008c32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6852      	ldr	r2, [r2, #4]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c32:	2340      	movs	r3, #64	@ 0x40
 8008c34:	2200      	movs	r2, #0
 8008c36:	2100      	movs	r1, #0
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 f964 	bl	8009f06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2240      	movs	r2, #64	@ 0x40
 8008c4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c4e:	2340      	movs	r3, #64	@ 0x40
 8008c50:	2200      	movs	r2, #0
 8008c52:	2180      	movs	r1, #128	@ 0x80
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 f956 	bl	8009f06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2240      	movs	r2, #64	@ 0x40
 8008c64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d106      	bne.n	8008cde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e012      	b.n	8008d28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d10b      	bne.n	8008d26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	3301      	adds	r3, #1
 8008d46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008d52:	021b      	lsls	r3, r3, #8
 8008d54:	b21a      	sxth	r2, r3
 8008d56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	b21b      	sxth	r3, r3
 8008d5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d60:	89fb      	ldrh	r3, [r7, #14]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
	...

08008d70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d86:	2b40      	cmp	r3, #64	@ 0x40
 8008d88:	d005      	beq.n	8008d96 <USBD_StdDevReq+0x26>
 8008d8a:	2b40      	cmp	r3, #64	@ 0x40
 8008d8c:	d853      	bhi.n	8008e36 <USBD_StdDevReq+0xc6>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <USBD_StdDevReq+0x3a>
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d14f      	bne.n	8008e36 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]
      break;
 8008da8:	e04a      	b.n	8008e40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	2b09      	cmp	r3, #9
 8008db0:	d83b      	bhi.n	8008e2a <USBD_StdDevReq+0xba>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <USBD_StdDevReq+0x48>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008e21 	.word	0x08008e21
 8008dc0:	08008e2b 	.word	0x08008e2b
 8008dc4:	08008e17 	.word	0x08008e17
 8008dc8:	08008e2b 	.word	0x08008e2b
 8008dcc:	08008deb 	.word	0x08008deb
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008e2b 	.word	0x08008e2b
 8008dd8:	08008e03 	.word	0x08008e03
 8008ddc:	08008df5 	.word	0x08008df5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9de 	bl	80091a4 <USBD_GetDescriptor>
          break;
 8008de8:	e024      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb6d 	bl	80094cc <USBD_SetAddress>
          break;
 8008df2:	e01f      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fbac 	bl	8009554 <USBD_SetConfig>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
          break;
 8008e00:	e018      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc4b 	bl	80096a0 <USBD_GetConfig>
          break;
 8008e0a:	e013      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fc7c 	bl	800970c <USBD_GetStatus>
          break;
 8008e14:	e00e      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fcab 	bl	8009774 <USBD_SetFeature>
          break;
 8008e1e:	e009      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fcba 	bl	800979c <USBD_ClrFeature>
          break;
 8008e28:	e004      	b.n	8008e34 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fd11 	bl	8009854 <USBD_CtlError>
          break;
 8008e32:	bf00      	nop
      }
      break;
 8008e34:	e004      	b.n	8008e40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fd0b 	bl	8009854 <USBD_CtlError>
      break;
 8008e3e:	bf00      	nop
  }

  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop

08008e4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e62:	2b40      	cmp	r3, #64	@ 0x40
 8008e64:	d005      	beq.n	8008e72 <USBD_StdItfReq+0x26>
 8008e66:	2b40      	cmp	r3, #64	@ 0x40
 8008e68:	d82f      	bhi.n	8008eca <USBD_StdItfReq+0x7e>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <USBD_StdItfReq+0x26>
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d12b      	bne.n	8008eca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d81d      	bhi.n	8008ebc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	889b      	ldrh	r3, [r3, #4]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d813      	bhi.n	8008eb2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d110      	bne.n	8008ec6 <USBD_StdItfReq+0x7a>
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10d      	bne.n	8008ec6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fd80 	bl	80099b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008eb0:	e009      	b.n	8008ec6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fccd 	bl	8009854 <USBD_CtlError>
          break;
 8008eba:	e004      	b.n	8008ec6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fcc8 	bl	8009854 <USBD_CtlError>
          break;
 8008ec4:	e000      	b.n	8008ec8 <USBD_StdItfReq+0x7c>
          break;
 8008ec6:	bf00      	nop
      }
      break;
 8008ec8:	e004      	b.n	8008ed4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fcc1 	bl	8009854 <USBD_CtlError>
      break;
 8008ed2:	bf00      	nop
  }

  return ret;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	889b      	ldrh	r3, [r3, #4]
 8008ef0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008efa:	2b40      	cmp	r3, #64	@ 0x40
 8008efc:	d007      	beq.n	8008f0e <USBD_StdEPReq+0x30>
 8008efe:	2b40      	cmp	r3, #64	@ 0x40
 8008f00:	f200 8145 	bhi.w	800918e <USBD_StdEPReq+0x2b0>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <USBD_StdEPReq+0x44>
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	f040 8140 	bne.w	800918e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f20:	e13a      	b.n	8009198 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d007      	beq.n	8008f3a <USBD_StdEPReq+0x5c>
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	f300 8129 	bgt.w	8009182 <USBD_StdEPReq+0x2a4>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d07f      	beq.n	8009034 <USBD_StdEPReq+0x156>
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d03c      	beq.n	8008fb2 <USBD_StdEPReq+0xd4>
 8008f38:	e123      	b.n	8009182 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d002      	beq.n	8008f4c <USBD_StdEPReq+0x6e>
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d016      	beq.n	8008f78 <USBD_StdEPReq+0x9a>
 8008f4a:	e02c      	b.n	8008fa6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00d      	beq.n	8008f6e <USBD_StdEPReq+0x90>
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	2b80      	cmp	r3, #128	@ 0x80
 8008f56:	d00a      	beq.n	8008f6e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 f817 	bl	8009f90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f62:	2180      	movs	r1, #128	@ 0x80
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 f813 	bl	8009f90 <USBD_LL_StallEP>
 8008f6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f6c:	e020      	b.n	8008fb0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fc6f 	bl	8009854 <USBD_CtlError>
              break;
 8008f76:	e01b      	b.n	8008fb0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10e      	bne.n	8008f9e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <USBD_StdEPReq+0xc0>
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b80      	cmp	r3, #128	@ 0x80
 8008f8a:	d008      	beq.n	8008f9e <USBD_StdEPReq+0xc0>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	88db      	ldrh	r3, [r3, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fff9 	bl	8009f90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fd06 	bl	80099b0 <USBD_CtlSendStatus>

              break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc53 	bl	8009854 <USBD_CtlError>
              break;
 8008fae:	bf00      	nop
          }
          break;
 8008fb0:	e0ec      	b.n	800918c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d002      	beq.n	8008fc4 <USBD_StdEPReq+0xe6>
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d016      	beq.n	8008ff0 <USBD_StdEPReq+0x112>
 8008fc2:	e030      	b.n	8009026 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00d      	beq.n	8008fe6 <USBD_StdEPReq+0x108>
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b80      	cmp	r3, #128	@ 0x80
 8008fce:	d00a      	beq.n	8008fe6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 ffdb 	bl	8009f90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fda:	2180      	movs	r1, #128	@ 0x80
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 ffd7 	bl	8009f90 <USBD_LL_StallEP>
 8008fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fe4:	e025      	b.n	8009032 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fc33 	bl	8009854 <USBD_CtlError>
              break;
 8008fee:	e020      	b.n	8009032 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	885b      	ldrh	r3, [r3, #2]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11b      	bne.n	8009030 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 ffe1 	bl	8009fce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fccf 	bl	80099b0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009024:	e004      	b.n	8009030 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fc13 	bl	8009854 <USBD_CtlError>
              break;
 800902e:	e000      	b.n	8009032 <USBD_StdEPReq+0x154>
              break;
 8009030:	bf00      	nop
          }
          break;
 8009032:	e0ab      	b.n	800918c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d002      	beq.n	8009046 <USBD_StdEPReq+0x168>
 8009040:	2b03      	cmp	r3, #3
 8009042:	d032      	beq.n	80090aa <USBD_StdEPReq+0x1cc>
 8009044:	e097      	b.n	8009176 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <USBD_StdEPReq+0x17e>
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b80      	cmp	r3, #128	@ 0x80
 8009050:	d004      	beq.n	800905c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fbfd 	bl	8009854 <USBD_CtlError>
                break;
 800905a:	e091      	b.n	8009180 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800905c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	da0b      	bge.n	800907c <USBD_StdEPReq+0x19e>
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	3310      	adds	r3, #16
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	4413      	add	r3, r2
 8009078:	3304      	adds	r3, #4
 800907a:	e00b      	b.n	8009094 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	3304      	adds	r3, #4
 8009094:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2202      	movs	r2, #2
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fc47 	bl	8009936 <USBD_CtlSendData>
              break;
 80090a8:	e06a      	b.n	8009180 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da11      	bge.n	80090d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	f003 020f 	and.w	r2, r3, #15
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	440b      	add	r3, r1
 80090c4:	3324      	adds	r3, #36	@ 0x24
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d117      	bne.n	80090fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fbc0 	bl	8009854 <USBD_CtlError>
                  break;
 80090d4:	e054      	b.n	8009180 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	f003 020f 	and.w	r2, r3, #15
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	440b      	add	r3, r1
 80090e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fbad 	bl	8009854 <USBD_CtlError>
                  break;
 80090fa:	e041      	b.n	8009180 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009100:	2b00      	cmp	r3, #0
 8009102:	da0b      	bge.n	800911c <USBD_StdEPReq+0x23e>
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	3310      	adds	r3, #16
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	4413      	add	r3, r2
 8009118:	3304      	adds	r3, #4
 800911a:	e00b      	b.n	8009134 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4413      	add	r3, r2
 8009132:	3304      	adds	r3, #4
 8009134:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <USBD_StdEPReq+0x264>
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	2b80      	cmp	r3, #128	@ 0x80
 8009140:	d103      	bne.n	800914a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e00e      	b.n	8009168 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 ff5c 	bl	800a00c <USBD_LL_IsStallEP>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2201      	movs	r2, #1
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	e002      	b.n	8009168 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2202      	movs	r2, #2
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fbe1 	bl	8009936 <USBD_CtlSendData>
              break;
 8009174:	e004      	b.n	8009180 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fb6b 	bl	8009854 <USBD_CtlError>
              break;
 800917e:	bf00      	nop
          }
          break;
 8009180:	e004      	b.n	800918c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fb65 	bl	8009854 <USBD_CtlError>
          break;
 800918a:	bf00      	nop
      }
      break;
 800918c:	e004      	b.n	8009198 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fb5f 	bl	8009854 <USBD_CtlError>
      break;
 8009196:	bf00      	nop
  }

  return ret;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	2b0e      	cmp	r3, #14
 80091c6:	f200 8152 	bhi.w	800946e <USBD_GetDescriptor+0x2ca>
 80091ca:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <USBD_GetDescriptor+0x2c>)
 80091cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d0:	08009241 	.word	0x08009241
 80091d4:	08009259 	.word	0x08009259
 80091d8:	08009299 	.word	0x08009299
 80091dc:	0800946f 	.word	0x0800946f
 80091e0:	0800946f 	.word	0x0800946f
 80091e4:	0800940f 	.word	0x0800940f
 80091e8:	0800943b 	.word	0x0800943b
 80091ec:	0800946f 	.word	0x0800946f
 80091f0:	0800946f 	.word	0x0800946f
 80091f4:	0800946f 	.word	0x0800946f
 80091f8:	0800946f 	.word	0x0800946f
 80091fc:	0800946f 	.word	0x0800946f
 8009200:	0800946f 	.word	0x0800946f
 8009204:	0800946f 	.word	0x0800946f
 8009208:	0800920d 	.word	0x0800920d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800922e:	e126      	b.n	800947e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb0e 	bl	8009854 <USBD_CtlError>
        err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
      break;
 800923e:	e11e      	b.n	800947e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
      break;
 8009256:	e112      	b.n	800947e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7c1b      	ldrb	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10d      	bne.n	800927c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009268:	f107 0208 	add.w	r2, r7, #8
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
 8009270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	2202      	movs	r2, #2
 8009278:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800927a:	e100      	b.n	800947e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009284:	f107 0208 	add.w	r2, r7, #8
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3
 800928c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3301      	adds	r3, #1
 8009292:	2202      	movs	r2, #2
 8009294:	701a      	strb	r2, [r3, #0]
      break;
 8009296:	e0f2      	b.n	800947e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	885b      	ldrh	r3, [r3, #2]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b05      	cmp	r3, #5
 80092a0:	f200 80ac 	bhi.w	80093fc <USBD_GetDescriptor+0x258>
 80092a4:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <USBD_GetDescriptor+0x108>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	080092c5 	.word	0x080092c5
 80092b0:	080092f9 	.word	0x080092f9
 80092b4:	0800932d 	.word	0x0800932d
 80092b8:	08009361 	.word	0x08009361
 80092bc:	08009395 	.word	0x08009395
 80092c0:	080093c9 	.word	0x080093c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	7c12      	ldrb	r2, [r2, #16]
 80092dc:	f107 0108 	add.w	r1, r7, #8
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e6:	e091      	b.n	800940c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fab2 	bl	8009854 <USBD_CtlError>
            err++;
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	3301      	adds	r3, #1
 80092f4:	72fb      	strb	r3, [r7, #11]
          break;
 80092f6:	e089      	b.n	800940c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	7c12      	ldrb	r2, [r2, #16]
 8009310:	f107 0108 	add.w	r1, r7, #8
 8009314:	4610      	mov	r0, r2
 8009316:	4798      	blx	r3
 8009318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931a:	e077      	b.n	800940c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa98 	bl	8009854 <USBD_CtlError>
            err++;
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	3301      	adds	r3, #1
 8009328:	72fb      	strb	r3, [r7, #11]
          break;
 800932a:	e06f      	b.n	800940c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 0108 	add.w	r1, r7, #8
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934e:	e05d      	b.n	800940c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fa7e 	bl	8009854 <USBD_CtlError>
            err++;
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	3301      	adds	r3, #1
 800935c:	72fb      	strb	r3, [r7, #11]
          break;
 800935e:	e055      	b.n	800940c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7c12      	ldrb	r2, [r2, #16]
 8009378:	f107 0108 	add.w	r1, r7, #8
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
 8009380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009382:	e043      	b.n	800940c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa64 	bl	8009854 <USBD_CtlError>
            err++;
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	3301      	adds	r3, #1
 8009390:	72fb      	strb	r3, [r7, #11]
          break;
 8009392:	e03b      	b.n	800940c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b6:	e029      	b.n	800940c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fa4a 	bl	8009854 <USBD_CtlError>
            err++;
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	3301      	adds	r3, #1
 80093c4:	72fb      	strb	r3, [r7, #11]
          break;
 80093c6:	e021      	b.n	800940c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e00f      	b.n	800940c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa30 	bl	8009854 <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e007      	b.n	800940c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa28 	bl	8009854 <USBD_CtlError>
          err++;
 8009404:	7afb      	ldrb	r3, [r7, #11]
 8009406:	3301      	adds	r3, #1
 8009408:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800940a:	bf00      	nop
      }
      break;
 800940c:	e037      	b.n	800947e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7c1b      	ldrb	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800941c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941e:	f107 0208 	add.w	r2, r7, #8
 8009422:	4610      	mov	r0, r2
 8009424:	4798      	blx	r3
 8009426:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009428:	e029      	b.n	800947e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fa11 	bl	8009854 <USBD_CtlError>
        err++;
 8009432:	7afb      	ldrb	r3, [r7, #11]
 8009434:	3301      	adds	r3, #1
 8009436:	72fb      	strb	r3, [r7, #11]
      break;
 8009438:	e021      	b.n	800947e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7c1b      	ldrb	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10d      	bne.n	800945e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944a:	f107 0208 	add.w	r2, r7, #8
 800944e:	4610      	mov	r0, r2
 8009450:	4798      	blx	r3
 8009452:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	2207      	movs	r2, #7
 800945a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800945c:	e00f      	b.n	800947e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f9f7 	bl	8009854 <USBD_CtlError>
        err++;
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	3301      	adds	r3, #1
 800946a:	72fb      	strb	r3, [r7, #11]
      break;
 800946c:	e007      	b.n	800947e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f9ef 	bl	8009854 <USBD_CtlError>
      err++;
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	3301      	adds	r3, #1
 800947a:	72fb      	strb	r3, [r7, #11]
      break;
 800947c:	bf00      	nop
  }

  if (err != 0U)
 800947e:	7afb      	ldrb	r3, [r7, #11]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11e      	bne.n	80094c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	88db      	ldrh	r3, [r3, #6]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d016      	beq.n	80094ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800948c:	893b      	ldrh	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	88da      	ldrh	r2, [r3, #6]
 8009496:	893b      	ldrh	r3, [r7, #8]
 8009498:	4293      	cmp	r3, r2
 800949a:	bf28      	it	cs
 800949c:	4613      	movcs	r3, r2
 800949e:	b29b      	uxth	r3, r3
 80094a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094a2:	893b      	ldrh	r3, [r7, #8]
 80094a4:	461a      	mov	r2, r3
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fa44 	bl	8009936 <USBD_CtlSendData>
 80094ae:	e009      	b.n	80094c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f9ce 	bl	8009854 <USBD_CtlError>
 80094b8:	e004      	b.n	80094c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa78 	bl	80099b0 <USBD_CtlSendStatus>
 80094c0:	e000      	b.n	80094c4 <USBD_GetDescriptor+0x320>
    return;
 80094c2:	bf00      	nop
  }
}
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop

080094cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	889b      	ldrh	r3, [r3, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d131      	bne.n	8009542 <USBD_SetAddress+0x76>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	88db      	ldrh	r3, [r3, #6]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d12d      	bne.n	8009542 <USBD_SetAddress+0x76>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80094ec:	d829      	bhi.n	8009542 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	885b      	ldrh	r3, [r3, #2]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b03      	cmp	r3, #3
 8009504:	d104      	bne.n	8009510 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f9a3 	bl	8009854 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950e:	e01d      	b.n	800954c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7bfa      	ldrb	r2, [r7, #15]
 8009514:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fda1 	bl	800a064 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa44 	bl	80099b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2202      	movs	r2, #2
 8009532:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009536:	e009      	b.n	800954c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009540:	e004      	b.n	800954c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f985 	bl	8009854 <USBD_CtlError>
  }
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	b2da      	uxtb	r2, r3
 8009568:	4b4c      	ldr	r3, [pc, #304]	@ (800969c <USBD_SetConfig+0x148>)
 800956a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800956c:	4b4b      	ldr	r3, [pc, #300]	@ (800969c <USBD_SetConfig+0x148>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d905      	bls.n	8009580 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f96c 	bl	8009854 <USBD_CtlError>
    return USBD_FAIL;
 800957c:	2303      	movs	r3, #3
 800957e:	e088      	b.n	8009692 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d002      	beq.n	8009592 <USBD_SetConfig+0x3e>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d025      	beq.n	80095dc <USBD_SetConfig+0x88>
 8009590:	e071      	b.n	8009676 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009592:	4b42      	ldr	r3, [pc, #264]	@ (800969c <USBD_SetConfig+0x148>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d01c      	beq.n	80095d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800959a:	4b40      	ldr	r3, [pc, #256]	@ (800969c <USBD_SetConfig+0x148>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095a4:	4b3d      	ldr	r3, [pc, #244]	@ (800969c <USBD_SetConfig+0x148>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff f990 	bl	80088d0 <USBD_SetClassConfig>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d004      	beq.n	80095c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f949 	bl	8009854 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c2:	e065      	b.n	8009690 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f9f3 	bl	80099b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2203      	movs	r2, #3
 80095ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095d2:	e05d      	b.n	8009690 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f9eb 	bl	80099b0 <USBD_CtlSendStatus>
      break;
 80095da:	e059      	b.n	8009690 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095dc:	4b2f      	ldr	r3, [pc, #188]	@ (800969c <USBD_SetConfig+0x148>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d112      	bne.n	800960a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095ec:	4b2b      	ldr	r3, [pc, #172]	@ (800969c <USBD_SetConfig+0x148>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095f6:	4b29      	ldr	r3, [pc, #164]	@ (800969c <USBD_SetConfig+0x148>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff f983 	bl	8008908 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f9d4 	bl	80099b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009608:	e042      	b.n	8009690 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800960a:	4b24      	ldr	r3, [pc, #144]	@ (800969c <USBD_SetConfig+0x148>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	429a      	cmp	r2, r3
 8009616:	d02a      	beq.n	800966e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff f971 	bl	8008908 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009626:	4b1d      	ldr	r3, [pc, #116]	@ (800969c <USBD_SetConfig+0x148>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009630:	4b1a      	ldr	r3, [pc, #104]	@ (800969c <USBD_SetConfig+0x148>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff f94a 	bl	80088d0 <USBD_SetClassConfig>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00f      	beq.n	8009666 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f903 	bl	8009854 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff f956 	bl	8008908 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009664:	e014      	b.n	8009690 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9a2 	bl	80099b0 <USBD_CtlSendStatus>
      break;
 800966c:	e010      	b.n	8009690 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f99e 	bl	80099b0 <USBD_CtlSendStatus>
      break;
 8009674:	e00c      	b.n	8009690 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8eb 	bl	8009854 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800967e:	4b07      	ldr	r3, [pc, #28]	@ (800969c <USBD_SetConfig+0x148>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff f93f 	bl	8008908 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800968a:	2303      	movs	r3, #3
 800968c:	73fb      	strb	r3, [r7, #15]
      break;
 800968e:	bf00      	nop
  }

  return ret;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200004a8 	.word	0x200004a8

080096a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	88db      	ldrh	r3, [r3, #6]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d004      	beq.n	80096bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8cd 	bl	8009854 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096ba:	e023      	b.n	8009704 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	dc02      	bgt.n	80096ce <USBD_GetConfig+0x2e>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc03      	bgt.n	80096d4 <USBD_GetConfig+0x34>
 80096cc:	e015      	b.n	80096fa <USBD_GetConfig+0x5a>
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d00b      	beq.n	80096ea <USBD_GetConfig+0x4a>
 80096d2:	e012      	b.n	80096fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3308      	adds	r3, #8
 80096de:	2201      	movs	r2, #1
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f927 	bl	8009936 <USBD_CtlSendData>
        break;
 80096e8:	e00c      	b.n	8009704 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3304      	adds	r3, #4
 80096ee:	2201      	movs	r2, #1
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f91f 	bl	8009936 <USBD_CtlSendData>
        break;
 80096f8:	e004      	b.n	8009704 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8a9 	bl	8009854 <USBD_CtlError>
        break;
 8009702:	bf00      	nop
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971c:	b2db      	uxtb	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	2b02      	cmp	r3, #2
 8009722:	d81e      	bhi.n	8009762 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	88db      	ldrh	r3, [r3, #6]
 8009728:	2b02      	cmp	r3, #2
 800972a:	d004      	beq.n	8009736 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f890 	bl	8009854 <USBD_CtlError>
        break;
 8009734:	e01a      	b.n	800976c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f043 0202 	orr.w	r2, r3, #2
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	330c      	adds	r3, #12
 8009756:	2202      	movs	r2, #2
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f8eb 	bl	8009936 <USBD_CtlSendData>
      break;
 8009760:	e004      	b.n	800976c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f875 	bl	8009854 <USBD_CtlError>
      break;
 800976a:	bf00      	nop
  }
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	885b      	ldrh	r3, [r3, #2]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d106      	bne.n	8009794 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f90e 	bl	80099b0 <USBD_CtlSendStatus>
  }
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d80b      	bhi.n	80097cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	885b      	ldrh	r3, [r3, #2]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10c      	bne.n	80097d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f8f3 	bl	80099b0 <USBD_CtlSendStatus>
      }
      break;
 80097ca:	e004      	b.n	80097d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f840 	bl	8009854 <USBD_CtlError>
      break;
 80097d4:	e000      	b.n	80097d8 <USBD_ClrFeature+0x3c>
      break;
 80097d6:	bf00      	nop
  }
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	781a      	ldrb	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7ff fa90 	bl	8008d30 <SWAPBYTE>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3301      	adds	r3, #1
 8009822:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff fa83 	bl	8008d30 <SWAPBYTE>
 800982a:	4603      	mov	r3, r0
 800982c:	461a      	mov	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3301      	adds	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fa76 	bl	8008d30 <SWAPBYTE>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	80da      	strh	r2, [r3, #6]
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800985e:	2180      	movs	r1, #128	@ 0x80
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fb95 	bl	8009f90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fb91 	bl	8009f90 <USBD_LL_StallEP>
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d036      	beq.n	80098fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009890:	6938      	ldr	r0, [r7, #16]
 8009892:	f000 f836 	bl	8009902 <USBD_GetLen>
 8009896:	4603      	mov	r3, r0
 8009898:	3301      	adds	r3, #1
 800989a:	b29b      	uxth	r3, r3
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	7812      	ldrb	r2, [r2, #0]
 80098ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	3301      	adds	r3, #1
 80098b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4413      	add	r3, r2
 80098bc:	2203      	movs	r2, #3
 80098be:	701a      	strb	r2, [r3, #0]
  idx++;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	3301      	adds	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098c6:	e013      	b.n	80098f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	4413      	add	r3, r2
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	7812      	ldrb	r2, [r2, #0]
 80098d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3301      	adds	r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
    idx++;
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	3301      	adds	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4413      	add	r3, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	3301      	adds	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e7      	bne.n	80098c8 <USBD_GetString+0x52>
 80098f8:	e000      	b.n	80098fc <USBD_GetString+0x86>
    return;
 80098fa:	bf00      	nop
  }
}
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009902:	b480      	push	{r7}
 8009904:	b085      	sub	sp, #20
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009912:	e005      	b.n	8009920 <USBD_GetLen+0x1e>
  {
    len++;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	3301      	adds	r3, #1
 8009918:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	3301      	adds	r3, #1
 800991e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1f5      	bne.n	8009914 <USBD_GetLen+0x12>
  }

  return len;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2202      	movs	r2, #2
 8009946:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	2100      	movs	r1, #0
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fba0 	bl	800a0a2 <USBD_LL_Transmit>

  return USBD_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	2100      	movs	r1, #0
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fb8f 	bl	800a0a2 <USBD_LL_Transmit>

  return USBD_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	2100      	movs	r1, #0
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fb9f 	bl	800a0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2204      	movs	r2, #4
 80099bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099c0:	2300      	movs	r3, #0
 80099c2:	2200      	movs	r2, #0
 80099c4:	2100      	movs	r1, #0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fb6b 	bl	800a0a2 <USBD_LL_Transmit>

  return USBD_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2205      	movs	r2, #5
 80099e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099e6:	2300      	movs	r3, #0
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb79 	bl	800a0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 8009a00:	2200      	movs	r2, #0
 8009a02:	490e      	ldr	r1, [pc, #56]	@ (8009a3c <MX_USB_Device_Init+0x40>)
 8009a04:	480e      	ldr	r0, [pc, #56]	@ (8009a40 <MX_USB_Device_Init+0x44>)
 8009a06:	f7fe fef5 	bl	80087f4 <USBD_Init>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009a10:	f7f6 ffab 	bl	800096a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 8009a14:	490b      	ldr	r1, [pc, #44]	@ (8009a44 <MX_USB_Device_Init+0x48>)
 8009a16:	480a      	ldr	r0, [pc, #40]	@ (8009a40 <MX_USB_Device_Init+0x44>)
 8009a18:	f7fe ff1c 	bl	8008854 <USBD_RegisterClass>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009a22:	f7f6 ffa2 	bl	800096a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009a26:	4806      	ldr	r0, [pc, #24]	@ (8009a40 <MX_USB_Device_Init+0x44>)
 8009a28:	f7fe ff3b 	bl	80088a2 <USBD_Start>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 8009a32:	f7f6 ff9a 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a36:	bf00      	nop
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000114 	.word	0x20000114
 8009a40:	200004ac 	.word	0x200004ac
 8009a44:	2000000c 	.word	0x2000000c

08009a48 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2212      	movs	r2, #18
 8009a58:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8009a5a:	4b03      	ldr	r3, [pc, #12]	@ (8009a68 <USBD_HID_DeviceDescriptor+0x20>)
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	20000134 	.word	0x20000134

08009a6c <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a7e:	4b03      	ldr	r3, [pc, #12]	@ (8009a8c <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	20000148 	.word	0x20000148

08009a90 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	4907      	ldr	r1, [pc, #28]	@ (8009ac4 <USBD_HID_ProductStrDescriptor+0x34>)
 8009aa6:	4808      	ldr	r0, [pc, #32]	@ (8009ac8 <USBD_HID_ProductStrDescriptor+0x38>)
 8009aa8:	f7ff fee5 	bl	8009876 <USBD_GetString>
 8009aac:	e004      	b.n	8009ab8 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4904      	ldr	r1, [pc, #16]	@ (8009ac4 <USBD_HID_ProductStrDescriptor+0x34>)
 8009ab2:	4805      	ldr	r0, [pc, #20]	@ (8009ac8 <USBD_HID_ProductStrDescriptor+0x38>)
 8009ab4:	f7ff fedf 	bl	8009876 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ab8:	4b02      	ldr	r3, [pc, #8]	@ (8009ac4 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	2000077c 	.word	0x2000077c
 8009ac8:	0800a298 	.word	0x0800a298

08009acc <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	6039      	str	r1, [r7, #0]
 8009ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	4904      	ldr	r1, [pc, #16]	@ (8009aec <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8009adc:	4804      	ldr	r0, [pc, #16]	@ (8009af0 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8009ade:	f7ff feca 	bl	8009876 <USBD_GetString>
  return USBD_StrDesc;
 8009ae2:	4b02      	ldr	r3, [pc, #8]	@ (8009aec <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	2000077c 	.word	0x2000077c
 8009af0:	0800a2b0 	.word	0x0800a2b0

08009af4 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	221a      	movs	r2, #26
 8009b04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b06:	f000 f843 	bl	8009b90 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b0a:	4b02      	ldr	r3, [pc, #8]	@ (8009b14 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000014c 	.word	0x2000014c

08009b18 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	6039      	str	r1, [r7, #0]
 8009b22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	4907      	ldr	r1, [pc, #28]	@ (8009b4c <USBD_HID_ConfigStrDescriptor+0x34>)
 8009b2e:	4808      	ldr	r0, [pc, #32]	@ (8009b50 <USBD_HID_ConfigStrDescriptor+0x38>)
 8009b30:	f7ff fea1 	bl	8009876 <USBD_GetString>
 8009b34:	e004      	b.n	8009b40 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4904      	ldr	r1, [pc, #16]	@ (8009b4c <USBD_HID_ConfigStrDescriptor+0x34>)
 8009b3a:	4805      	ldr	r0, [pc, #20]	@ (8009b50 <USBD_HID_ConfigStrDescriptor+0x38>)
 8009b3c:	f7ff fe9b 	bl	8009876 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b40:	4b02      	ldr	r3, [pc, #8]	@ (8009b4c <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	2000077c 	.word	0x2000077c
 8009b50:	0800a2c4 	.word	0x0800a2c4

08009b54 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	6039      	str	r1, [r7, #0]
 8009b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4907      	ldr	r1, [pc, #28]	@ (8009b88 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009b6a:	4808      	ldr	r0, [pc, #32]	@ (8009b8c <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009b6c:	f7ff fe83 	bl	8009876 <USBD_GetString>
 8009b70:	e004      	b.n	8009b7c <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4904      	ldr	r1, [pc, #16]	@ (8009b88 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009b76:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009b78:	f7ff fe7d 	bl	8009876 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b7c:	4b02      	ldr	r3, [pc, #8]	@ (8009b88 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	2000077c 	.word	0x2000077c
 8009b8c:	0800a2d0 	.word	0x0800a2d0

08009b90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b96:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd4 <Get_SerialNum+0x44>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd8 <Get_SerialNum+0x48>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8009bdc <Get_SerialNum+0x4c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bb6:	2208      	movs	r2, #8
 8009bb8:	4909      	ldr	r1, [pc, #36]	@ (8009be0 <Get_SerialNum+0x50>)
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 f814 	bl	8009be8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	4908      	ldr	r1, [pc, #32]	@ (8009be4 <Get_SerialNum+0x54>)
 8009bc4:	68b8      	ldr	r0, [r7, #8]
 8009bc6:	f000 f80f 	bl	8009be8 <IntToUnicode>
  }
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	1fff7590 	.word	0x1fff7590
 8009bd8:	1fff7594 	.word	0x1fff7594
 8009bdc:	1fff7598 	.word	0x1fff7598
 8009be0:	2000014e 	.word	0x2000014e
 8009be4:	2000015e 	.word	0x2000015e

08009be8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	e027      	b.n	8009c50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	0f1b      	lsrs	r3, r3, #28
 8009c04:	2b09      	cmp	r3, #9
 8009c06:	d80b      	bhi.n	8009c20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0f1b      	lsrs	r3, r3, #28
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4619      	mov	r1, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	440b      	add	r3, r1
 8009c18:	3230      	adds	r2, #48	@ 0x30
 8009c1a:	b2d2      	uxtb	r2, r2
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	e00a      	b.n	8009c36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	0f1b      	lsrs	r3, r3, #28
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	440b      	add	r3, r1
 8009c30:	3237      	adds	r2, #55	@ 0x37
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	3301      	adds	r3, #1
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	4413      	add	r3, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	75fb      	strb	r3, [r7, #23]
 8009c50:	7dfa      	ldrb	r2, [r7, #23]
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d3d3      	bcc.n	8009c00 <IntToUnicode+0x18>
  }
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
	...

08009c68 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b094      	sub	sp, #80	@ 0x50
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c70:	f107 030c 	add.w	r3, r7, #12
 8009c74:	2244      	movs	r2, #68	@ 0x44
 8009c76:	2100      	movs	r1, #0
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fad5 	bl	800a228 <memset>
  if(pcdHandle->Instance==USB)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a15      	ldr	r2, [pc, #84]	@ (8009cd8 <HAL_PCD_MspInit+0x70>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d122      	bne.n	8009cce <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009c88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c92:	f107 030c 	add.w	r3, r7, #12
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fb fb74 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009ca2:	f7f6 fe62 	bl	800096a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <HAL_PCD_MspInit+0x74>)
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009caa:	4a0c      	ldr	r2, [pc, #48]	@ (8009cdc <HAL_PCD_MspInit+0x74>)
 8009cac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009cdc <HAL_PCD_MspInit+0x74>)
 8009cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cba:	60bb      	str	r3, [r7, #8]
 8009cbc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	2014      	movs	r0, #20
 8009cc4:	f7f8 fc0f 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009cc8:	2014      	movs	r0, #20
 8009cca:	f7f8 fc26 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3750      	adds	r7, #80	@ 0x50
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40005c00 	.word	0x40005c00
 8009cdc:	40021000 	.word	0x40021000

08009ce0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fe fe1e 	bl	8008938 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009d16:	78fa      	ldrb	r2, [r7, #3]
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	440b      	add	r3, r1
 8009d24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	f7fe fe58 	bl	80089e2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009d4c:	78fa      	ldrb	r2, [r7, #3]
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	440b      	add	r3, r1
 8009d5a:	3324      	adds	r3, #36	@ 0x24
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	4619      	mov	r1, r3
 8009d62:	f7fe fea1 	bl	8008aa8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe ffb5 	bl	8008cec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d92:	2301      	movs	r3, #1
 8009d94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	795b      	ldrb	r3, [r3, #5]
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d001      	beq.n	8009da2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d9e:	f7f6 fde4 	bl	800096a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009da8:	7bfa      	ldrb	r2, [r7, #15]
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe ff5f 	bl	8008c70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fe ff0b 	bl	8008bd4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fe ff5a 	bl	8008c90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7a5b      	ldrb	r3, [r3, #9]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d005      	beq.n	8009df0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009de4:	4b04      	ldr	r3, [pc, #16]	@ (8009df8 <HAL_PCD_SuspendCallback+0x30>)
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	4a03      	ldr	r2, [pc, #12]	@ (8009df8 <HAL_PCD_SuspendCallback+0x30>)
 8009dea:	f043 0306 	orr.w	r3, r3, #6
 8009dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	e000ed00 	.word	0xe000ed00

08009dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	7a5b      	ldrb	r3, [r3, #9]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e0c:	4b08      	ldr	r3, [pc, #32]	@ (8009e30 <HAL_PCD_ResumeCallback+0x34>)
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	4a07      	ldr	r2, [pc, #28]	@ (8009e30 <HAL_PCD_ResumeCallback+0x34>)
 8009e12:	f023 0306 	bic.w	r3, r3, #6
 8009e16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009e18:	f000 f9d4 	bl	800a1c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe ff4a 	bl	8008cbc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	e000ed00 	.word	0xe000ed00

08009e34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009e3c:	4a22      	ldr	r2, [pc, #136]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a20      	ldr	r2, [pc, #128]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e48:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ecc <USBD_LL_Init+0x98>)
 8009e50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009e52:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e54:	2208      	movs	r2, #8
 8009e56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009e58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e60:	2202      	movs	r2, #2
 8009e62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009e64:	4b18      	ldr	r3, [pc, #96]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e6a:	4b17      	ldr	r3, [pc, #92]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e70:	4b15      	ldr	r3, [pc, #84]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e76:	4b14      	ldr	r3, [pc, #80]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009e7c:	4812      	ldr	r0, [pc, #72]	@ (8009ec8 <USBD_LL_Init+0x94>)
 8009e7e:	f7f8 ffed 	bl	8002e5c <HAL_PCD_Init>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009e88:	f7f6 fd6f 	bl	800096a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e92:	2318      	movs	r3, #24
 8009e94:	2200      	movs	r2, #0
 8009e96:	2100      	movs	r1, #0
 8009e98:	f7fa fc5c 	bl	8004754 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ea2:	2358      	movs	r3, #88	@ 0x58
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2180      	movs	r1, #128	@ 0x80
 8009ea8:	f7fa fc54 	bl	8004754 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009eb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2181      	movs	r1, #129	@ 0x81
 8009eba:	f7fa fc4b 	bl	8004754 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	2000097c 	.word	0x2000097c
 8009ecc:	40005c00 	.word	0x40005c00

08009ed0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f9 f886 	bl	8002ff8 <HAL_PCD_Start>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f96c 	bl	800a1d0 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	461a      	mov	r2, r3
 8009f14:	4603      	mov	r3, r0
 8009f16:	70fb      	strb	r3, [r7, #3]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70bb      	strb	r3, [r7, #2]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f2e:	78bb      	ldrb	r3, [r7, #2]
 8009f30:	883a      	ldrh	r2, [r7, #0]
 8009f32:	78f9      	ldrb	r1, [r7, #3]
 8009f34:	f7f9 f9cd 	bl	80032d2 <HAL_PCD_EP_Open>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f946 	bl	800a1d0 <USBD_Get_USB_Status>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7f9 fa0d 	bl	8003390 <HAL_PCD_EP_Close>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 f927 	bl	800a1d0 <USBD_Get_USB_Status>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f9 fa9e 	bl	80034f0 <HAL_PCD_EP_SetStall>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 f908 	bl	800a1d0 <USBD_Get_USB_Status>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	4611      	mov	r1, r2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7f9 fad1 	bl	8003594 <HAL_PCD_EP_ClrStall>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f8e9 	bl	800a1d0 <USBD_Get_USB_Status>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a002:	7bbb      	ldrb	r3, [r7, #14]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a01e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	da0b      	bge.n	800a040 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	440b      	add	r3, r1
 800a03a:	3312      	adds	r3, #18
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	e00b      	b.n	800a058 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	440b      	add	r3, r1
 800a052:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a056:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f7f9 f901 	bl	800328a <HAL_PCD_SetAddress>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f89e 	bl	800a1d0 <USBD_Get_USB_Status>
 800a094:	4603      	mov	r3, r0
 800a096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a098:	7bbb      	ldrb	r3, [r7, #14]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a0c0:	7af9      	ldrb	r1, [r7, #11]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	f7f9 f9dc 	bl	8003482 <HAL_PCD_EP_Transmit>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 f87d 	bl	800a1d0 <USBD_Get_USB_Status>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a102:	7af9      	ldrb	r1, [r7, #11]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	f7f9 f98a 	bl	8003420 <HAL_PCD_EP_Receive>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f85c 	bl	800a1d0 <USBD_Get_USB_Status>
 800a118:	4603      	mov	r3, r0
 800a11a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a11c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <HAL_PCDEx_LPM_Callback+0x18>
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d013      	beq.n	800a166 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a13e:	e023      	b.n	800a188 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	7a5b      	ldrb	r3, [r3, #9]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a148:	f000 f83c 	bl	800a1c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a14c:	4b10      	ldr	r3, [pc, #64]	@ (800a190 <HAL_PCDEx_LPM_Callback+0x68>)
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	4a0f      	ldr	r2, [pc, #60]	@ (800a190 <HAL_PCDEx_LPM_Callback+0x68>)
 800a152:	f023 0306 	bic.w	r3, r3, #6
 800a156:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fdac 	bl	8008cbc <USBD_LL_Resume>
    break;
 800a164:	e010      	b.n	800a188 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fd8f 	bl	8008c90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7a5b      	ldrb	r3, [r3, #9]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a17a:	4b05      	ldr	r3, [pc, #20]	@ (800a190 <HAL_PCDEx_LPM_Callback+0x68>)
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	4a04      	ldr	r2, [pc, #16]	@ (800a190 <HAL_PCDEx_LPM_Callback+0x68>)
 800a180:	f043 0306 	orr.w	r3, r3, #6
 800a184:	6113      	str	r3, [r2, #16]
    break;
 800a186:	bf00      	nop
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	e000ed00 	.word	0xe000ed00

0800a194 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a19c:	4b03      	ldr	r3, [pc, #12]	@ (800a1ac <USBD_static_malloc+0x18>)
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	20000c58 	.word	0x20000c58

0800a1b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]

}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a1c8:	f7f6 fb84 	bl	80008d4 <SystemClock_Config>
}
 800a1cc:	bf00      	nop
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d817      	bhi.n	800a214 <USBD_Get_USB_Status+0x44>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <USBD_Get_USB_Status+0x1c>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a1fd 	.word	0x0800a1fd
 800a1f0:	0800a203 	.word	0x0800a203
 800a1f4:	0800a209 	.word	0x0800a209
 800a1f8:	0800a20f 	.word	0x0800a20f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a200:	e00b      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
    break;
 800a206:	e008      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
    break;
 800a20c:	e005      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a20e:	2303      	movs	r3, #3
 800a210:	73fb      	strb	r3, [r7, #15]
    break;
 800a212:	e002      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a214:	2303      	movs	r3, #3
 800a216:	73fb      	strb	r3, [r7, #15]
    break;
 800a218:	bf00      	nop
  }
  return usb_status;
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <memset>:
 800a228:	4402      	add	r2, r0
 800a22a:	4603      	mov	r3, r0
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d100      	bne.n	800a232 <memset+0xa>
 800a230:	4770      	bx	lr
 800a232:	f803 1b01 	strb.w	r1, [r3], #1
 800a236:	e7f9      	b.n	800a22c <memset+0x4>

0800a238 <__libc_init_array>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4d0d      	ldr	r5, [pc, #52]	@ (800a270 <__libc_init_array+0x38>)
 800a23c:	4c0d      	ldr	r4, [pc, #52]	@ (800a274 <__libc_init_array+0x3c>)
 800a23e:	1b64      	subs	r4, r4, r5
 800a240:	10a4      	asrs	r4, r4, #2
 800a242:	2600      	movs	r6, #0
 800a244:	42a6      	cmp	r6, r4
 800a246:	d109      	bne.n	800a25c <__libc_init_array+0x24>
 800a248:	4d0b      	ldr	r5, [pc, #44]	@ (800a278 <__libc_init_array+0x40>)
 800a24a:	4c0c      	ldr	r4, [pc, #48]	@ (800a27c <__libc_init_array+0x44>)
 800a24c:	f000 f818 	bl	800a280 <_init>
 800a250:	1b64      	subs	r4, r4, r5
 800a252:	10a4      	asrs	r4, r4, #2
 800a254:	2600      	movs	r6, #0
 800a256:	42a6      	cmp	r6, r4
 800a258:	d105      	bne.n	800a266 <__libc_init_array+0x2e>
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a260:	4798      	blx	r3
 800a262:	3601      	adds	r6, #1
 800a264:	e7ee      	b.n	800a244 <__libc_init_array+0xc>
 800a266:	f855 3b04 	ldr.w	r3, [r5], #4
 800a26a:	4798      	blx	r3
 800a26c:	3601      	adds	r6, #1
 800a26e:	e7f2      	b.n	800a256 <__libc_init_array+0x1e>
 800a270:	0800a2f0 	.word	0x0800a2f0
 800a274:	0800a2f0 	.word	0x0800a2f0
 800a278:	0800a2f0 	.word	0x0800a2f0
 800a27c:	0800a2f4 	.word	0x0800a2f4

0800a280 <_init>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr

0800a28c <_fini>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr
